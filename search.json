[{"path":"https://bavodc.github.io/actuaRE/articles/actuaRE.html","id":"handling-hierarchically-multi-level-factors-using-random-effects-models","dir":"Articles","previous_headings":"","what":"Handling hierarchically multi-level factors using random effects models","title":"Introduction to actuaRE","text":"Multi-level factors (MLFs) nominal variables many levels ordinary generalized linear model (GLM) estimation (Ohlsson Johansson 2010). Within machine learning literature, type risk factors better known high-cardinality attributes (Micci-Barreca 2001). package focuses MLFs exhibit hierarchical structure typical example hereof, within workers’ compensation insurance, NACE code. illustration, work hierarchical MLF two hierarchical levels: industry branch. Figure 1 visualizes hierarchical structure hypothetical example. Figure 1: Hierarchical structure hypothetical example","code":""},{"path":"https://bavodc.github.io/actuaRE/articles/actuaRE.html","id":"which-random-effects-models-can-we-fit-using-actuare","dir":"Articles","previous_headings":"Handling hierarchically multi-level factors using random effects models","what":"Which random effects models can we fit using actuaRE?","title":"Introduction to actuaRE","text":"current version actuaRE package, able fit random effects models following functional form \\[\\begin{align*} g(E[Y_{ijkt} | U_j, U_{jk}]) &= \\mu + \\boldsymbol{x}_{ijkt}^\\top \\boldsymbol{\\beta} + U_j + U_{jk} \\\\&= \\zeta_{ijkt}.\\\\ \\end{align*}\\] , \\(Y_{ijkt}\\) denotes loss cost risk profile \\(\\) (based company-specific risk factors) operating branch \\(k\\) within industry \\(j\\) time \\(t\\). calculate loss cost \\[\\begin{align*}   Y_{ijkt} = \\frac{Z_{ijkt}}{w_{ijkt}} \\end{align*}\\] \\(Z_{ijkt}\\) denotes total claim cost \\(w_{ijkt}\\) appropriate volume measure. \\(g(\\cdot)\\) denotes link function (example identity log link), \\(\\mu\\) intercept, \\(\\boldsymbol{x}_{ijkt}\\) company-specific covariate vector \\(\\boldsymbol{\\beta}\\) corresponding parameter vector. model parameters \\(\\mu\\) \\(\\boldsymbol{\\beta}\\) capture company-specific effects. assess effect hierarchical MLF, introduce random effects \\(U_j\\) \\(U_{jk}\\) capture unobservable effects industry branch company operates. \\(U_j\\) denotes industry-specific deviation \\(\\mu + \\boldsymbol{x}_{ijkt}^\\top \\boldsymbol{\\beta}\\) \\(U_{jk}\\) denotes branch-specific deviation \\(\\mu + \\boldsymbol{x}_{ijkt}^\\top \\boldsymbol{\\beta} + U_{j}\\). assume random industry effects \\(U_j\\) independent identically distributed (..d.) \\(E[U_j] = 0\\) \\(Var(U_j) = \\sigma_{}^2\\). Similarly, random branch effects \\(U_{jk}\\) assumed ..d. \\(E[U_{jk}] = 0\\) \\(Var(U_{jk}) = \\sigma_{B}^2\\). package offers three different estimation methods estimate model parameters:  - Hierarchical credibility model (Jewell 1975)  - Combining hierarchical credibility model GLM (Ohlsson 2008)  - Mixed models (Molenberghs Verbeke 2005)","code":""},{"path":[]},{"path":"https://bavodc.github.io/actuaRE/articles/actuaRE.html","id":"example-data-set","dir":"Articles","previous_headings":"Handling hierarchically multi-level factors using random effects models > Just the code please","what":"Example data set","title":"Introduction to actuaRE","text":"illustrate functions, make use two different data sets. illustrate hierarchical credibility model Jewell (Jewell 1975) using Hachemeister (Hachemeister 1975) data set. functions make use dataCar data set.","code":""},{"path":"https://bavodc.github.io/actuaRE/articles/actuaRE.html","id":"hierarchical-credibility-model","dir":"Articles","previous_headings":"Handling hierarchically multi-level factors using random effects models > Just the code please","what":"Hierarchical credibility model","title":"Introduction to actuaRE","text":"estimate parameters using hierarchical credibility model, use function hierCredibility. default, additive hierarchical credibility model (Dannenburg, Kaas, Goovaerts 1996) fit \\[\\begin{align*}         E[Y_{ijkt} | U_j, U_{jk}] &= \\mu + U_j + U_{jk}. \\end{align*}\\] fit multiplicative hierarchical credibility model (Ohlsson 2005) \\[\\begin{align*}         E[Y_{ijkt} | \\widetilde{U}_j, \\widetilde{U}_{jk}] &= \\tilde{\\mu} \\ \\widetilde{U}_j \\ \\widetilde{U}_{jk} \\end{align*}\\] specify type = \"multiplicative\". get summary model fit, use summary function. obtain fitted values, use fitted function use ranef extract estimated random effects. can inspect estimated random effects using function plotRE.  obtain predictions new data frame, use predict function.","code":"capture.output(library(actuaRE), file = tempfile()) # suppress startup message #> Loading required package: cplm #> Loading required package: coda #> Loading required package: Matrix #> Loading required package: splines #> Package 'actuaRE' version 0.1.3 #> This is version 0.1.3 of actuaRE data(\"hachemeisterLong\") fitHC = hierCredibility(ratio, weight, cohort, state, hachemeisterLong) fitHC #> Call: #> hierCredibility(Yijkt = ratio, wijkt = weight, sector = cohort,  #>     group = state, data = hachemeisterLong) #>  #>  #> Additive hierarchical credibility model #>  #> Estimated variance parameters: #>   Individual contracts: 139120026  #>   Var(V[jk]): 11628.45  #>   Var(V[j]): 88476.11  #> Unique number of categories of cohort: 2 #> Unique number of categories of state: 5 fitHCMult = hierCredibility(ratio, weight, cohort, state, hachemeisterLong, type = \"multiplicative\") fitHCMult summary(fitHC) #> Call: #> hierCredibility(Yijkt = ratio, wijkt = weight, sector = cohort,  #>     group = state, data = hachemeisterLong) #>  #>  #> Additive hierarchical credibility model #>  #> Estimated variance parameters: #>   Individual contracts: 139120026  #>   Var(V[jk]): 11628.45  #>   Var(V[j]): 88476.11  #> Unique number of categories of cohort: 2 #> Unique number of categories of state: 5  #>  #> Estimates at the cohort level: #>  #>    cohort       zj Yjz_BarTilde        qj       Vj        Uj #> 1:      1 1.427755     1965.436 0.9157058 1946.859  201.8044 #> 2:      2 1.633248     1527.011 0.9255216 1543.250 -201.8044 #>  #> Estimates at the state level: #>  #>    cohort state    wjk Yjk_BarTilde       zjk      Vjk       Ujk #> 1:      1     1 100155     2060.921 0.8932938 2048.750 101.89107 #> 2:      1     3  13735     1805.843 0.5344614 1871.491 -75.36785 #> 3:      2     2  19895     1511.224 0.6244749 1523.251 -19.99963 #> 4:      2     4   4152     1352.976 0.2576359 1494.229 -49.02155 #> 5:      2     5  36110     1599.829 0.7511373 1585.748  42.49796 fitted(fitHC) #>  [1] 2048.750 2048.750 2048.750 2048.750 2048.750 2048.750 2048.750 2048.750 #>  [9] 2048.750 2048.750 2048.750 2048.750 1871.491 1871.491 1871.491 1871.491 #> [17] 1871.491 1871.491 1871.491 1871.491 1871.491 1871.491 1871.491 1871.491 #> [25] 1523.251 1523.251 1523.251 1523.251 1523.251 1523.251 1523.251 1523.251 #> [33] 1523.251 1523.251 1523.251 1523.251 1494.229 1494.229 1494.229 1494.229 #> [41] 1494.229 1494.229 1494.229 1494.229 1494.229 1494.229 1494.229 1494.229 #> [49] 1585.748 1585.748 1585.748 1585.748 1585.748 1585.748 1585.748 1585.748 #> [57] 1585.748 1585.748 1585.748 1585.748 ranef(fitHC) #> $sector #>    cohort        Uj #> 1:      1  201.8044 #> 2:      2 -201.8044 #>  #> $group #>    cohort state       Ujk #> 1:      1     1 101.89107 #> 2:      1     3 -75.36785 #> 3:      2     2 -19.99963 #> 4:      2     4 -49.02155 #> 5:      2     5  42.49796 ggPlots = plotRE(fitHC, plot = FALSE) ggPlots[[1]] ggPlots[[2]] newDt = hachemeisterLong[sample(1:nrow(hachemeisterLong), 5, F), ] predict(fitHC, newDt) #> [1] 1871.491 1523.251 1494.229 1585.748 1585.748"},{"path":"https://bavodc.github.io/actuaRE/articles/actuaRE.html","id":"combining-the-hierarchical-credibility-model-with-a-glm","dir":"Articles","previous_headings":"Handling hierarchically multi-level factors using random effects models > Just the code please","what":"Combining the hierarchical credibility model with a GLM","title":"Introduction to actuaRE","text":"allow company-specific risk factors, extend multiplicative hierarchical credibility model \\[\\begin{align*}         E[Y_{ijkt} | \\widetilde{U}_j, \\widetilde{U}_{jk}] &= \\tilde{\\mu} \\ \\gamma_{ijkt} \\ \\widetilde{U}_j \\ \\widetilde{U}_{jk} = \\gamma_{ijkt} V_{jk} \\end{align*}\\] \\(\\gamma_{ijkt}\\) denotes effect company-specific covariates. estimate model using Ohlsson’s GLMC algorithm (Ohlsson 2008), use can either use function hierCredGLM hierCredTweedie. hierCredGLM allows user specify power parameter \\(p\\). Conversely, hierCredTweedie estimates power parameter \\(p\\) along parameters using cpglm function cplm package. use syntax used package lme4 specify model formula. , (1 | VehicleType / VehicleBody) specifies random effect \\(U_j\\) VehicleType nested random effect \\(U_{jk}\\) VehicleBody. extract estimated parameters using fixef (company-specific effects) ranef (random effects). addition, functions can used.","code":"data(\"dataCar\") fit = hierCredGLM(Y ~ area + (1 | VehicleType / VehicleBody), dataCar, weights = w) summary(fit) #> Call: #> hierCredGLM(formula = Y ~ area + (1 | VehicleType/VehicleBody),  #>     data = dataCar, weights = w) #>  #>  #> Combination of the hierarchical credibility model with a GLM #>  #> Estimated variance parameters: #>   Individual contracts: 4288715  #>   Var(V[jk]): 349.22  #>   Var(V[j]): 628.379  #> Unique number of categories of VehicleType: 2 #> Unique number of categories of VehicleBody: 9 #>  #> Results contract-specific risk factors: #>  #> Generalized Linear Model of class 'speedglm': #>  #> Call:  speedglm(formula = FormulaGLM, data = data, family = tweedie(var.power = p,      link.power = 0), weights = data$wijkt, model = T, y = T,      fitted = T)  #>  #> Coefficients: #>  ------------------------------------------------------------------  #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  5.63582    0.08857 63.6304  0.00000 *** #> areaB        0.04804    0.13070  0.3676  0.71321     #> areaC        0.07686    0.11758  0.6537  0.51333     #> areaD       -0.18602    0.15779 -1.1789  0.23844     #> areaE        0.13070    0.16694  0.7829  0.43370     #> areaF        0.46429    0.18616  2.4941  0.01263 *   #>  #> -------------------------------------------------------------------  #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  #>  #> --- #> null df: 67565; null deviance: 3314186; #> residuals df: 67560; residuals deviance: 3298572; #> # obs.: 67566; # non-zero weighted obs.: 67566; #> AIC: NA; log Likelihood: ; #> RSS: 66083459; dispersion: 978.1447; iterations: 7; #> rank: 6; max tolerance: 1.84e-15; convergence: TRUE. fixef(fit) #> (Intercept)       areaB       areaC       areaD       areaE       areaF  #>  5.63581573  0.04803789  0.07686029 -0.18601585  0.13069527  0.46428870 ranef(fit) #> $sector #>         VehicleType        Uj #> 1:   Common vehicle 0.9563139 #> 2: Uncommon vehicle 1.0514319 #>  #> $group #>         VehicleType VehicleBody       Ujk #> 1:   Common vehicle       HBACK 1.0249732 #> 2:   Common vehicle       SEDAN 0.9526347 #> 3:   Common vehicle         UTE 0.9970046 #> 4: Uncommon vehicle       COUPE 1.0232527 #> 5: Uncommon vehicle       HDTOP 1.0064355 #> 6: Uncommon vehicle       MIBUS 1.0041799 #> 7: Uncommon vehicle       PANVN 1.0023171 #> 8: Uncommon vehicle       STNWG 0.9833459 #> 9: Uncommon vehicle       TRUCK 1.0076538 head(fitted(fit)) #>        1        2        3        4        5        6  #> 296.6857 274.7367 304.5521 240.6055 296.6857 320.2954 predict(fit, newdata = dataCar[1:2, ], type = \"response\") #>        1        2  #> 296.6857 274.7367 ggPlots = plotRE(fit, plot = FALSE)"},{"path":"https://bavodc.github.io/actuaRE/articles/actuaRE.html","id":"mixed-models","dir":"Articles","previous_headings":"Handling hierarchically multi-level factors using random effects models > Just the code please","what":"Mixed models","title":"Introduction to actuaRE","text":"Alternatively, can rely mixed models framework (Molenberghs Verbeke 2005) estimate model parameters. , can use function estimate Tweedie generalized linear mixed model. Fitting model, however, takes quite time. can speed fitting process providing initial estimates exactly tweedieGLMM function ! Nonetheless, even initial estimates fitting process take time (approximately 5 minutes using Windows 10 intel i7 32 gigabytes RAM).","code":"fitGLMM = tweedieGLMM(Y ~ area + (1 | VehicleType / VehicleBody), dataCar, weights = w, verbose = TRUE)"},{"path":"https://bavodc.github.io/actuaRE/articles/actuaRE.html","id":"balance-property","dir":"Articles","previous_headings":"Handling hierarchically multi-level factors using random effects models > Just the code please","what":"Balance property","title":"Introduction to actuaRE","text":"insurance applications, crucial models provide us reasonable premium volume portfolio level. Hereto, examine balance property [Bühlmann Gisler (2006)](Wüthrich 2020) training set. , \\[\\begin{equation}     \\begin{aligned}         \\sum_{, j, k, t} w_{ijkt} \\ Y_{ijkt} &= \\sum_{, j, k, t} w_{ijkt} \\ \\widehat{Y}_{ijkt}\\\\     \\end{aligned} \\end{equation}\\] \\(\\) serves index tariff class. GLMs fulfill balance property use canonical link (see (Wüthrich 2020)). LMMs hence, hierarchical credibility model property also holds. Conversely, GLMMs property. regain balance property, introduce quantity \\(\\alpha\\) \\[\\begin{equation}     \\begin{aligned}         \\alpha &= \\frac{\\sum_{, j, k, t} w_{ijkt} \\ Y_{ijkt}}{\\sum_{, j, k, t} w_{ijkt} \\ \\widehat{Y}_{ijkt}}\\\\     \\end{aligned} \\end{equation}\\] quantifies deviation total predicted damage total observed damage. case log link, can use \\(\\alpha\\) update intercept \\(\\hat{\\mu} + \\log(\\alpha)\\) regain balance property. default, intercept updated fitting models using hierCredGLM, hierCredTweedie tweedieGLMM. wish update intercept, can set argument balanceProperty = FALSE. Alternatively, can use build-function BalanceProperty. can use function object slots fitted, weights y.","code":"fitnoBP  = hierCredGLM(Y ~ area + (1 | VehicleType / VehicleBody), dataCar, weights = w, balanceProperty = F) yHatnoBP = fitted(fitnoBP) w        = weights(fitnoBP, \"prior\") y        = fitnoBP$y  fitBP  = hierCredGLM(Y ~ area + (1 | VehicleType / VehicleBody), dataCar, weights = w, balanceProperty = T) yHatBP = fitted(fitBP)  sum(w * y) / sum(w * yHatnoBP) #> [1] 1.001388 sum(w * y) / sum(w * yHatBP) #> [1] 1 BalanceProperty(fitnoBP) #> Warning in BalanceProperty(fitnoBP):  #> Balance property is not satisfied. #>  #> Ratio total observed damage to total predicted damage: 1.001388 BalanceProperty(fitBP) #>  #> Balance property is satisfied."},{"path":[]},{"path":"https://bavodc.github.io/actuaRE/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Campo Bavo D.C.. Author, maintainer.","code":""},{"path":"https://bavodc.github.io/actuaRE/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Campo, B.D.C. Antonio, K. (2023). Insurance pricing hierarchically structured data: illustration workers' compensation insurance portfolio. Scandinavian Actuarial Journal, doi: 10.1080/03461238.2022.2161413 Campo, B.D.C. (2023). actuaRE package: Handling Hierarchically Structured Risk Factors using Random Effects Models. R package version 0.1.3, https://cran.r-project.org/package=actuaRE","code":"@Article{,   title = {Insurance pricing with hierarchically structured data: An illustration with a workers' compensation insurance portfolio},   author = {Bavo D.C. Campo and Katrien Antonio},   journal = {Scandinavian Actuarial Journal},   doi = {10.1080/03461238.2022.2161413},   year = {2023},   url = {https://doi.org/10.1080/03461238.2022.2161413}, } @Manual{,   title = {The actuaRE package: Handling Hierarchically Structured Risk Factors using Random Effects Models.},   author = {Bavo D.C. Campo},   year = {2023},   note = {R package version 0.1.3},   url = {https://cran.r-project.org/package=actuaRE}, }"},{"path":[]},{"path":[]},{"path":"https://bavodc.github.io/actuaRE/index.html","id":"on-current-r--300","dir":"","previous_headings":"Installation","what":"On current R (>= 3.0.0)","title":"Handling Hierarchically Structured Risk Factors using Random Effects Models","text":"Development version Github: (requires devtools >= 1.6.1, installs “master” (development) branch.) approach builds package source, .e. make compilers must installed system – see R FAQ operating system; may also need install dependencies manually. Specify build_vignettes=FALSE trouble system missing LaTeX/texi2dvi tools.","code":"library(\"devtools\"); install_github(\"BavoDC/actuaRE\", dependencies = TRUE, build_vignettes = TRUE)"},{"path":"https://bavodc.github.io/actuaRE/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Handling Hierarchically Structured Risk Factors using Random Effects Models","text":"basic functionality package explained demonstrated vignette, can access using via homepage package.","code":"vignette(\"actuaRE\")"},{"path":"https://bavodc.github.io/actuaRE/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Handling Hierarchically Structured Risk Factors using Random Effects Models","text":"use package, please cite: Campo, B.D.C. Antonio, Katrien (2023). Insurance pricing hierarchically structured data illustration workers’ compensation insurance portfolio. Scandinavian Actuarial Journal, doi: 10.1080/03461238.2022.2161413 Campo, B.D.C. (2023). actuaRE package: Handling Hierarchically Structured Risk Factors using Random Effects Models. R package version 0.1.3, https://cran.r-project.org/package=actuaRE","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/actuaRE.html","id":null,"dir":"Reference","previous_headings":"","what":"Handling Hierarchically Structured Risk Factors using Random Effects Models — actuaRE-package","title":"Handling Hierarchically Structured Risk Factors using Random Effects Models — actuaRE-package","text":"Using package, can fit random effects model using either hierarchical credibility model, combination hierarchical credibility model generalized linear model Tweedie generalized linear mixed model. See Campo, B.D.C. Antonio, K. (2023) <doi:10.1080/03461238.2022.2161413>.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/actuaRE.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Handling Hierarchically Structured Risk Factors using Random Effects Models — actuaRE-package","text":"Campo, B.D.C. Antonio, Katrien (2023). Insurance pricing hierarchically structured data illustration workers' compensation insurance portfolio. Scandinavian Actuarial Journal, doi: 10.1080/03461238.2022.2161413 Dannenburg, D. R., Kaas, R. Goovaerts, M. J. (1996). Practical actuarial credibility models. Amsterdam: IAE (Institute Actuarial Science Econometrics University Amsterdam). Jewell, W. S. (1975). use collateral data credibility theory: hierarchical model. Laxenburg: IIASA. Ohlsson, E. (2005). Simplified estimation structure parameters hierarchical credibility. Presented Zurich ASTIN Colloquium.http://www.actuaries.org/ASTIN/Colloquia/Zurich/Ohlsson.pdf Ohlsson, E. (2008). Combining generalized linear models credibility models practice. Scandinavian Actuarial Journal 2008(4), 301–314.","code":""},{"path":[]},{"path":"https://bavodc.github.io/actuaRE/reference/actuaRE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Handling Hierarchically Structured Risk Factors using Random Effects Models — actuaRE-package","text":"","code":"# \\donttest{   library(actuaRE)   # Vignette of the package   vignette(package = \"actuaRE\") #> no vignettes found    # Load data   data(hachemeisterLong)   data(dataCar)    # Hierarchical credibility model of Jewell   fit = hierCredibility(ratio, weight, cohort, state, hachemeisterLong)    # Combination of the hierarchical credibility model with a GLM (Ohlsson, 2008)   fit = hierCredGLM(Y ~ area + (1 | VehicleType / VehicleBody), dataCar, weights = w,   p = 1.7) # }"},{"path":"https://bavodc.github.io/actuaRE/reference/adjustIntercept.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust the intercept to regain the balance property — adjustIntercept","title":"Adjust the intercept to regain the balance property — adjustIntercept","text":"function updates intercept term model fit balance property satisfied.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/adjustIntercept.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust the intercept to regain the balance property — adjustIntercept","text":"","code":"adjustIntercept(obj, data)"},{"path":"https://bavodc.github.io/actuaRE/reference/adjustIntercept.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust the intercept to regain the balance property — adjustIntercept","text":"obj object type glm, speedglm, cpglm cpglmm containing model fit. data data.frame data.table object used fit model.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/adjustIntercept.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust the intercept to regain the balance property — adjustIntercept","text":"object adjusted (fixed effects) coefficients.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/adjustIntercept.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Adjust the intercept to regain the balance property — adjustIntercept","text":"Campo, B.D.C. Antonio, Katrien (2023). Insurance pricing hierarchically structured data illustration workers' compensation insurance portfolio. Scandinavian Actuarial Journal, doi: 10.1080/03461238.2022.2161413 Wüthrich, M. V. (2020). Bias regularization neural network models general insurance pricing. European actuarial journal 10(1), 179–202.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/adjustIntercept.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjust the intercept to regain the balance property — adjustIntercept","text":"","code":"library(statmod) datas  = dataCar[1:1e3, ] Fit    = glm(Y ~ area + gender, data = datas, weights = datas$w, family = tweedie(1.75, 0), model = TRUE, control = glm.control(epsilon = 1e-4, maxit = 5e2)) w      = weights(Fit, \"prior\") y      = Fit$y sum(w * y) == sum(w * fitted(Fit)) #> [1] FALSE adjFit = adjustIntercept(Fit, datas) coef(adjFit) #> (Intercept)       areaB       areaC       areaD       areaE       areaF  #>   5.5386226  -0.1882927  -0.1542479  -2.4340072  -1.6156363   0.8378340  #>     genderM  #>   0.2379400  sum(w * y) == sum(w * fitted(adjFit)) #> [1] TRUE"},{"path":"https://bavodc.github.io/actuaRE/reference/BalanceProperty.html","id":null,"dir":"Reference","previous_headings":"","what":"Balance property — BalanceProperty","title":"Balance property — BalanceProperty","text":"Function assess whether balance property holds","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/BalanceProperty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Balance property — BalanceProperty","text":"","code":"BalanceProperty(obj)"},{"path":"https://bavodc.github.io/actuaRE/reference/BalanceProperty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Balance property — BalanceProperty","text":"obj object containing model fit","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/BalanceProperty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Balance property — BalanceProperty","text":"list slots call (original call), BalanceProperty (logical indicating whether balance property satisfied) Alpha (Ratio total observed damage total predicted damage).","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/BalanceProperty.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Balance property — BalanceProperty","text":"Campo, B.D.C. Antonio, Katrien (2023). Insurance pricing hierarchically structured data illustration workers' compensation insurance portfolio. Scandinavian Actuarial Journal, doi: 10.1080/03461238.2022.2161413 Wüthrich, M. V. (2020). Bias regularization neural network models general insurance pricing. European actuarial journal 10(1), 179–202.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/BalanceProperty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Balance property — BalanceProperty","text":"","code":"# \\donttest{ fit = hierCredGLM(Y ~ area + (1 | VehicleType / VehicleBody), dataCar, weights = w,  p = 1.75, epsilon = 1e-6) #> Warning: Maximum number of iterations reached without convergence BalanceProperty(fit) #>  #> Balance property is satisfied. #>  # }"},{"path":"https://bavodc.github.io/actuaRE/reference/dataCar.html","id":null,"dir":"Reference","previous_headings":"","what":"data Car — dataCar","title":"data Car — dataCar","text":"data set taken dataCar data set insuranceData package slightly adjusted (see code examples reproducing data set).   original data set based  one-year vehicle insurance policies taken    2004 2005. 67566 policies,  4589 (6.8%) least one claim.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/dataCar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data Car — dataCar","text":"","code":"data(dataCar)"},{"path":"https://bavodc.github.io/actuaRE/reference/dataCar.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"data Car — dataCar","text":"data frame 67566 observations following 15 variables. veh_value vehicle value, $10,000s exposure 0-1 clm occurrence claim (0 = , 1 = yes) numclaims number claims claimcst0 claim amount (0 claim) veh_body vehicle body, coded BUS CONVT COUPE HBACK HDTOP MCARA MIBUS PANVN RDSTR SEDAN STNWG TRUCK UTE veh_age 1 (youngest), 2, 3, 4 gender factor levels F M area factor levels B C D E F agecat 1 (youngest), 2, 3, 4, 5, 6 X_OBSTAT_ factor levels 01101    0    0    0 Y loss ratio, defined number claims divided exposure w exposure, identical exposure VehicleType type vehicle, common vehicle uncommon vehicle VehicleBody vehicle body, identical veh_body","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/dataCar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"data Car — dataCar","text":"Adjusted data set dataCar, removed claims loss ratio larger 1 000 000. addition, summed exposure per vehicle body removed summed exposure less 100. Hereby, ensure sufficient exposure vehicle body category.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/dataCar.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"data Car — dataCar","text":"http://www.acst.mq.edu.au/GLMsforInsuranceData","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/dataCar.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"data Car — dataCar","text":"De Jong P., Heller G.Z. (2008), Generalized linear models insurance data,   Cambridge University Press","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/dataCar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"data Car — dataCar","text":"","code":"# How to construct the data set using the original dataCar data set from the insuranceData package   library(plyr) #>  #> Attaching package: 'plyr' #> The following object is masked from 'package:actuaRE': #>  #>     is.formula   library(magrittr)   data(\"dataCar\", package = \"insuranceData\")   dataCar$Y = with(dataCar, claimcst0 / exposure)   dataCar$w = dataCar$exposure   dataCar   = dataCar[which(dataCar$Y < 1e6), ]   Yw = ddply(dataCar, .(veh_body), function(x) c(crossprod(x$Y, x$w) / sum(x$w), sum(x$w)))   dataCar = dataCar[!dataCar$veh_body %in% Yw[Yw$V2 < 1e2, \"veh_body\"], ]   dataCar$veh_body %<>% droplevels()   dataCar$VehicleType = sapply(tolower(dataCar$veh_body), function(x) {     if(x %in% c(\"sedan\", \"ute\", \"hback\"))       \"Common vehicle\"     else       \"Uncommon vehicle\"   })   dataCar$VehicleBody = dataCar$veh_body"},{"path":"https://bavodc.github.io/actuaRE/reference/dot-addREs.html","id":null,"dir":"Reference","previous_headings":"","what":"Add random effects to the data frame — .addREs","title":"Add random effects to the data frame — .addREs","text":"Internal function","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/dot-addREs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add random effects to the data frame — .addREs","text":"","code":".addREs(obj, newdata)"},{"path":"https://bavodc.github.io/actuaRE/reference/dot-addREs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add random effects to the data frame — .addREs","text":"obj object model fit newdata object coercible data.table.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/findbars.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine random-effects expressions from a formula — findbars","title":"Determine random-effects expressions from a formula — findbars","text":"right hand side formula mixed-effects   model, determine pairs expressions   separated vertical bar operator.  Also expand   slash operator grouping factor expressions expand   terms double vertical bar operator separate,   independent random effect terms.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/findbars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine random-effects expressions from a formula — findbars","text":"","code":"findbars(term)"},{"path":"https://bavodc.github.io/actuaRE/reference/findbars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine random-effects expressions from a formula — findbars","text":"term mixed-model formula","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/findbars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine random-effects expressions from a formula — findbars","text":"pairs expressions separated vertical bars","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/findbars.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Determine random-effects expressions from a formula — findbars","text":"function called recursively individual terms   model, argument called   term name like form, indicating   formula.","code":""},{"path":[]},{"path":"https://bavodc.github.io/actuaRE/reference/findbars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine random-effects expressions from a formula — findbars","text":"","code":"findbars(f1 <- Reaction ~ Days + (Days | Subject)) #> [[1]] #> Days | Subject #>    ## => list( Days | Subject )   ## These two are equivalent:% tests in ../inst/tests/test-doubleVertNotation.R   findbars(y ~ Days + (1 | Subject) + (0 + Days | Subject)) #> [[1]] #> 1 | Subject #>  #> [[2]] #> 0 + Days | Subject #>    findbars(y ~ Days + (Days || Subject)) #> [[1]] #> 1 | Subject #>  #> [[2]] #> 0 + Days | Subject #>    ## => list of length 2:  list ( 1 | Subject ,  0 + Days | Subject)   findbars(~ 1 + (1 | batch / cask)) #> [[1]] #> 1 | cask:batch #>  #> [[2]] #> 1 | batch #>    ## => list of length 2:  list ( 1 | cask:batch ,  1 | batch)   # \\dontshow{     stopifnot(identical(findbars(f1),                         list(quote(Days | Subject))))   # }"},{"path":"https://bavodc.github.io/actuaRE/reference/fitted.hierCredibility.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Model Fitted Values — fitted.hierCredibility","title":"Extract Model Fitted Values — fitted.hierCredibility","text":"fitted generic function extracts fitted values   objects returned modeling functions.  fitted.values   alias . object classes returned model fitting functions   provide fitted method.  (Note generic   fitted fitted.values.) Methods can make use napredict methods compensate   omission missing values.  default nls   methods .","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/fitted.hierCredibility.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Model Fitted Values — fitted.hierCredibility","text":"","code":"# S3 method for hierCredibility fitted(object, ...)"},{"path":"https://bavodc.github.io/actuaRE/reference/fitted.hierCredibility.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Model Fitted Values — fitted.hierCredibility","text":"object object extraction model fitted values     meaningful. ... arguments.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/fitted.hierCredibility.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Model Fitted Values — fitted.hierCredibility","text":"Fitted values extracted object object.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/fitted.hierCredibility.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Extract Model Fitted Values — fitted.hierCredibility","text":"Chambers, J. M. Hastie, T. J. (1992)   Statistical Models S.   Wadsworth & Brooks/Cole.","code":""},{"path":[]},{"path":"https://bavodc.github.io/actuaRE/reference/fixef-actuaRE.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the fixed-effects estimates from a fitted random effects model — fixef-actuaRE","title":"Extract the fixed-effects estimates from a fitted random effects model — fixef-actuaRE","text":"generic function extract fixed effects (.e. company-specific effects) estimates fitted random effects model.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/fixef-actuaRE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the fixed-effects estimates from a fitted random effects model — fixef-actuaRE","text":"","code":"# S3 method for hierCredGLM fixef(object, ...)  # S3 method for hierCredTweedie fixef(object, ...)"},{"path":"https://bavodc.github.io/actuaRE/reference/fixef-actuaRE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the fixed-effects estimates from a fitted random effects model — fixef-actuaRE","text":"object object type hierCredGLM hierCredTweedie ... ignored.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/fixef-actuaRE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the fixed-effects estimates from a fitted random effects model — fixef-actuaRE","text":"named, numeric vector fixed-effects estimates.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/fixef-actuaRE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the fixed-effects estimates from a fitted random effects model — fixef-actuaRE","text":"","code":"# \\donttest{ fit = hierCredGLM(Y ~ area + (1 | VehicleType / VehicleBody), dataCar, weights = w, p = 1.75, epsilon = 1e-6) #> Error in hierCredGLM(Y ~ area + (1 | VehicleType/VehicleBody), dataCar,     weights = w, p = 1.75, epsilon = 1e-06): Did not find the variables in the formula in the dataframe fixef(fit) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'object' in selecting a method for function 'fixef': object 'fit' not found # }"},{"path":"https://bavodc.github.io/actuaRE/reference/fixef.hierCredGLM.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the fixed-effects estimates from a fitted random effects model — fixef.hierCredGLM","title":"Extract the fixed-effects estimates from a fitted random effects model — fixef.hierCredGLM","text":"Extract fixed-effects estimates fitted random effects model","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/fixef.hierCredGLM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the fixed-effects estimates from a fitted random effects model — fixef.hierCredGLM","text":"","code":"# S3 method for hierCredGLM fixef(object, ...)  # S3 method for hierCredTweedie fixef(object, ...)"},{"path":"https://bavodc.github.io/actuaRE/reference/fixef.hierCredGLM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the fixed-effects estimates from a fitted random effects model — fixef.hierCredGLM","text":"object object type hierCredGLM hierCredTweedie ... ignored.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/fixef.hierCredGLM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the fixed-effects estimates from a fitted random effects model — fixef.hierCredGLM","text":"named, numeric vector fixed-effects estimates.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/fixef.hierCredGLM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the fixed-effects estimates from a fitted random effects model — fixef.hierCredGLM","text":"","code":"if (FALSE) { fit = hierCredGLM(Y ~ area + (1 | VehicleType / VehicleBody), dataCar, weights = w, p = 1.75, epsilon = 1e-6) fixef(fit) }"},{"path":"https://bavodc.github.io/actuaRE/reference/fixef.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract fixed-effects estimates — fixef","title":"Extract fixed-effects estimates — fixef","text":"Extract fixed-effects estimates","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/fixef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract fixed-effects estimates — fixef","text":"object fitted model object fixed     effects estimates can extracted.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/fixef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract fixed-effects estimates — fixef","text":"named, numeric vector fixed-effects estimates.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/fixef.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract fixed-effects estimates — fixef","text":"Extract estimates fixed-effects parameters   fitted model.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/fixef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract fixed-effects estimates — fixef","text":"","code":"# \\donttest{   library(lme4) #>  #> Attaching package: 'lme4' #> The following objects are masked from 'package:actuaRE': #>  #>     fixef, ranef #> The following objects are masked from 'package:cplm': #>  #>     VarCorr, fixef, ranef   fixef(lmer(Reaction ~ Days + (1|Subject) + (0+Days|Subject), sleepstudy)) #> (Intercept)        Days  #>   251.40510    10.46729    fm2 <- lmer(Reaction ~ Days + Days2 + (1|Subject),               data=transform(sleepstudy,Days2=Days)) #> fixed-effect model matrix is rank deficient so dropping 1 column / coefficient   fixef(fm2,add.dropped=TRUE) #> (Intercept)        Days       Days2  #>   251.40510    10.46729          NA    ## first two parameters are the same ...   stopifnot(all.equal(fixef(fm2,add.dropped=TRUE)[1:2],                       fixef(fm2)))   # }"},{"path":"https://bavodc.github.io/actuaRE/reference/hachemeisterLong.html","id":null,"dir":"Reference","previous_headings":"","what":"Hachemeister Data Set — hachemeisterLong","title":"Hachemeister Data Set — hachemeisterLong","text":"Long format Hachemeister (1975) data set giving average claim amounts private passenger bodily injury insurance. data five U.S. states 12 quarters July 1970 June 1973   corresponding number claims. obtain hierarchical structure, created artificial variable cohort. , created hierarchical multi-level factor, cohort   first hierarchical level state second hierarchical level, nested within cohort.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/hachemeisterLong.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hachemeister Data Set — hachemeisterLong","text":"","code":"hachemeisterLong"},{"path":"https://bavodc.github.io/actuaRE/reference/hachemeisterLong.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Hachemeister Data Set — hachemeisterLong","text":"data.frame 60 rows following 5 columns: cohort artificially created variable; state state number; time time variable (quarter observation); ratio average claim amount; weight corresponding number claims.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/hachemeisterLong.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Hachemeister Data Set — hachemeisterLong","text":"Hachemeister, C. . (1975), Credibility regression models application trend, Proceedings Berkeley Actuarial Research Conference Credibility, Academic Press.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredGLM-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"Class \"hierCredGLM\" fitted random effects models estimated Ohlsson's GLMC algorithm","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredGLM-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class ","text":"","code":"# S3 method for hierCredGLM print(x, ...)  # S3 method for hierCredGLM summary(object, ...)  # S3 method for hierCredGLM fitted(object, ...)"},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredGLM-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class ","text":"x object class hierCredGLM ... currently ignored. object object class hierCredGLM","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredGLM-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class ","text":"function hierCredGLM returns object class hierCredGLM, following slots: call matched call HierarchicalResults results hierarchical credibility model. fitGLM results fitting GLM part. iter total number iterations. Converged logical indicating whether algorithm converged. LevelsCov object summarizes unique levels contract-specific covariates. fitted.values fitted mean values, resulting model fit. prior.weights weights (exposure) initially supplied. y requested, response vector. Default TRUE.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredGLM-class.html","id":"s-methods","dir":"Reference","previous_headings":"","what":"S3 methods","title":"Class ","text":"print: Prints call, estimated variance parameters, unique number categories   hierarchical MLF output GLM part. ... argument currently ignored. Returns   invisible copy original object. summary: addition output print.hierCredGLM function, summary function   also prints random effect estimates summary GLM (see summary.speedglm). Returns   invisible copy original object. fitted: Returns fitted values.","code":""},{"path":[]},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredGLM.html","id":null,"dir":"Reference","previous_headings":"","what":"Combining the hierarchical credibility model with a GLM (Ohlsson, 2008) — hierCredGLM","title":"Combining the hierarchical credibility model with a GLM (Ohlsson, 2008) — hierCredGLM","text":"Fit random effects model using Ohlsson's methodology. function explicitly specify power parameter p. See hierCredTweedie also want estimate p.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredGLM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combining the hierarchical credibility model with a GLM (Ohlsson, 2008) — hierCredGLM","text":"","code":"hierCredGLM(   formula,   data,   weights,   p = 1.5,   link.power = 0,   muHatGLM = TRUE,   epsilon = 1e-04,   maxiter = 500,   maxiterGLM = 500,   verbose = FALSE,   returnData = TRUE,   balanceProperty = TRUE,   y = TRUE,   ... )"},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredGLM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combining the hierarchical credibility model with a GLM (Ohlsson, 2008) — hierCredGLM","text":"formula object type formula specifies model fitted. Syntax lmer glmer. example, Yijkt ~ x1 + x2 + (1 | Industry / Branch). data object coercible .data.table, containing variables model. weights variable name exposure weight. p value power parameter Tweedie distribution, passed tweedie. Default 1.5. link.power index power link function, passed tweedie. link.power = 0 produces log-link. Defaults canonical link, 1 - p. muHatGLM indicates estimate used algorithm intercept term. Default TRUE, used intercept estimated GLM. FALSE, estimate hierarchical credibility model used. epsilon positive convergence tolerance \\(\\epsilon\\); iterations converge 7 \\(||\\theta[k] - \\theta[k - 1]||^2[[2]]/||\\theta[k - 1]||^2[[2]] < \\epsilon\\). , \\(\\theta[k]\\) parameter vector \\(k^{th}\\) iteration. maxiter maximum number iterations. maxiterGLM maximum number iterations fitting GLM part. Passed speedglm. verbose logical indicating output produced algorithm. returnData logical indicating input data returned. balanceProperty logical indicating balance property satisfied. y logical indicating whether response vector returned component returned value. ... arguments passed speedglm","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredGLM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combining the hierarchical credibility model with a GLM (Ohlsson, 2008) — hierCredGLM","text":"object type hierCredGLM following slots: call matched call HierarchicalResults results hierarchical credibility model. fitGLM results fitting GLM part. iter total number iterations. Converged logical indicating whether algorithm converged. LevelsCov object summarizes unique levels contract-specific covariates. fitted.values fitted mean values, resulting model fit. prior.weights weights (exposure) initially supplied. y requested, response vector. Default TRUE.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredGLM.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Combining the hierarchical credibility model with a GLM (Ohlsson, 2008) — hierCredGLM","text":"Campo, B.D.C. Antonio, Katrien (2023). Insurance pricing hierarchically structured data illustration workers' compensation insurance portfolio. Scandinavian Actuarial Journal, doi: 10.1080/03461238.2022.2161413 Ohlsson, E. (2008). Combining generalized linear models credibility models practice. Scandinavian Actuarial Journal 2008(4), 301–314.","code":""},{"path":[]},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredGLM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combining the hierarchical credibility model with a GLM (Ohlsson, 2008) — hierCredGLM","text":"","code":"# \\donttest{ data(\"dataCar\") fit = hierCredGLM(Y ~ area + (1 | VehicleType / VehicleBody), dataCar, weights = w, p = 1.7) fit #> Call: #> hierCredGLM(formula = Y ~ area + (1 | VehicleType/VehicleBody),  #>     data = dataCar, weights = w, p = 1.7) #>  #>  #> Combination of the hierarchical credibility model with a GLM #>  #> Estimated variance parameters: #>   Var(V[jk]): 349.7505  #>   Var(V[j]): 629.4394  #> Unique number of categories of VehicleType: 2 #> Unique number of categories of VehicleBody: 9 #>  #> Results contract-specific risk factors: #>  #> Generalized Linear Model of class 'speedglm': #>  #> Call:  speedglm(formula = FormulaGLM, data = data, family = tweedie(var.power = p,      link.power = 0), weights = data$wijkt, model = T, y = T,      fitted = T)  #>  #> Coefficients: #> (Intercept)        areaB        areaC        areaD        areaE        areaF   #>     5.63463      0.04712      0.07701     -0.18517      0.13033      0.46341   #>  summary(fit) #> Call: #> hierCredGLM(formula = Y ~ area + (1 | VehicleType/VehicleBody),  #>     data = dataCar, weights = w, p = 1.7) #>  #>  #> Combination of the hierarchical credibility model with a GLM #>  #> Estimated variance parameters: #>   Individual contracts: 4290291  #>   Var(V[jk]): 349.7505  #>   Var(V[j]): 629.4394  #> Unique number of categories of VehicleType: 2 #> Unique number of categories of VehicleBody: 9 #>  #> Results contract-specific risk factors: #>  #> Generalized Linear Model of class 'speedglm': #>  #> Call:  speedglm(formula = FormulaGLM, data = data, family = tweedie(var.power = p,      link.power = 0), weights = data$wijkt, model = T, y = T,      fitted = T)  #>  #> Coefficients: #>  ------------------------------------------------------------------  #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  5.63463    0.08794 64.0746   0.0000 *** #> areaB        0.04712    0.13009  0.3622   0.7172     #> areaC        0.07701    0.11713  0.6575   0.5108     #> areaD       -0.18517    0.15477 -1.1964   0.2315     #> areaE        0.13033    0.16747  0.7782   0.4364     #> areaF        0.46341    0.19218  2.4113   0.0159 *   #>  #> -------------------------------------------------------------------  #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  #>  #> --- #> null df: 67565; null deviance: 1405114; #> residuals df: 67560; residuals deviance: 1400154; #> # obs.: 67566; # non-zero weighted obs.: 67566; #> AIC: NA; log Likelihood: ; #> RSS: 21226516; dispersion: 314.1876; iterations: 11; #> rank: 6; max tolerance: 5.91e-11; convergence: TRUE. ranef(fit) #> $sector #>         VehicleType        Uj #> 1:   Common vehicle 0.9573893 #> 2: Uncommon vehicle 1.0525247 #>  #> $group #>         VehicleType VehicleBody       Ujk #> 1:   Common vehicle       HBACK 1.0252939 #> 2:   Common vehicle       SEDAN 0.9528740 #> 3:   Common vehicle         UTE 0.9971015 #> 4: Uncommon vehicle       COUPE 1.0233226 #> 5: Uncommon vehicle       HDTOP 1.0065053 #> 6: Uncommon vehicle       MIBUS 1.0042123 #> 7: Uncommon vehicle       PANVN 1.0023449 #> 8: Uncommon vehicle       STNWG 0.9836377 #> 9: Uncommon vehicle       TRUCK 1.0077063 #>  fixef(fit) #> (Intercept)       areaB       areaC       areaD       areaE       areaF  #>  5.63463077  0.04712428  0.07701333 -0.18517287  0.13033063  0.46341174  # }"},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredibility-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"Class \"hierCredibility\" fitted hierarchical credibility models","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredibility-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class ","text":"","code":"# S3 method for hierCredibility print(x, ...)  # S3 method for hierCredibility summary(object, ...)  # S3 method for hierCredibility fitted(object, ...)"},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredibility-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class ","text":"x object class hierCredibility ... currently ignored. object object class hierCredibility","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredibility-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class ","text":"function hierCredibility returns object class hierCredibility, following slots: call matched call type Whether additive multiplicative hierarchical credibility model used. Variances estimated variance components. s2 estimated variance individual contracts,  tausq estimate \\(Var(V[j])\\) nusq estimate \\(Var(V[jk])\\). Means estimated averages portfolio level (intercept term \\(\\mu\\)), first hierarchical level (\\(bar(Y)[\\%.\\% j \\%.\\% \\%.\\%]^z\\)) second hierarchical level (\\(bar(Y)[\\%.\\% jk \\%.\\%]\\)). Weights weights first hierarchical level \\(z[j\\%.\\%]\\) second hierarchical level \\(w[\\%.\\%jk\\%.\\%]\\). Credibility credibility weights first hierarchical level \\(q[j\\%.\\%]\\) second hierarchical level \\(z[jk]\\). Premiums overall expectation \\(widehat(\\mu)\\), sector expectation \\(widehat(V)[j]\\) group expectation \\(widehat(V)[jk]\\). Relativity estimated random effects \\(widehat(U)[j]\\) \\(widehat(U)[jk]\\) sector group, respectively. RawResults Objects type data.table intermediate results. fitted.values fitted mean values, resulting model fit.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredibility-class.html","id":"s-methods","dir":"Reference","previous_headings":"","what":"S3 methods","title":"Class ","text":"print: Prints call, estimated variance parameters unique number categories   hierarchical MLF. ... argument currently ignored. Returns invisible copy original   object. summary: addition output print.hierCredibility function, summary function   prints random effect estimates well. Returns invisible copy original object. fitted: Returns fitted values.","code":""},{"path":[]},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredibility.html","id":null,"dir":"Reference","previous_headings":"","what":"Hierarchical credibility model of Jewell — hierCredibility","title":"Hierarchical credibility model of Jewell — hierCredibility","text":"Fit random effects model, without contract-specific risk factors,  using hierarchical credibility model Jewell.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredibility.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hierarchical credibility model of Jewell — hierCredibility","text":"","code":"hierCredibility(   Yijkt,   wijkt,   sector,   group,   data,   muHat = NULL,   type = c(\"additive\", \"multiplicative\"),   returnData = FALSE )"},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredibility.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hierarchical credibility model of Jewell — hierCredibility","text":"Yijkt variable name response variable (loss cost within actuarial applications). wijkt variable name exposure weight. sector variable name first hierarchical level. group variable name second hierarchical level nested within first hierarchical level. data object coercible .data.table, containing variables model. muHat estimate intercept term. Default NULL case, estimator given Ohlsson (2005) used. type specifies whether additive (Dannenburg, 1996) multiplicative (Ohlsson, 2005) formulation hierarchical credibility model used. Default additive. returnData Logical, indicates whether data object returned. Default FALSE.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredibility.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hierarchical credibility model of Jewell — hierCredibility","text":"object type hierCredibility following slots: call matched call type Whether additive multiplicative hierarchical credibility model used. Variances estimated variance components. s2 estimated variance individual contracts,  tausq estimate \\(Var(V[j])\\) nusq estimate \\(Var(V[jk])\\). Means estimated averages portfolio level (intercept term \\(\\mu\\)), first hierarchical level (\\(bar(Y)[\\%.\\% j \\%.\\% \\%.\\%]^z\\)) second hierarchical level (\\(bar(Y)[\\%.\\% jk \\%.\\%]\\)). Weights weights first hierarchical level \\(z[j\\%.\\%]\\) second hierarchical level \\(w[\\%.\\%jk\\%.\\%]\\). Credibility credibility weights first hierarchical level \\(q[j\\%.\\%]\\) second hierarchical level \\(z[jk]\\). Premiums overall expectation \\(widehat(\\mu)\\), sector expectation \\(widehat(V)[j]\\) group expectation \\(widehat(V)[jk]\\). Relativity estimated random effects \\(widehat(U)[j]\\) \\(widehat(U)[jk]\\) sector group, respectively. RawResults Objects type data.table intermediate results. fitted.values fitted mean values, resulting model fit.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredibility.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Hierarchical credibility model of Jewell — hierCredibility","text":"Campo, B.D.C. Antonio, Katrien (2023). Insurance pricing hierarchically structured data illustration workers' compensation insurance portfolio. Scandinavian Actuarial Journal, doi: 10.1080/03461238.2022.2161413 Dannenburg, D. R., Kaas, R. Goovaerts, M. J. (1996). Practical actuarial credibility models. Amsterdam: IAE (Institute Actuarial Science Econometrics University Amsterdam). Jewell, W. S. (1975). use collateral data credibility theory: hierarchical model. Laxenburg: IIASA. Ohlsson, E. (2005). Simplified estimation structure parameters hierarchical credibility. Presented Zurich ASTIN Colloquium.http://www.actuaries.org/ASTIN/Colloquia/Zurich/Ohlsson.pdf","code":""},{"path":[]},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredibility.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hierarchical credibility model of Jewell — hierCredibility","text":"","code":"library(actuar) #>  #> Attaching package: 'actuar' #> The following objects are masked from 'package:statmod': #>  #>     dinvgauss, pinvgauss, qinvgauss, rinvgauss #> The following objects are masked from 'package:stats': #>  #>     sd, var #> The following object is masked from 'package:grDevices': #>  #>     cm library(actuaRE) data(\"hachemeister\", package = \"actuar\") Df = as.data.frame(hachemeister) X  = as.data.frame(cbind(cohort = c(1, 2, 1, 2, 2), hachemeister)) Df = reshape(X, idvar = \"state\", varying = list(paste0(\"ratio.\", 1:12),  paste0(\"weight.\", 1:12)), direction = \"long\") fitActuar  = cm(~ cohort + cohort:state, data = X, ratios = ratio.1:ratio.12, weights = weight.1:weight.12, method = \"Ohlsson\") fitActuaRE = hierCredibility(ratio.1, weight.1, cohort, state, Df) summary(fitActuar) #> Call: #> cm(formula = ~cohort + cohort:state, data = X, ratios = ratio.1:ratio.12,  #>     weights = weight.1:weight.12, method = \"Ohlsson\") #>  #> Structure Parameters Estimators #>  #>   Collective premium: 1745.055  #>  #>   Between cohort variance: 88476.11  #>   Within cohort/Between state variance: 11628.45 #>   Within state variance: 139120026  #>  #> Detailed premiums #>  #>   Level: cohort  #>     cohort Indiv. mean Weight   Cred. factor Cred. premium #>     1      1965.436    1.427755 0.9157058    1946.859      #>     2      1527.011    1.633248 0.9255216    1543.250      #>  #>   Level: state  #>     cohort state Indiv. mean Weight Cred. factor Cred. premium #>     1      1     2060.921    100155 0.8932938    2048.750      #>     2      2     1511.224     19895 0.6244749    1523.251      #>     1      3     1805.843     13735 0.5344614    1871.491      #>     2      4     1352.976      4152 0.2576359    1494.229      #>     2      5     1599.829     36110 0.7511373    1585.748      #>  summary(fitActuaRE) #> Call: #> hierCredibility(Yijkt = ratio.1, wijkt = weight.1, sector = cohort,  #>     group = state, data = Df) #>  #>  #> Additive hierarchical credibility model #>  #> Estimated variance parameters: #>   Individual contracts: 139120026  #>   Var(V[jk]): 11628.45  #>   Var(V[j]): 88476.11  #> Unique number of categories of cohort: 2 #> Unique number of categories of state: 5  #>  #> Estimates at the cohort level: #>  #>    cohort       zj Yjz_BarTilde        qj       Vj        Uj #> 1:      1 1.427755     1965.436 0.9157058 1946.859  201.8044 #> 2:      2 1.633248     1527.011 0.9255216 1543.250 -201.8044 #>  #> Estimates at the state level: #>  #>    cohort state    wjk Yjk_BarTilde       zjk      Vjk       Ujk #> 1:      1     1 100155     2060.921 0.8932938 2048.750 101.89107 #> 2:      1     3  13735     1805.843 0.5344614 1871.491 -75.36785 #> 3:      2     2  19895     1511.224 0.6244749 1523.251 -19.99963 #> 4:      2     4   4152     1352.976 0.2576359 1494.229 -49.02155 #> 5:      2     5  36110     1599.829 0.7511373 1585.748  42.49796"},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredTweedie-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"Class \"hierCredTweedie\" fitted random effects models estimated Ohlsson's GLMC algorithm","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredTweedie-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class ","text":"","code":"# S3 method for hierCredTweedie print(x, ...)  # S3 method for hierCredTweedie summary(object, ...)  # S3 method for hierCredTweedie fitted(object, ...)"},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredTweedie-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class ","text":"x object class hierCredTweedie ... currently ignored. object object class hierCredTweedie","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredTweedie-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class ","text":"function hierCredGLM returns object class hierCredGLM, following slots: call matched call HierarchicalResults results hierarchical credibility model. fitGLM results fitting GLM part. iter total number iterations. Converged logical indicating whether algorithm converged. LevelsCov object summarizes unique levels contract-specific covariates. fitted.values fitted mean values, resulting model fit. prior.weights weights (exposure) initially supplied. y requested, response vector. Default TRUE.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredTweedie-class.html","id":"s-methods","dir":"Reference","previous_headings":"","what":"S3 methods","title":"Class ","text":"print: Prints call, estimated variance parameters, unique number categories   hierarchical MLF output GLM part. ... argument currently ignored. Returns   invisible copy original object. summary: addition output print.hierCredTweedie function, summary function   also prints random effect estimates summary GLM (see summary.speedglm). Returns    invisible copy original object. fitted: Returns fitted values.","code":""},{"path":[]},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredTweedie.html","id":null,"dir":"Reference","previous_headings":"","what":"Combining the hierarchical credibility model with a GLM (Ohlsson, 2008) — hierCredTweedie","title":"Combining the hierarchical credibility model with a GLM (Ohlsson, 2008) — hierCredTweedie","text":"Fit random effects model using Ohlsson's methodology. function estimate power parameter p. See hierCredGLM want fix p.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredTweedie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combining the hierarchical credibility model with a GLM (Ohlsson, 2008) — hierCredTweedie","text":"","code":"hierCredTweedie(   formula,   data,   weights,   muHatGLM = TRUE,   epsilon = 1e-04,   maxiter = 500,   verbose = FALSE,   returnData = TRUE,   cpglmControl = list(bound.p = c(1.01, 1.99)),   balanceProperty = TRUE,   optimizer = \"bobyqa\",   y = TRUE,   ... )"},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredTweedie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combining the hierarchical credibility model with a GLM (Ohlsson, 2008) — hierCredTweedie","text":"formula object type formula specifies model fitted. Syntax lmer glmer. example, Yijkt ~ x1 + x2 + (1 | Industry / Branch). data object coercible .data.table, containing variables model. weights variable name exposure weight. muHatGLM indicates estimate used algorithm intercept term. Default TRUE, used intercept estimated GLM. FALSE, estimate hierarchical credibility model used. epsilon positive convergence tolerance \\(\\epsilon\\); iterations converge \\(||\\theta[k] - \\theta[k - 1]||^2[[2]]/||\\theta[k - 1]||^2[[2]] < \\epsilon\\). , \\(\\theta[k]\\) parameter vector \\(k^{th}\\) iteration. maxiter maximum number iterations. verbose logical indicating output produced algorithm. returnData logical indicating input data returned. cpglmControl list parameters control fitting process GLM part. default, cpglmControl = list(bound.p = c(1.01, 1.99)) restricts range power parameter p [1.01, 1.99] fitting process. list passed cpglm. balanceProperty logical indicating balance property satisfied. optimizer character string determines optimization routine used estimating index dispersion parameters. Possible choices \"nlminb\" (default, see nlminb), \"bobyqa\" (bobyqa) \"L-BFGS-B\" (optim). y logical indicating whether response vector returned component returned value. ... arguments passed cpglm.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredTweedie.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combining the hierarchical credibility model with a GLM (Ohlsson, 2008) — hierCredTweedie","text":"object type hierCredTweedie following slots: call matched call HierarchicalResults results hierarchical credibility model. fitGLM results fitting GLM part. iter total number iterations. Converged logical indicating whether algorithm converged. LevelsCov object summarizes unique levels contract-specific covariates. fitted.values fitted mean values, resulting model fit. prior.weights weights (exposure) initially supplied. y requested, response vector. Default TRUE.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredTweedie.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combining the hierarchical credibility model with a GLM (Ohlsson, 2008) — hierCredTweedie","text":"estimating GLM part, function uses cpglm function cplm package.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredTweedie.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Combining the hierarchical credibility model with a GLM (Ohlsson, 2008) — hierCredTweedie","text":"Ohlsson, E. (2008). Combining generalized linear models credibility models practice. Scandinavian Actuarial Journal 2008(4), 301–314.","code":""},{"path":[]},{"path":"https://bavodc.github.io/actuaRE/reference/hierCredTweedie.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combining the hierarchical credibility model with a GLM (Ohlsson, 2008) — hierCredTweedie","text":"","code":"# \\donttest{ data(\"dataCar\") fit = hierCredTweedie(Y ~ area + (1 | VehicleType / VehicleBody), dataCar, weights = w, epsilon = 1e-6) fit #> Call: #> hierCredTweedie(formula = Y ~ area + (1 | VehicleType/VehicleBody),  #>     data = dataCar, weights = w, epsilon = 1e-06) #>  #>  #> Combination of the hierarchical credibility model with a GLM #>  #> Estimated variance parameters: #>   Var(V[jk]): 349.3256  #>   Var(V[j]): 628.8985  #> Unique number of categories of VehicleType: 2 #> Unique number of categories of VehicleBody: 9 #>  #> Results contract-specific risk factors: #>  #>  #> Call: #> cpglm(formula = FormulaGLM, link = \"log\", data = data, weights = wijkt,  #>     control = cpglmControl, optimizer = optimizer) #>  #> Deviance Residuals:  #>    Min      1Q  Median      3Q     Max   #> -8.095  -5.970  -4.573  -2.928  86.137   #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  5.63662    0.08834  63.803   <2e-16 *** #> areaB        0.04772    0.13048   0.366   0.7146     #> areaC        0.07692    0.11742   0.655   0.5124     #> areaD       -0.18574    0.15671  -1.185   0.2359     #> areaE        0.13053    0.16712   0.781   0.4348     #> areaF        0.46389    0.18823   2.464   0.0137 *   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Estimated dispersion parameter: 175.29 #> Estimated index parameter: 1.5705  #>  #> Residual deviance: 2360054  on 67560  degrees of freedom #> AIC:  116884  #>  #> Number of Fisher Scoring iterations:  6  #>  summary(fit) #> Call: #> hierCredTweedie(formula = Y ~ area + (1 | VehicleType/VehicleBody),  #>     data = dataCar, weights = w, epsilon = 1e-06) #>  #>  #> Combination of the hierarchical credibility model with a GLM #>  #> Estimated variance parameters: #>   Individual contracts: 4289401  #>   Var(V[jk]): 349.3256  #>   Var(V[j]): 628.8985  #> Unique number of categories of VehicleType: 2 #> Unique number of categories of VehicleBody: 9 #>  #> Results contract-specific risk factors: #>  #>  #> Call: #> cpglm(formula = FormulaGLM, link = \"log\", data = data, weights = wijkt,  #>     control = cpglmControl, optimizer = optimizer) #>  #> Deviance Residuals:  #>    Min      1Q  Median      3Q     Max   #> -8.095  -5.970  -4.573  -2.928  86.137   #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  5.63662    0.08834  63.803   <2e-16 *** #> areaB        0.04772    0.13048   0.366   0.7146     #> areaC        0.07692    0.11742   0.655   0.5124     #> areaD       -0.18574    0.15671  -1.185   0.2359     #> areaE        0.13053    0.16712   0.781   0.4348     #> areaF        0.46389    0.18823   2.464   0.0137 *   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Estimated dispersion parameter: 175.29 #> Estimated index parameter: 1.5705  #>  #> Residual deviance: 2360054  on 67560  degrees of freedom #> AIC:  116884  #>  #> Number of Fisher Scoring iterations:  6  #>  #> $call #> cpglm(formula = FormulaGLM, link = \"log\", data = data, weights = wijkt,  #>     control = cpglmControl, optimizer = optimizer) #>  #> $deviance #> [1] 2360054 #>  #> $aic #> [1] 116884 #>  #> $contrasts #> NULL #>  #> $df.residual #> [1] 67560 #>  #> $iter #> [1] 6 #>  #> $na.action #> NULL #>  #> $deviance.resid #>       Min        1Q    Median        3Q       Max  #> -8.095052 -5.969509 -4.572944 -2.927895 86.137065  #>  #> $coefficients #>                Estimate Std. Error    t value   Pr(>|t|) #> (Intercept)  5.63661846 0.08834343 63.8034805 0.00000000 #> areaB        0.04771903 0.13047847  0.3657234 0.71457260 #> areaC        0.07691849 0.11741546  0.6550968 0.51240767 #> areaD       -0.18573986 0.15670655 -1.1852719 0.23591415 #> areaE        0.13052750 0.16711877  0.7810464 0.43477797 #> areaF        0.46389185 0.18823319  2.4644530 0.01372473 #>  #> $dispersion #> [1] 175.2852 #>  #> $vcov #>              (Intercept)        areaB        areaC        areaD        areaE #> (Intercept)  0.007804562 -0.007804562 -0.007804562 -0.007804562 -0.007804562 #> areaB       -0.007804562  0.017024631  0.007804562  0.007804562  0.007804562 #> areaC       -0.007804562  0.007804562  0.013786391  0.007804562  0.007804562 #> areaD       -0.007804562  0.007804562  0.007804562  0.024556942  0.007804562 #> areaE       -0.007804562  0.007804562  0.007804562  0.007804562  0.027928682 #> areaF       -0.007804562  0.007804562  0.007804562  0.007804562  0.007804562 #>                    areaF #> (Intercept) -0.007804562 #> areaB        0.007804562 #> areaC        0.007804562 #> areaD        0.007804562 #> areaE        0.007804562 #> areaF        0.035431734 #>  #> $p #> [1] 1.570459 #>  ranef(fit) #> $sector #>         VehicleType        Uj #> 1:   Common vehicle 0.9557004 #> 2: Uncommon vehicle 1.0509018 #>  #> $group #>         VehicleType VehicleBody       Ujk #> 1:   Common vehicle       HBACK 1.0248171 #> 2:   Common vehicle       SEDAN 0.9524791 #> 3:   Common vehicle         UTE 0.9969568 #> 4: Uncommon vehicle       COUPE 1.0232340 #> 5: Uncommon vehicle       HDTOP 1.0064096 #> 6: Uncommon vehicle       MIBUS 1.0041678 #> 7: Uncommon vehicle       PANVN 1.0022996 #> 8: Uncommon vehicle       STNWG 0.9831763 #> 9: Uncommon vehicle       TRUCK 1.0076169 #>  fixef(fit) #> (Intercept)       areaB       areaC       areaD       areaE       areaF  #>  5.63661846  0.04771903  0.07691849 -0.18573986  0.13052750  0.46389185  # }"},{"path":"https://bavodc.github.io/actuaRE/reference/is.formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula — is.formula","title":"Formula — is.formula","text":"Checks object type formula","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/is.formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formula — is.formula","text":"","code":"is.formula(x)"},{"path":"https://bavodc.github.io/actuaRE/reference/is.formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formula — is.formula","text":"x object.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/is.formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formula — is.formula","text":"logical indicating object formula .","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/is.formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula — is.formula","text":"","code":"f = formula(y ~ x) is.formula(f) #> [1] TRUE"},{"path":"https://bavodc.github.io/actuaRE/reference/isNested.html","id":null,"dir":"Reference","previous_headings":"","what":"Is f1 nested within f2? — isNested","title":"Is f1 nested within f2? — isNested","text":"every level f1 occur conjunction exactly   one level f2? function based converting   triplet sparse matrix compressed column-oriented   form nesting can quickly evaluated.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/isNested.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is f1 nested within f2? — isNested","text":"","code":"isNested(f1, f2)"},{"path":"https://bavodc.github.io/actuaRE/reference/isNested.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is f1 nested within f2? — isNested","text":"f1 factor 1 f2 factor 2","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/isNested.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is f1 nested within f2? — isNested","text":"TRUE factor 1 nested within factor 2","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/isNested.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is f1 nested within f2? — isNested","text":"","code":"library(lme4)   with(Pastes, isNested(cask, batch))   ## => FALSE #> [1] FALSE   with(Pastes, isNested(sample, batch))  ## => TRUE #> [1] TRUE"},{"path":"https://bavodc.github.io/actuaRE/reference/modular.html","id":null,"dir":"Reference","previous_headings":"","what":"Modular Functions for Mixed Model Fits — modular","title":"Modular Functions for Mixed Model Fits — modular","text":"Modular functions mixed model fits","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/modular.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modular Functions for Mixed Model Fits — modular","text":"","code":"glFormula(formula, data = NULL, family = gaussian,             subset, weights, na.action, offset, contrasts = NULL,             start, mustart, etastart, control = glmerControl(), ...)"},{"path":"https://bavodc.github.io/actuaRE/reference/modular.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modular Functions for Mixed Model Fits — modular","text":"formula two-sided linear formula object     describing fixed-effects random-effects parts     model, response left ~     operator terms, separated + operators,     right.  Random-effects terms distinguished     vertical bars (\"|\") separating expressions     design matrices grouping factors. data optional data frame containing     variables named formula.  default     variables taken environment     lmer called. data optional,     package authors strongly recommend use,     especially later applying methods     update drop1 fitted model     (methods guaranteed work properly       data omitted). data omitted,     variables taken environment     formula (specified formula)     parent frame (specified character vector). subset optional expression indicating     subset rows data used     fit. can logical vector, numeric     vector indicating observation numbers     included, character vector row names     included.  observations included default. weights optional vector ‘prior weights’ used     fitting process.  NULL numeric vector. na.action function indicates     happen data contain NAs.  default     action (na.omit, inherited 'factory     fresh' value getOption(\"na.action\")) strips     observations missing values variables. offset can used specify priori known     component included linear predictor     fitting.  NULL numeric vector length     equal number cases.  One offset     terms can included formula instead well,     one specified sum used.  See     model.offset. contrasts optional list.  See     contrasts.arg model.matrix.default. control list giving [g]lFormula:         options running model, see lmerControl; mkLmerDevfun,mkGlmerDevfun: options         inner optimization step; optimizeLmer optimizeGlmer: control         parameters nonlinear optimizer (typically inherited                                             ... argument lmerControl).  start starting values (see lmer;                                 glFormula, just numeric vector                                 fixed-effect coefficients) family GLM family; see glm     family. mustart optional starting values scale     conditional mean; see glm details. etastart optional starting values scale     unbounded predictor; see glm details. ... potential arguments; optimizeLmer     optimizeGlmer, passed internal function     optwrap, relevant parameters calc.derivs     use.last.params (see lmerControl).","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/modular.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modular Functions for Mixed Model Fits — modular","text":"lFormula glFormula return list containing   components:  fr model frame X fixed-effect design matrix reTrms list containing information random effects structure:           result mkReTrms  mkLmerDevfun mkGlmerDevfun return function   calculate deviance (restricted deviance) function   theta (random-effect) parameters.  updateGlmerDevfun returns function calculate deviance function   concatenation theta beta (fixed-effect) parameters.   deviance functions environment containing objects required   evaluation. CAUTION: environment   functions returned mk(Gl|L)merDevfun contains reference   class objects (see ReferenceClasses,  merPredD-class, lmResp-class),   behave ways may surprise many users. example,   output mk(Gl|L)merDevfun naively copied,   modifications original also appear copy (                                                              vice versa). avoid behavior one must make deep copy (see  ReferenceClasses details).  optimizeLmer optimizeGlmer return results   optimization.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/modular.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Modular Functions for Mixed Model Fits — modular","text":"functions make internal components [gn]lmer fit. [g]lFormula takes arguments normally     passed [g]lmer, checking errors processing     formula data input create list objects required fit     mixed model. mk(Gl|L)merDevfun takes output previous     step (minus formula component) creates     deviance function optimize(Gl|L)mer takes     deviance function optimizes theta (                                                       theta beta, stage set                                                        2 optimizeGlmer updateGlmerDevfun takes first stage GLMM                                                        optimization (nAGQ=0, optimizing theta )                                                        produces second-stage deviance function mkMerMod takes environment                                                        deviance function, results optimization, list                                                        random-effect terms, model frame, model produces                                                        [g]lmerMod object.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/modular.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modular Functions for Mixed Model Fits — modular","text":"","code":"# \\donttest{   library(lme4)   ### Fitting a linear mixed model in 4 modularized steps    ## 1.  Parse the data and formula:   lmod <- lFormula(Reaction ~ Days + (Days|Subject), sleepstudy)   names(lmod) #> [1] \"fr\"      \"X\"       \"reTrms\"  \"REML\"    \"formula\" \"wmsgs\"     ## 2.  Create the deviance function to be optimized:   (devfun <- do.call(mkLmerDevfun, lmod)) #> function (theta)  #> .Call(lmer_Deviance, pp$ptr(), resp$ptr(), as.double(theta)) #> <environment: 0x000002b8f2f95428>   ls(environment(devfun)) # the environment of 'devfun' contains objects #> [1] \"lmer_Deviance\" \"lower\"         \"pp\"            \"resp\"            # required for its evaluation   ## 3.  Optimize the deviance function:   opt <- optimizeLmer(devfun)   opt[1:3] #> $par #> [1] 0.96674177 0.01516906 0.23090995 #>  #> $fval #> [1] 1743.628 #>  #> $feval #> [1] 43 #>    ## 4.  Package up the results:   mkMerMod(environment(devfun), opt, lmod$reTrms, fr = lmod$fr) #> Linear mixed model fit by REML ['lmerMod'] #> REML criterion at convergence: 1743.628 #> Random effects: #>  Groups   Name        Std.Dev. Corr #>  Subject  (Intercept) 24.741        #>           Days         5.922   0.07 #>  Residual             25.592        #> Number of obs: 180, groups:  Subject, 18 #> Fixed Effects: #> (Intercept)         Days   #>      251.41        10.47       ### Same model in one line   lmer(Reaction ~ Days + (Days|Subject), sleepstudy) #> Linear mixed model fit by REML ['lmerMod'] #> Formula: Reaction ~ Days + (Days | Subject) #>    Data: sleepstudy #> REML criterion at convergence: 1743.628 #> Random effects: #>  Groups   Name        Std.Dev. Corr #>  Subject  (Intercept) 24.741        #>           Days         5.922   0.07 #>  Residual             25.592        #> Number of obs: 180, groups:  Subject, 18 #> Fixed Effects: #> (Intercept)         Days   #>      251.41        10.47       ### Fitting a generalized linear mixed model in six modularized steps    ## 1.  Parse the data and formula:   glmod <- glFormula(cbind(incidence, size - incidence) ~ period + (1 | herd),                      data = cbpp, family = binomial)   #.... see what've got :   str(glmod, max=1, give.attr=FALSE) #> List of 6 #>  $ fr     :'data.frame':\t56 obs. of  3 variables: #>  $ X      : num [1:56, 1:4] 1 1 1 1 1 1 1 1 1 1 ... #>  $ reTrms :List of 10 #>  $ family :List of 12 #>  $ formula:Class 'formula'  language cbind(incidence, size - incidence) ~ period + (1 | herd) #>  $ wmsgs  : chr(0)    ## 2.  Create the deviance function for optimizing over theta:   (devfun <- do.call(mkGlmerDevfun, glmod)) #> function (theta)  #> { #>     resp$updateMu(lp0) #>     pp$setTheta(theta) #>     p <- pwrssUpdate(pp, resp, tol = tolPwrss, GQmat = GHrule(0L),  #>         compDev = compDev, maxit = maxit, verbose = verbose) #>     resp$updateWts() #>     p #> } #> <environment: 0x000002b8efea7528>   ls(environment(devfun)) # the environment of devfun contains lots of info #> [1] \"compDev\"     \"lower\"       \"lp0\"         \"maxit\"       \"pp\"          #> [6] \"pwrssUpdate\" \"resp\"        \"tolPwrss\"    \"verbose\"       ## 3.  Optimize over theta using a rough approximation (i.e. nAGQ = 0):   (opt <- optimizeGlmer(devfun)) #> parameter estimates: 0.641838555348909  #> objective: 184.108693002453  #> number of function evaluations: 18    ## 4.  Update the deviance function for optimizing over theta and beta:   (devfun <- updateGlmerDevfun(devfun, glmod$reTrms)) #> function (pars)  #> { #>     resp$setOffset(baseOffset) #>     resp$updateMu(lp0) #>     pp$setTheta(as.double(pars[dpars])) #>     spars <- as.numeric(pars[-dpars]) #>     offset <- if (length(spars) == 0)  #>         baseOffset #>     else baseOffset + pp$X %*% spars #>     resp$setOffset(offset) #>     p <- pwrssUpdate(pp, resp, tol = tolPwrss, GQmat = GQmat,  #>         compDev = compDev, grpFac = fac, maxit = maxit, verbose = verbose) #>     resp$updateWts() #>     p #> } #> <environment: 0x000002b8efea7528>   ## 5.  Optimize over theta and beta:   opt <- optimizeGlmer(devfun, stage=2)   str(opt, max=1) # seeing what we'got #> List of 7 #>  $ fval       : num 184 #>  $ par        : num [1:5] 0.642 -1.398 -0.992 -1.128 -1.58 #>  $ convergence: num 0 #>  $ NM.result  : int 3 #>  $ message    : chr \"parameter values converged to within tolerance\" #>  $ control    :List of 17 #>  $ feval      : num 285 #>  - attr(*, \"optimizer\")= chr \"Nelder_Mead\" #>  - attr(*, \"control\")=List of 3 #>  - attr(*, \"warnings\")= list() #>  - attr(*, \"derivs\")=List of 2   ## 6.  Package up the results:   (fMod <- mkMerMod(environment(devfun), opt, glmod$reTrms, fr = glmod$fr)) #> Generalized linear mixed model fit by maximum likelihood (Laplace #>   Approximation) [glmerMod] #>  Family: binomial  ( logit ) #>      AIC      BIC   logLik deviance df.resid  #> 194.0531 204.1799 -92.0266 184.0531       51  #> Random effects: #>  Groups Name        Std.Dev. #>  herd   (Intercept) 0.6421   #> Number of obs: 56, groups:  herd, 15 #> Fixed Effects: #> (Intercept)      period2      period3      period4   #>     -1.3983      -0.9919      -1.1282      -1.5797      ### Same model in one line   fM <- glmer(cbind(incidence, size - incidence) ~ period + (1 | herd),               data = cbpp, family = binomial)   all.equal(fMod, fM, check.attributes=FALSE, tolerance = 1e-12) #> [1] TRUE   # ----  --  even tolerance = 0  may work   # }"},{"path":"https://bavodc.github.io/actuaRE/reference/nobars.html","id":null,"dir":"Reference","previous_headings":"","what":"Omit terms separated by vertical bars in a formula — nobars","title":"Omit terms separated by vertical bars in a formula — nobars","text":"Remove random-effects terms mixed-effects   formula, thereby producing fixed-effects formula.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/nobars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Omit terms separated by vertical bars in a formula — nobars","text":"","code":"nobars(term)"},{"path":"https://bavodc.github.io/actuaRE/reference/nobars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Omit terms separated by vertical bars in a formula — nobars","text":"term right-hand side mixed-model formula","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/nobars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Omit terms separated by vertical bars in a formula — nobars","text":"fixed-effects part formula","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/nobars.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Omit terms separated by vertical bars in a formula — nobars","text":"function called recursively individual terms   model, argument called   term name like form, indicating   formula.","code":""},{"path":[]},{"path":"https://bavodc.github.io/actuaRE/reference/nobars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Omit terms separated by vertical bars in a formula — nobars","text":"","code":"nobars(Reaction ~ Days + (Days|Subject)) ## => Reaction ~ Days #> Reaction ~ Days #> <environment: 0x000002b8f2d71158>"},{"path":"https://bavodc.github.io/actuaRE/reference/NrUnique.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of unique elements in a vector — NrUnique","title":"Number of unique elements in a vector — NrUnique","text":"Number unique elements vector","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/NrUnique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of unique elements in a vector — NrUnique","text":"","code":"NrUnique(x, na.rm = TRUE)"},{"path":"https://bavodc.github.io/actuaRE/reference/NrUnique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of unique elements in a vector — NrUnique","text":"x object type vector. na.rm logical indicating missing values removed. Default TRUE.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/NrUnique.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of unique elements in a vector — NrUnique","text":"vector number unique elements","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/NrUnique.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of unique elements in a vector — NrUnique","text":"","code":"set.seed(1) x = sample(letters, 50, TRUE) NrUnique(x) #> [1] 22"},{"path":"https://bavodc.github.io/actuaRE/reference/plotRE.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualizing the random effect estimates using ggplot2 — plotRE","title":"Visualizing the random effect estimates using ggplot2 — plotRE","text":"Using function, can create plots random effect estimates fitted random effects models. make plots, rely ggplot2 package.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/plotRE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualizing the random effect estimates using ggplot2 — plotRE","text":"","code":"plotRE(   obj,   levelRE = c(\"all\", \"first\", \"second\"),   colour = \"black\",   plot = TRUE )"},{"path":"https://bavodc.github.io/actuaRE/reference/plotRE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualizing the random effect estimates using ggplot2 — plotRE","text":"obj object type hierCredibility, hierCredGLM hierCredTweedie levelRE indicates hierarchical level used. \"\" plots levels hierarchy, \"first\" first level hierarchy \"second\" second level. colour colour geom_point plot logical indicating ggplot objects plotted.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/plotRE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualizing the random effect estimates using ggplot2 — plotRE","text":"list ggplot objects.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/plotRE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualizing the random effect estimates using ggplot2 — plotRE","text":"","code":"# \\donttest{ fitHGLM <- hierCredGLM(Y ~ area + gender + (1 | VehicleType / VehicleBody), dataCar, weights = w) plotRE(fitHGLM)   #> $ggMLFj  #>  #> $ggMLFjk  #>  # }"},{"path":"https://bavodc.github.io/actuaRE/reference/predict.hierCredGLM.html","id":null,"dir":"Reference","previous_headings":"","what":"Model predictions — predict.hierCredGLM","title":"Model predictions — predict.hierCredGLM","text":"Obtain predictions based model fit hierCredGLM","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/predict.hierCredGLM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model predictions — predict.hierCredGLM","text":"","code":"# S3 method for hierCredGLM predict(object, newdata = NULL, ...)"},{"path":"https://bavodc.github.io/actuaRE/reference/predict.hierCredGLM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model predictions — predict.hierCredGLM","text":"object model object prediction desired. newdata optionally, data frame look variables predict. omitted, fitted values used. ... arguments passed speedglm","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/predict.hierCredGLM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model predictions — predict.hierCredGLM","text":"newdata omitted predictions based data used fit.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/predict.hierCredGLM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model predictions — predict.hierCredGLM","text":"random effects taken account specifying offset predict.speedglm function.","code":""},{"path":[]},{"path":"https://bavodc.github.io/actuaRE/reference/predict.hierCredibility.html","id":null,"dir":"Reference","previous_headings":"","what":"Model predictions — predict.hierCredibility","title":"Model predictions — predict.hierCredibility","text":"Obtain predictions based model fit hierCredibility","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/predict.hierCredibility.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model predictions — predict.hierCredibility","text":"","code":"# S3 method for hierCredibility predict(object, newdata = NULL, ...)"},{"path":"https://bavodc.github.io/actuaRE/reference/predict.hierCredibility.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model predictions — predict.hierCredibility","text":"object model object prediction desired. newdata optionally, data frame look variables predict. omitted, fitted values used. ... ignored.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/predict.hierCredibility.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model predictions — predict.hierCredibility","text":"newdata omitted predictions based data used fit.","code":""},{"path":[]},{"path":"https://bavodc.github.io/actuaRE/reference/predict.hierCredTweedie.html","id":null,"dir":"Reference","previous_headings":"","what":"Model predictions — predict.hierCredTweedie","title":"Model predictions — predict.hierCredTweedie","text":"Obtain predictions based model fit hierCredTweedie","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/predict.hierCredTweedie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model predictions — predict.hierCredTweedie","text":"","code":"# S3 method for hierCredTweedie predict(object, newdata = NULL, ...)"},{"path":"https://bavodc.github.io/actuaRE/reference/predict.hierCredTweedie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model predictions — predict.hierCredTweedie","text":"object model object prediction desired. newdata optionally, data frame look variables predict. omitted, fitted values used. ... arguments passed cpglm","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/predict.hierCredTweedie.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model predictions — predict.hierCredTweedie","text":"newdata omitted predictions based data used fit.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/predict.hierCredTweedie.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model predictions — predict.hierCredTweedie","text":"random effects taken account specifying offset predict.cpglm function.","code":""},{"path":[]},{"path":"https://bavodc.github.io/actuaRE/reference/print.BalanceProperty.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for an object of class BalanceProperty — print.BalanceProperty","title":"Print method for an object of class BalanceProperty — print.BalanceProperty","text":"Print method object class BalanceProperty","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/print.BalanceProperty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for an object of class BalanceProperty — print.BalanceProperty","text":"","code":"# S3 method for BalanceProperty print(x, ...)"},{"path":"https://bavodc.github.io/actuaRE/reference/print.BalanceProperty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for an object of class BalanceProperty — print.BalanceProperty","text":"x object type BalanceProperty ... Currently ignored.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/print.BalanceProperty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for an object of class BalanceProperty — print.BalanceProperty","text":"Prints call whether balance property satisfied . Returns invisible copy original object.","code":""},{"path":[]},{"path":"https://bavodc.github.io/actuaRE/reference/print.hierCredGLM.html","id":null,"dir":"Reference","previous_headings":"","what":"Default Printing — print.hierCredGLM","title":"Default Printing — print.hierCredGLM","text":"print.default default method generic   print function prints argument.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/print.hierCredGLM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default Printing — print.hierCredGLM","text":"","code":"# S3 method for hierCredGLM print(x, ...)"},{"path":"https://bavodc.github.io/actuaRE/reference/print.hierCredGLM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default Printing — print.hierCredGLM","text":"x object printed. ... arguments passed     methods.  ignored function.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/print.hierCredGLM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Default Printing — print.hierCredGLM","text":"default printing NAs print NA (without   quotes) unless character NA quote =     FALSE, <NA> printed. number decimal places used throughout vector.    means digits specifies minimum number significant   digits used, least one entry encoded   minimum number.  However, encoded elements   trailing zeroes, number decimal places reduced   least one element non-zero final digit.  Decimal points   included least one decimal place selected. Attributes printed respecting class(es), using values   digits print.default, using default values   (methods called) arguments. Option width controls printing vectors, matrices   arrays, option deparse.cutoff controls printing   language objects calls formulae. methods package attached, print call   show R objects formal classes (‘S4’)   called optional arguments.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/print.hierCredGLM.html","id":"large-number-of-digits","dir":"Reference","previous_headings":"","what":"Large number of digits","title":"Default Printing — print.hierCredGLM","text":"Note large values digits, currently   digits >= 16, calculation number significant   digits depend platform's internal (C library)   implementation sprintf() functionality.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/print.hierCredGLM.html","id":"single-byte-locales","dir":"Reference","previous_headings":"","what":"Single-byte locales","title":"Default Printing — print.hierCredGLM","text":"non-printable character encountered output,   represented one ANSI escape sequences (\\, \\b,   \\f, \\n, \\r, \\t, \\v, \\\\   \\0: see Quotes), failing 3-digit octal   code: example UK currency pound sign C locale (  implemented correctly) printed \\243.  characters   non-printable depends locale.   (versions Windows get wrong, bytes   upper bit set regarded printable Windows single-byte   locale.)","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/print.hierCredGLM.html","id":"multi-byte-locales","dir":"Reference","previous_headings":"","what":"Multi-byte locales","title":"Default Printing — print.hierCredGLM","text":"locales, characters ASCII range (0x00   0x7f) printed way, -printable, otherwise   via ANSI escape sequences 3-digit octal escapes described   single-byte locales. Whether character printable depends   current locale operating system (C library). Multi-byte non-printing characters printed escape sequence   form \\uxxxx (hexadecimal). Unicode code   point character. possible character string character vector   valid current locale.  byte encountered   part valid character printed hex form   \\xab repeated start valid character.","code":""},{"path":[]},{"path":"https://bavodc.github.io/actuaRE/reference/print.hierCredGLM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default Printing — print.hierCredGLM","text":"","code":"pi #> [1] 3.141593 print(pi, digits = 16) #> [1] 3.141592653589793 LETTERS[1:16] #>  [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" print(LETTERS, quote = FALSE) #>  [1] A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  M <- cbind(I = 1, matrix(1:10000, ncol = 10,                          dimnames = list(NULL, LETTERS[1:10]))) utils::head(M)        # makes more sense than #>      I A    B    C    D    E    F    G    H    I    J #> [1,] 1 1 1001 2001 3001 4001 5001 6001 7001 8001 9001 #> [2,] 1 2 1002 2002 3002 4002 5002 6002 7002 8002 9002 #> [3,] 1 3 1003 2003 3003 4003 5003 6003 7003 8003 9003 #> [4,] 1 4 1004 2004 3004 4004 5004 6004 7004 8004 9004 #> [5,] 1 5 1005 2005 3005 4005 5005 6005 7005 8005 9005 #> [6,] 1 6 1006 2006 3006 4006 5006 6006 7006 8006 9006 print(M, max = 1000)  # prints 90 rows and a message about omitting 910 #>         I    A    B    C    D    E    F    G    H    I     J #>    [1,] 1    1 1001 2001 3001 4001 5001 6001 7001 8001  9001 #>    [2,] 1    2 1002 2002 3002 4002 5002 6002 7002 8002  9002 #>    [3,] 1    3 1003 2003 3003 4003 5003 6003 7003 8003  9003 #>    [4,] 1    4 1004 2004 3004 4004 5004 6004 7004 8004  9004 #>    [5,] 1    5 1005 2005 3005 4005 5005 6005 7005 8005  9005 #>    [6,] 1    6 1006 2006 3006 4006 5006 6006 7006 8006  9006 #>    [7,] 1    7 1007 2007 3007 4007 5007 6007 7007 8007  9007 #>    [8,] 1    8 1008 2008 3008 4008 5008 6008 7008 8008  9008 #>    [9,] 1    9 1009 2009 3009 4009 5009 6009 7009 8009  9009 #>   [10,] 1   10 1010 2010 3010 4010 5010 6010 7010 8010  9010 #>   [11,] 1   11 1011 2011 3011 4011 5011 6011 7011 8011  9011 #>   [12,] 1   12 1012 2012 3012 4012 5012 6012 7012 8012  9012 #>   [13,] 1   13 1013 2013 3013 4013 5013 6013 7013 8013  9013 #>   [14,] 1   14 1014 2014 3014 4014 5014 6014 7014 8014  9014 #>   [15,] 1   15 1015 2015 3015 4015 5015 6015 7015 8015  9015 #>   [16,] 1   16 1016 2016 3016 4016 5016 6016 7016 8016  9016 #>   [17,] 1   17 1017 2017 3017 4017 5017 6017 7017 8017  9017 #>   [18,] 1   18 1018 2018 3018 4018 5018 6018 7018 8018  9018 #>   [19,] 1   19 1019 2019 3019 4019 5019 6019 7019 8019  9019 #>   [20,] 1   20 1020 2020 3020 4020 5020 6020 7020 8020  9020 #>   [21,] 1   21 1021 2021 3021 4021 5021 6021 7021 8021  9021 #>   [22,] 1   22 1022 2022 3022 4022 5022 6022 7022 8022  9022 #>   [23,] 1   23 1023 2023 3023 4023 5023 6023 7023 8023  9023 #>   [24,] 1   24 1024 2024 3024 4024 5024 6024 7024 8024  9024 #>   [25,] 1   25 1025 2025 3025 4025 5025 6025 7025 8025  9025 #>   [26,] 1   26 1026 2026 3026 4026 5026 6026 7026 8026  9026 #>   [27,] 1   27 1027 2027 3027 4027 5027 6027 7027 8027  9027 #>   [28,] 1   28 1028 2028 3028 4028 5028 6028 7028 8028  9028 #>   [29,] 1   29 1029 2029 3029 4029 5029 6029 7029 8029  9029 #>   [30,] 1   30 1030 2030 3030 4030 5030 6030 7030 8030  9030 #>   [31,] 1   31 1031 2031 3031 4031 5031 6031 7031 8031  9031 #>   [32,] 1   32 1032 2032 3032 4032 5032 6032 7032 8032  9032 #>   [33,] 1   33 1033 2033 3033 4033 5033 6033 7033 8033  9033 #>   [34,] 1   34 1034 2034 3034 4034 5034 6034 7034 8034  9034 #>   [35,] 1   35 1035 2035 3035 4035 5035 6035 7035 8035  9035 #>   [36,] 1   36 1036 2036 3036 4036 5036 6036 7036 8036  9036 #>   [37,] 1   37 1037 2037 3037 4037 5037 6037 7037 8037  9037 #>   [38,] 1   38 1038 2038 3038 4038 5038 6038 7038 8038  9038 #>   [39,] 1   39 1039 2039 3039 4039 5039 6039 7039 8039  9039 #>   [40,] 1   40 1040 2040 3040 4040 5040 6040 7040 8040  9040 #>   [41,] 1   41 1041 2041 3041 4041 5041 6041 7041 8041  9041 #>   [42,] 1   42 1042 2042 3042 4042 5042 6042 7042 8042  9042 #>   [43,] 1   43 1043 2043 3043 4043 5043 6043 7043 8043  9043 #>   [44,] 1   44 1044 2044 3044 4044 5044 6044 7044 8044  9044 #>   [45,] 1   45 1045 2045 3045 4045 5045 6045 7045 8045  9045 #>   [46,] 1   46 1046 2046 3046 4046 5046 6046 7046 8046  9046 #>   [47,] 1   47 1047 2047 3047 4047 5047 6047 7047 8047  9047 #>   [48,] 1   48 1048 2048 3048 4048 5048 6048 7048 8048  9048 #>   [49,] 1   49 1049 2049 3049 4049 5049 6049 7049 8049  9049 #>   [50,] 1   50 1050 2050 3050 4050 5050 6050 7050 8050  9050 #>   [51,] 1   51 1051 2051 3051 4051 5051 6051 7051 8051  9051 #>   [52,] 1   52 1052 2052 3052 4052 5052 6052 7052 8052  9052 #>   [53,] 1   53 1053 2053 3053 4053 5053 6053 7053 8053  9053 #>   [54,] 1   54 1054 2054 3054 4054 5054 6054 7054 8054  9054 #>   [55,] 1   55 1055 2055 3055 4055 5055 6055 7055 8055  9055 #>   [56,] 1   56 1056 2056 3056 4056 5056 6056 7056 8056  9056 #>   [57,] 1   57 1057 2057 3057 4057 5057 6057 7057 8057  9057 #>   [58,] 1   58 1058 2058 3058 4058 5058 6058 7058 8058  9058 #>   [59,] 1   59 1059 2059 3059 4059 5059 6059 7059 8059  9059 #>   [60,] 1   60 1060 2060 3060 4060 5060 6060 7060 8060  9060 #>   [61,] 1   61 1061 2061 3061 4061 5061 6061 7061 8061  9061 #>   [62,] 1   62 1062 2062 3062 4062 5062 6062 7062 8062  9062 #>   [63,] 1   63 1063 2063 3063 4063 5063 6063 7063 8063  9063 #>   [64,] 1   64 1064 2064 3064 4064 5064 6064 7064 8064  9064 #>   [65,] 1   65 1065 2065 3065 4065 5065 6065 7065 8065  9065 #>   [66,] 1   66 1066 2066 3066 4066 5066 6066 7066 8066  9066 #>   [67,] 1   67 1067 2067 3067 4067 5067 6067 7067 8067  9067 #>   [68,] 1   68 1068 2068 3068 4068 5068 6068 7068 8068  9068 #>   [69,] 1   69 1069 2069 3069 4069 5069 6069 7069 8069  9069 #>   [70,] 1   70 1070 2070 3070 4070 5070 6070 7070 8070  9070 #>   [71,] 1   71 1071 2071 3071 4071 5071 6071 7071 8071  9071 #>   [72,] 1   72 1072 2072 3072 4072 5072 6072 7072 8072  9072 #>   [73,] 1   73 1073 2073 3073 4073 5073 6073 7073 8073  9073 #>   [74,] 1   74 1074 2074 3074 4074 5074 6074 7074 8074  9074 #>   [75,] 1   75 1075 2075 3075 4075 5075 6075 7075 8075  9075 #>   [76,] 1   76 1076 2076 3076 4076 5076 6076 7076 8076  9076 #>   [77,] 1   77 1077 2077 3077 4077 5077 6077 7077 8077  9077 #>   [78,] 1   78 1078 2078 3078 4078 5078 6078 7078 8078  9078 #>   [79,] 1   79 1079 2079 3079 4079 5079 6079 7079 8079  9079 #>   [80,] 1   80 1080 2080 3080 4080 5080 6080 7080 8080  9080 #>   [81,] 1   81 1081 2081 3081 4081 5081 6081 7081 8081  9081 #>   [82,] 1   82 1082 2082 3082 4082 5082 6082 7082 8082  9082 #>   [83,] 1   83 1083 2083 3083 4083 5083 6083 7083 8083  9083 #>   [84,] 1   84 1084 2084 3084 4084 5084 6084 7084 8084  9084 #>   [85,] 1   85 1085 2085 3085 4085 5085 6085 7085 8085  9085 #>   [86,] 1   86 1086 2086 3086 4086 5086 6086 7086 8086  9086 #>   [87,] 1   87 1087 2087 3087 4087 5087 6087 7087 8087  9087 #>   [88,] 1   88 1088 2088 3088 4088 5088 6088 7088 8088  9088 #>   [89,] 1   89 1089 2089 3089 4089 5089 6089 7089 8089  9089 #>   [90,] 1   90 1090 2090 3090 4090 5090 6090 7090 8090  9090 #>  [ reached getOption(\"max.print\") -- omitted 910 rows ]"},{"path":"https://bavodc.github.io/actuaRE/reference/print.hierCredibility.html","id":null,"dir":"Reference","previous_headings":"","what":"Default Printing — print.hierCredibility","title":"Default Printing — print.hierCredibility","text":"print.default default method generic   print function prints argument.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/print.hierCredibility.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default Printing — print.hierCredibility","text":"","code":"# S3 method for hierCredibility print(x, ...)"},{"path":"https://bavodc.github.io/actuaRE/reference/print.hierCredibility.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default Printing — print.hierCredibility","text":"x object printed. ... arguments passed     methods.  ignored function.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/print.hierCredibility.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Default Printing — print.hierCredibility","text":"default printing NAs print NA (without   quotes) unless character NA quote =     FALSE, <NA> printed. number decimal places used throughout vector.    means digits specifies minimum number significant   digits used, least one entry encoded   minimum number.  However, encoded elements   trailing zeroes, number decimal places reduced   least one element non-zero final digit.  Decimal points   included least one decimal place selected. Attributes printed respecting class(es), using values   digits print.default, using default values   (methods called) arguments. Option width controls printing vectors, matrices   arrays, option deparse.cutoff controls printing   language objects calls formulae. methods package attached, print call   show R objects formal classes (‘S4’)   called optional arguments.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/print.hierCredibility.html","id":"large-number-of-digits","dir":"Reference","previous_headings":"","what":"Large number of digits","title":"Default Printing — print.hierCredibility","text":"Note large values digits, currently   digits >= 16, calculation number significant   digits depend platform's internal (C library)   implementation sprintf() functionality.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/print.hierCredibility.html","id":"single-byte-locales","dir":"Reference","previous_headings":"","what":"Single-byte locales","title":"Default Printing — print.hierCredibility","text":"non-printable character encountered output,   represented one ANSI escape sequences (\\, \\b,   \\f, \\n, \\r, \\t, \\v, \\\\   \\0: see Quotes), failing 3-digit octal   code: example UK currency pound sign C locale (  implemented correctly) printed \\243.  characters   non-printable depends locale.   (versions Windows get wrong, bytes   upper bit set regarded printable Windows single-byte   locale.)","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/print.hierCredibility.html","id":"multi-byte-locales","dir":"Reference","previous_headings":"","what":"Multi-byte locales","title":"Default Printing — print.hierCredibility","text":"locales, characters ASCII range (0x00   0x7f) printed way, -printable, otherwise   via ANSI escape sequences 3-digit octal escapes described   single-byte locales. Whether character printable depends   current locale operating system (C library). Multi-byte non-printing characters printed escape sequence   form \\uxxxx (hexadecimal). Unicode code   point character. possible character string character vector   valid current locale.  byte encountered   part valid character printed hex form   \\xab repeated start valid character.","code":""},{"path":[]},{"path":"https://bavodc.github.io/actuaRE/reference/print.hierCredibility.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default Printing — print.hierCredibility","text":"","code":"pi #> [1] 3.141593 print(pi, digits = 16) #> [1] 3.141592653589793 LETTERS[1:16] #>  [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" print(LETTERS, quote = FALSE) #>  [1] A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  M <- cbind(I = 1, matrix(1:10000, ncol = 10,                          dimnames = list(NULL, LETTERS[1:10]))) utils::head(M)        # makes more sense than #>      I A    B    C    D    E    F    G    H    I    J #> [1,] 1 1 1001 2001 3001 4001 5001 6001 7001 8001 9001 #> [2,] 1 2 1002 2002 3002 4002 5002 6002 7002 8002 9002 #> [3,] 1 3 1003 2003 3003 4003 5003 6003 7003 8003 9003 #> [4,] 1 4 1004 2004 3004 4004 5004 6004 7004 8004 9004 #> [5,] 1 5 1005 2005 3005 4005 5005 6005 7005 8005 9005 #> [6,] 1 6 1006 2006 3006 4006 5006 6006 7006 8006 9006 print(M, max = 1000)  # prints 90 rows and a message about omitting 910 #>         I    A    B    C    D    E    F    G    H    I     J #>    [1,] 1    1 1001 2001 3001 4001 5001 6001 7001 8001  9001 #>    [2,] 1    2 1002 2002 3002 4002 5002 6002 7002 8002  9002 #>    [3,] 1    3 1003 2003 3003 4003 5003 6003 7003 8003  9003 #>    [4,] 1    4 1004 2004 3004 4004 5004 6004 7004 8004  9004 #>    [5,] 1    5 1005 2005 3005 4005 5005 6005 7005 8005  9005 #>    [6,] 1    6 1006 2006 3006 4006 5006 6006 7006 8006  9006 #>    [7,] 1    7 1007 2007 3007 4007 5007 6007 7007 8007  9007 #>    [8,] 1    8 1008 2008 3008 4008 5008 6008 7008 8008  9008 #>    [9,] 1    9 1009 2009 3009 4009 5009 6009 7009 8009  9009 #>   [10,] 1   10 1010 2010 3010 4010 5010 6010 7010 8010  9010 #>   [11,] 1   11 1011 2011 3011 4011 5011 6011 7011 8011  9011 #>   [12,] 1   12 1012 2012 3012 4012 5012 6012 7012 8012  9012 #>   [13,] 1   13 1013 2013 3013 4013 5013 6013 7013 8013  9013 #>   [14,] 1   14 1014 2014 3014 4014 5014 6014 7014 8014  9014 #>   [15,] 1   15 1015 2015 3015 4015 5015 6015 7015 8015  9015 #>   [16,] 1   16 1016 2016 3016 4016 5016 6016 7016 8016  9016 #>   [17,] 1   17 1017 2017 3017 4017 5017 6017 7017 8017  9017 #>   [18,] 1   18 1018 2018 3018 4018 5018 6018 7018 8018  9018 #>   [19,] 1   19 1019 2019 3019 4019 5019 6019 7019 8019  9019 #>   [20,] 1   20 1020 2020 3020 4020 5020 6020 7020 8020  9020 #>   [21,] 1   21 1021 2021 3021 4021 5021 6021 7021 8021  9021 #>   [22,] 1   22 1022 2022 3022 4022 5022 6022 7022 8022  9022 #>   [23,] 1   23 1023 2023 3023 4023 5023 6023 7023 8023  9023 #>   [24,] 1   24 1024 2024 3024 4024 5024 6024 7024 8024  9024 #>   [25,] 1   25 1025 2025 3025 4025 5025 6025 7025 8025  9025 #>   [26,] 1   26 1026 2026 3026 4026 5026 6026 7026 8026  9026 #>   [27,] 1   27 1027 2027 3027 4027 5027 6027 7027 8027  9027 #>   [28,] 1   28 1028 2028 3028 4028 5028 6028 7028 8028  9028 #>   [29,] 1   29 1029 2029 3029 4029 5029 6029 7029 8029  9029 #>   [30,] 1   30 1030 2030 3030 4030 5030 6030 7030 8030  9030 #>   [31,] 1   31 1031 2031 3031 4031 5031 6031 7031 8031  9031 #>   [32,] 1   32 1032 2032 3032 4032 5032 6032 7032 8032  9032 #>   [33,] 1   33 1033 2033 3033 4033 5033 6033 7033 8033  9033 #>   [34,] 1   34 1034 2034 3034 4034 5034 6034 7034 8034  9034 #>   [35,] 1   35 1035 2035 3035 4035 5035 6035 7035 8035  9035 #>   [36,] 1   36 1036 2036 3036 4036 5036 6036 7036 8036  9036 #>   [37,] 1   37 1037 2037 3037 4037 5037 6037 7037 8037  9037 #>   [38,] 1   38 1038 2038 3038 4038 5038 6038 7038 8038  9038 #>   [39,] 1   39 1039 2039 3039 4039 5039 6039 7039 8039  9039 #>   [40,] 1   40 1040 2040 3040 4040 5040 6040 7040 8040  9040 #>   [41,] 1   41 1041 2041 3041 4041 5041 6041 7041 8041  9041 #>   [42,] 1   42 1042 2042 3042 4042 5042 6042 7042 8042  9042 #>   [43,] 1   43 1043 2043 3043 4043 5043 6043 7043 8043  9043 #>   [44,] 1   44 1044 2044 3044 4044 5044 6044 7044 8044  9044 #>   [45,] 1   45 1045 2045 3045 4045 5045 6045 7045 8045  9045 #>   [46,] 1   46 1046 2046 3046 4046 5046 6046 7046 8046  9046 #>   [47,] 1   47 1047 2047 3047 4047 5047 6047 7047 8047  9047 #>   [48,] 1   48 1048 2048 3048 4048 5048 6048 7048 8048  9048 #>   [49,] 1   49 1049 2049 3049 4049 5049 6049 7049 8049  9049 #>   [50,] 1   50 1050 2050 3050 4050 5050 6050 7050 8050  9050 #>   [51,] 1   51 1051 2051 3051 4051 5051 6051 7051 8051  9051 #>   [52,] 1   52 1052 2052 3052 4052 5052 6052 7052 8052  9052 #>   [53,] 1   53 1053 2053 3053 4053 5053 6053 7053 8053  9053 #>   [54,] 1   54 1054 2054 3054 4054 5054 6054 7054 8054  9054 #>   [55,] 1   55 1055 2055 3055 4055 5055 6055 7055 8055  9055 #>   [56,] 1   56 1056 2056 3056 4056 5056 6056 7056 8056  9056 #>   [57,] 1   57 1057 2057 3057 4057 5057 6057 7057 8057  9057 #>   [58,] 1   58 1058 2058 3058 4058 5058 6058 7058 8058  9058 #>   [59,] 1   59 1059 2059 3059 4059 5059 6059 7059 8059  9059 #>   [60,] 1   60 1060 2060 3060 4060 5060 6060 7060 8060  9060 #>   [61,] 1   61 1061 2061 3061 4061 5061 6061 7061 8061  9061 #>   [62,] 1   62 1062 2062 3062 4062 5062 6062 7062 8062  9062 #>   [63,] 1   63 1063 2063 3063 4063 5063 6063 7063 8063  9063 #>   [64,] 1   64 1064 2064 3064 4064 5064 6064 7064 8064  9064 #>   [65,] 1   65 1065 2065 3065 4065 5065 6065 7065 8065  9065 #>   [66,] 1   66 1066 2066 3066 4066 5066 6066 7066 8066  9066 #>   [67,] 1   67 1067 2067 3067 4067 5067 6067 7067 8067  9067 #>   [68,] 1   68 1068 2068 3068 4068 5068 6068 7068 8068  9068 #>   [69,] 1   69 1069 2069 3069 4069 5069 6069 7069 8069  9069 #>   [70,] 1   70 1070 2070 3070 4070 5070 6070 7070 8070  9070 #>   [71,] 1   71 1071 2071 3071 4071 5071 6071 7071 8071  9071 #>   [72,] 1   72 1072 2072 3072 4072 5072 6072 7072 8072  9072 #>   [73,] 1   73 1073 2073 3073 4073 5073 6073 7073 8073  9073 #>   [74,] 1   74 1074 2074 3074 4074 5074 6074 7074 8074  9074 #>   [75,] 1   75 1075 2075 3075 4075 5075 6075 7075 8075  9075 #>   [76,] 1   76 1076 2076 3076 4076 5076 6076 7076 8076  9076 #>   [77,] 1   77 1077 2077 3077 4077 5077 6077 7077 8077  9077 #>   [78,] 1   78 1078 2078 3078 4078 5078 6078 7078 8078  9078 #>   [79,] 1   79 1079 2079 3079 4079 5079 6079 7079 8079  9079 #>   [80,] 1   80 1080 2080 3080 4080 5080 6080 7080 8080  9080 #>   [81,] 1   81 1081 2081 3081 4081 5081 6081 7081 8081  9081 #>   [82,] 1   82 1082 2082 3082 4082 5082 6082 7082 8082  9082 #>   [83,] 1   83 1083 2083 3083 4083 5083 6083 7083 8083  9083 #>   [84,] 1   84 1084 2084 3084 4084 5084 6084 7084 8084  9084 #>   [85,] 1   85 1085 2085 3085 4085 5085 6085 7085 8085  9085 #>   [86,] 1   86 1086 2086 3086 4086 5086 6086 7086 8086  9086 #>   [87,] 1   87 1087 2087 3087 4087 5087 6087 7087 8087  9087 #>   [88,] 1   88 1088 2088 3088 4088 5088 6088 7088 8088  9088 #>   [89,] 1   89 1089 2089 3089 4089 5089 6089 7089 8089  9089 #>   [90,] 1   90 1090 2090 3090 4090 5090 6090 7090 8090  9090 #>  [ reached getOption(\"max.print\") -- omitted 910 rows ]"},{"path":"https://bavodc.github.io/actuaRE/reference/print.hierCredTweedie.html","id":null,"dir":"Reference","previous_headings":"","what":"Default Printing — print.hierCredTweedie","title":"Default Printing — print.hierCredTweedie","text":"print.default default method generic   print function prints argument.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/print.hierCredTweedie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default Printing — print.hierCredTweedie","text":"","code":"# S3 method for hierCredTweedie print(x, ...)"},{"path":"https://bavodc.github.io/actuaRE/reference/print.hierCredTweedie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default Printing — print.hierCredTweedie","text":"x object printed. ... arguments passed     methods.  ignored function.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/print.hierCredTweedie.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Default Printing — print.hierCredTweedie","text":"default printing NAs print NA (without   quotes) unless character NA quote =     FALSE, <NA> printed. number decimal places used throughout vector.    means digits specifies minimum number significant   digits used, least one entry encoded   minimum number.  However, encoded elements   trailing zeroes, number decimal places reduced   least one element non-zero final digit.  Decimal points   included least one decimal place selected. Attributes printed respecting class(es), using values   digits print.default, using default values   (methods called) arguments. Option width controls printing vectors, matrices   arrays, option deparse.cutoff controls printing   language objects calls formulae. methods package attached, print call   show R objects formal classes (‘S4’)   called optional arguments.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/print.hierCredTweedie.html","id":"large-number-of-digits","dir":"Reference","previous_headings":"","what":"Large number of digits","title":"Default Printing — print.hierCredTweedie","text":"Note large values digits, currently   digits >= 16, calculation number significant   digits depend platform's internal (C library)   implementation sprintf() functionality.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/print.hierCredTweedie.html","id":"single-byte-locales","dir":"Reference","previous_headings":"","what":"Single-byte locales","title":"Default Printing — print.hierCredTweedie","text":"non-printable character encountered output,   represented one ANSI escape sequences (\\, \\b,   \\f, \\n, \\r, \\t, \\v, \\\\   \\0: see Quotes), failing 3-digit octal   code: example UK currency pound sign C locale (  implemented correctly) printed \\243.  characters   non-printable depends locale.   (versions Windows get wrong, bytes   upper bit set regarded printable Windows single-byte   locale.)","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/print.hierCredTweedie.html","id":"multi-byte-locales","dir":"Reference","previous_headings":"","what":"Multi-byte locales","title":"Default Printing — print.hierCredTweedie","text":"locales, characters ASCII range (0x00   0x7f) printed way, -printable, otherwise   via ANSI escape sequences 3-digit octal escapes described   single-byte locales. Whether character printable depends   current locale operating system (C library). Multi-byte non-printing characters printed escape sequence   form \\uxxxx (hexadecimal). Unicode code   point character. possible character string character vector   valid current locale.  byte encountered   part valid character printed hex form   \\xab repeated start valid character.","code":""},{"path":[]},{"path":"https://bavodc.github.io/actuaRE/reference/print.hierCredTweedie.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default Printing — print.hierCredTweedie","text":"","code":"pi #> [1] 3.141593 print(pi, digits = 16) #> [1] 3.141592653589793 LETTERS[1:16] #>  [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" print(LETTERS, quote = FALSE) #>  [1] A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  M <- cbind(I = 1, matrix(1:10000, ncol = 10,                          dimnames = list(NULL, LETTERS[1:10]))) utils::head(M)        # makes more sense than #>      I A    B    C    D    E    F    G    H    I    J #> [1,] 1 1 1001 2001 3001 4001 5001 6001 7001 8001 9001 #> [2,] 1 2 1002 2002 3002 4002 5002 6002 7002 8002 9002 #> [3,] 1 3 1003 2003 3003 4003 5003 6003 7003 8003 9003 #> [4,] 1 4 1004 2004 3004 4004 5004 6004 7004 8004 9004 #> [5,] 1 5 1005 2005 3005 4005 5005 6005 7005 8005 9005 #> [6,] 1 6 1006 2006 3006 4006 5006 6006 7006 8006 9006 print(M, max = 1000)  # prints 90 rows and a message about omitting 910 #>         I    A    B    C    D    E    F    G    H    I     J #>    [1,] 1    1 1001 2001 3001 4001 5001 6001 7001 8001  9001 #>    [2,] 1    2 1002 2002 3002 4002 5002 6002 7002 8002  9002 #>    [3,] 1    3 1003 2003 3003 4003 5003 6003 7003 8003  9003 #>    [4,] 1    4 1004 2004 3004 4004 5004 6004 7004 8004  9004 #>    [5,] 1    5 1005 2005 3005 4005 5005 6005 7005 8005  9005 #>    [6,] 1    6 1006 2006 3006 4006 5006 6006 7006 8006  9006 #>    [7,] 1    7 1007 2007 3007 4007 5007 6007 7007 8007  9007 #>    [8,] 1    8 1008 2008 3008 4008 5008 6008 7008 8008  9008 #>    [9,] 1    9 1009 2009 3009 4009 5009 6009 7009 8009  9009 #>   [10,] 1   10 1010 2010 3010 4010 5010 6010 7010 8010  9010 #>   [11,] 1   11 1011 2011 3011 4011 5011 6011 7011 8011  9011 #>   [12,] 1   12 1012 2012 3012 4012 5012 6012 7012 8012  9012 #>   [13,] 1   13 1013 2013 3013 4013 5013 6013 7013 8013  9013 #>   [14,] 1   14 1014 2014 3014 4014 5014 6014 7014 8014  9014 #>   [15,] 1   15 1015 2015 3015 4015 5015 6015 7015 8015  9015 #>   [16,] 1   16 1016 2016 3016 4016 5016 6016 7016 8016  9016 #>   [17,] 1   17 1017 2017 3017 4017 5017 6017 7017 8017  9017 #>   [18,] 1   18 1018 2018 3018 4018 5018 6018 7018 8018  9018 #>   [19,] 1   19 1019 2019 3019 4019 5019 6019 7019 8019  9019 #>   [20,] 1   20 1020 2020 3020 4020 5020 6020 7020 8020  9020 #>   [21,] 1   21 1021 2021 3021 4021 5021 6021 7021 8021  9021 #>   [22,] 1   22 1022 2022 3022 4022 5022 6022 7022 8022  9022 #>   [23,] 1   23 1023 2023 3023 4023 5023 6023 7023 8023  9023 #>   [24,] 1   24 1024 2024 3024 4024 5024 6024 7024 8024  9024 #>   [25,] 1   25 1025 2025 3025 4025 5025 6025 7025 8025  9025 #>   [26,] 1   26 1026 2026 3026 4026 5026 6026 7026 8026  9026 #>   [27,] 1   27 1027 2027 3027 4027 5027 6027 7027 8027  9027 #>   [28,] 1   28 1028 2028 3028 4028 5028 6028 7028 8028  9028 #>   [29,] 1   29 1029 2029 3029 4029 5029 6029 7029 8029  9029 #>   [30,] 1   30 1030 2030 3030 4030 5030 6030 7030 8030  9030 #>   [31,] 1   31 1031 2031 3031 4031 5031 6031 7031 8031  9031 #>   [32,] 1   32 1032 2032 3032 4032 5032 6032 7032 8032  9032 #>   [33,] 1   33 1033 2033 3033 4033 5033 6033 7033 8033  9033 #>   [34,] 1   34 1034 2034 3034 4034 5034 6034 7034 8034  9034 #>   [35,] 1   35 1035 2035 3035 4035 5035 6035 7035 8035  9035 #>   [36,] 1   36 1036 2036 3036 4036 5036 6036 7036 8036  9036 #>   [37,] 1   37 1037 2037 3037 4037 5037 6037 7037 8037  9037 #>   [38,] 1   38 1038 2038 3038 4038 5038 6038 7038 8038  9038 #>   [39,] 1   39 1039 2039 3039 4039 5039 6039 7039 8039  9039 #>   [40,] 1   40 1040 2040 3040 4040 5040 6040 7040 8040  9040 #>   [41,] 1   41 1041 2041 3041 4041 5041 6041 7041 8041  9041 #>   [42,] 1   42 1042 2042 3042 4042 5042 6042 7042 8042  9042 #>   [43,] 1   43 1043 2043 3043 4043 5043 6043 7043 8043  9043 #>   [44,] 1   44 1044 2044 3044 4044 5044 6044 7044 8044  9044 #>   [45,] 1   45 1045 2045 3045 4045 5045 6045 7045 8045  9045 #>   [46,] 1   46 1046 2046 3046 4046 5046 6046 7046 8046  9046 #>   [47,] 1   47 1047 2047 3047 4047 5047 6047 7047 8047  9047 #>   [48,] 1   48 1048 2048 3048 4048 5048 6048 7048 8048  9048 #>   [49,] 1   49 1049 2049 3049 4049 5049 6049 7049 8049  9049 #>   [50,] 1   50 1050 2050 3050 4050 5050 6050 7050 8050  9050 #>   [51,] 1   51 1051 2051 3051 4051 5051 6051 7051 8051  9051 #>   [52,] 1   52 1052 2052 3052 4052 5052 6052 7052 8052  9052 #>   [53,] 1   53 1053 2053 3053 4053 5053 6053 7053 8053  9053 #>   [54,] 1   54 1054 2054 3054 4054 5054 6054 7054 8054  9054 #>   [55,] 1   55 1055 2055 3055 4055 5055 6055 7055 8055  9055 #>   [56,] 1   56 1056 2056 3056 4056 5056 6056 7056 8056  9056 #>   [57,] 1   57 1057 2057 3057 4057 5057 6057 7057 8057  9057 #>   [58,] 1   58 1058 2058 3058 4058 5058 6058 7058 8058  9058 #>   [59,] 1   59 1059 2059 3059 4059 5059 6059 7059 8059  9059 #>   [60,] 1   60 1060 2060 3060 4060 5060 6060 7060 8060  9060 #>   [61,] 1   61 1061 2061 3061 4061 5061 6061 7061 8061  9061 #>   [62,] 1   62 1062 2062 3062 4062 5062 6062 7062 8062  9062 #>   [63,] 1   63 1063 2063 3063 4063 5063 6063 7063 8063  9063 #>   [64,] 1   64 1064 2064 3064 4064 5064 6064 7064 8064  9064 #>   [65,] 1   65 1065 2065 3065 4065 5065 6065 7065 8065  9065 #>   [66,] 1   66 1066 2066 3066 4066 5066 6066 7066 8066  9066 #>   [67,] 1   67 1067 2067 3067 4067 5067 6067 7067 8067  9067 #>   [68,] 1   68 1068 2068 3068 4068 5068 6068 7068 8068  9068 #>   [69,] 1   69 1069 2069 3069 4069 5069 6069 7069 8069  9069 #>   [70,] 1   70 1070 2070 3070 4070 5070 6070 7070 8070  9070 #>   [71,] 1   71 1071 2071 3071 4071 5071 6071 7071 8071  9071 #>   [72,] 1   72 1072 2072 3072 4072 5072 6072 7072 8072  9072 #>   [73,] 1   73 1073 2073 3073 4073 5073 6073 7073 8073  9073 #>   [74,] 1   74 1074 2074 3074 4074 5074 6074 7074 8074  9074 #>   [75,] 1   75 1075 2075 3075 4075 5075 6075 7075 8075  9075 #>   [76,] 1   76 1076 2076 3076 4076 5076 6076 7076 8076  9076 #>   [77,] 1   77 1077 2077 3077 4077 5077 6077 7077 8077  9077 #>   [78,] 1   78 1078 2078 3078 4078 5078 6078 7078 8078  9078 #>   [79,] 1   79 1079 2079 3079 4079 5079 6079 7079 8079  9079 #>   [80,] 1   80 1080 2080 3080 4080 5080 6080 7080 8080  9080 #>   [81,] 1   81 1081 2081 3081 4081 5081 6081 7081 8081  9081 #>   [82,] 1   82 1082 2082 3082 4082 5082 6082 7082 8082  9082 #>   [83,] 1   83 1083 2083 3083 4083 5083 6083 7083 8083  9083 #>   [84,] 1   84 1084 2084 3084 4084 5084 6084 7084 8084  9084 #>   [85,] 1   85 1085 2085 3085 4085 5085 6085 7085 8085  9085 #>   [86,] 1   86 1086 2086 3086 4086 5086 6086 7086 8086  9086 #>   [87,] 1   87 1087 2087 3087 4087 5087 6087 7087 8087  9087 #>   [88,] 1   88 1088 2088 3088 4088 5088 6088 7088 8088  9088 #>   [89,] 1   89 1089 2089 3089 4089 5089 6089 7089 8089  9089 #>   [90,] 1   90 1090 2090 3090 4090 5090 6090 7090 8090  9090 #>  [ reached getOption(\"max.print\") -- omitted 910 rows ]"},{"path":"https://bavodc.github.io/actuaRE/reference/ranef-actuaRE.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the random effect estimates from a fitted random effects model — ranef-actuaRE","title":"Extract the random effect estimates from a fitted random effects model — ranef-actuaRE","text":"generic function extract estimates/predictions random effects fitted random effects model.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/ranef-actuaRE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the random effect estimates from a fitted random effects model — ranef-actuaRE","text":"","code":"# S3 method for hierCredibility ranef(object, ...)  # S3 method for hierCredGLM ranef(object, ...)  # S3 method for hierCredTweedie ranef(object, ...)"},{"path":"https://bavodc.github.io/actuaRE/reference/ranef-actuaRE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the random effect estimates from a fitted random effects model — ranef-actuaRE","text":"object object type hierCredibility, hierCredGLM hierCredTweedie ... Currently ignored.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/ranef-actuaRE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the random effect estimates from a fitted random effects model — ranef-actuaRE","text":"list data frames, one grouping factor random effects. number rows data frame number levels grouping factor. first (two) columns correspond(s) grouping factor. last column corresponds estimated random effect.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/ranef.hierCredGLM.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Random Effects — ranef.hierCredGLM","title":"Extract Random Effects — ranef.hierCredGLM","text":"function generic; method functions can written handle   specific classes objects. Classes already methods   function include lmList lme.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/ranef.hierCredGLM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Random Effects — ranef.hierCredGLM","text":"","code":"# S3 method for hierCredGLM ranef(object, ...)"},{"path":"https://bavodc.github.io/actuaRE/reference/ranef.hierCredGLM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Random Effects — ranef.hierCredGLM","text":"object fitted model object random effects    estimates can extracted. ... methods generic function require additional    arguments.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/ranef.hierCredGLM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Random Effects — ranef.hierCredGLM","text":"depend method function used; see appropriate documentation.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/ranef.hierCredGLM.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Extract Random Effects — ranef.hierCredGLM","text":"Pinheiro, J.C., Bates, D.M. (2000) \"Mixed-Effects Models  S S-PLUS\", Springer, esp. pp. 100, 461.","code":""},{"path":[]},{"path":"https://bavodc.github.io/actuaRE/reference/ranef.hierCredGLM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Random Effects — ranef.hierCredGLM","text":"","code":"## see the method function documentation"},{"path":"https://bavodc.github.io/actuaRE/reference/ranef.hierCredibility.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Random Effects — ranef.hierCredibility","title":"Extract Random Effects — ranef.hierCredibility","text":"function generic; method functions can written handle   specific classes objects. Classes already methods   function include lmList lme.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/ranef.hierCredibility.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Random Effects — ranef.hierCredibility","text":"","code":"# S3 method for hierCredibility ranef(object, ...)"},{"path":"https://bavodc.github.io/actuaRE/reference/ranef.hierCredibility.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Random Effects — ranef.hierCredibility","text":"object fitted model object random effects    estimates can extracted. ... methods generic function require additional    arguments.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/ranef.hierCredibility.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Random Effects — ranef.hierCredibility","text":"depend method function used; see appropriate documentation.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/ranef.hierCredibility.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Extract Random Effects — ranef.hierCredibility","text":"Pinheiro, J.C., Bates, D.M. (2000) \"Mixed-Effects Models  S S-PLUS\", Springer, esp. pp. 100, 461.","code":""},{"path":[]},{"path":"https://bavodc.github.io/actuaRE/reference/ranef.hierCredibility.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Random Effects — ranef.hierCredibility","text":"","code":"## see the method function documentation"},{"path":"https://bavodc.github.io/actuaRE/reference/ranef.hierCredTweedie.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Random Effects — ranef.hierCredTweedie","title":"Extract Random Effects — ranef.hierCredTweedie","text":"function generic; method functions can written handle   specific classes objects. Classes already methods   function include lmList lme.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/ranef.hierCredTweedie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Random Effects — ranef.hierCredTweedie","text":"","code":"# S3 method for hierCredTweedie ranef(object, ...)"},{"path":"https://bavodc.github.io/actuaRE/reference/ranef.hierCredTweedie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Random Effects — ranef.hierCredTweedie","text":"object fitted model object random effects    estimates can extracted. ... methods generic function require additional    arguments.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/ranef.hierCredTweedie.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Random Effects — ranef.hierCredTweedie","text":"depend method function used; see appropriate documentation.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/ranef.hierCredTweedie.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Extract Random Effects — ranef.hierCredTweedie","text":"Pinheiro, J.C., Bates, D.M. (2000) \"Mixed-Effects Models  S S-PLUS\", Springer, esp. pp. 100, 461.","code":""},{"path":[]},{"path":"https://bavodc.github.io/actuaRE/reference/ranef.hierCredTweedie.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Random Effects — ranef.hierCredTweedie","text":"","code":"## see the method function documentation"},{"path":"https://bavodc.github.io/actuaRE/reference/ranef.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the modes of the random effects — ranef","title":"Extract the modes of the random effects — ranef","text":"generic function extract conditional modes   random effects fitted model object.    linear mixed models conditional modes random   effects also conditional means.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/ranef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the modes of the random effects — ranef","text":"object object class fitted models     random effects.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/ranef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the modes of the random effects — ranef","text":"ranef:         object composed       list data frames, one grouping factor       random effects.  number rows data frame       number levels grouping factor.        number columns dimension random effect       associated level factor.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/ranef.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the modes of the random effects — ranef","text":"grouping factor k levels j random effects   per level ith component list returned   ranef data frame k rows j columns.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/ranef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the modes of the random effects — ranef","text":"","code":"# \\donttest{   library(lattice) ## for dotplot, qqmath   library(lme4)   fm1 <- lmer(Reaction ~ Days + (Days|Subject), sleepstudy)   fm2 <- lmer(Reaction ~ Days + (1|Subject) + (0+Days|Subject), sleepstudy)   fm3 <- lmer(diameter ~ (1|plate) + (1|sample), Penicillin)   ranef(fm1) #> $Subject #>     (Intercept)        Days #> 308   2.2585509   9.1989758 #> 309 -40.3987381  -8.6196806 #> 310 -38.9604090  -5.4488565 #> 330  23.6906196  -4.8143503 #> 331  22.2603126  -3.0699116 #> 332   9.0395679  -0.2721770 #> 333  16.8405086  -0.2236361 #> 334  -7.2326151   1.0745816 #> 335  -0.3336684 -10.7521652 #> 337  34.8904868   8.6282652 #> 349 -25.2102286   1.1734322 #> 350 -13.0700342   6.6142178 #> 351   4.5778642  -3.0152621 #> 352  20.8636782   3.5360011 #> 369   3.2754656   0.8722149 #> 370 -25.6129993   4.8224850 #> 371   0.8070461  -0.9881562 #> 372  12.3145921   1.2840221 #>  #> with conditional variances for \"Subject\"    # }"},{"path":"https://bavodc.github.io/actuaRE/reference/summary.hierCredGLM.html","id":null,"dir":"Reference","previous_headings":"","what":"Object Summaries — summary.hierCredGLM","title":"Object Summaries — summary.hierCredGLM","text":"summary generic function used produce result summaries   results various model fitting functions.  function   invokes particular methods depend   class first argument.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/summary.hierCredGLM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Object Summaries — summary.hierCredGLM","text":"","code":"# S3 method for hierCredGLM summary(object, ...)"},{"path":"https://bavodc.github.io/actuaRE/reference/summary.hierCredGLM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Object Summaries — summary.hierCredGLM","text":"object object summary desired. ... additional arguments affecting summary produced.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/summary.hierCredGLM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Object Summaries — summary.hierCredGLM","text":"form value returned summary depends     class argument.  See documentation particular     methods details produced method. default method returns object class  c(\"summaryDefault\", \"table\") specialized  format print methods.   factor method returns integer vector. matrix data frame methods return matrix class  \"table\", obtained applying summary     column collating results.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/summary.hierCredGLM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Object Summaries — summary.hierCredGLM","text":"factors, frequency first maxsum - 1     frequent levels shown, less frequent levels     summarized \"(Others)\" (resulting maxsum     frequencies). functions summary.lm summary.glm examples     particular methods summarize results produced     lm glm.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/summary.hierCredGLM.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Object Summaries — summary.hierCredGLM","text":"Chambers, J. M. Hastie, T. J. (1992)   Statistical Models S.   Wadsworth & Brooks/Cole.","code":""},{"path":[]},{"path":"https://bavodc.github.io/actuaRE/reference/summary.hierCredGLM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Object Summaries — summary.hierCredGLM","text":"","code":"summary(attenu, digits = 4) #-> summary.data.frame(...), default precision #>      event            mag           station         dist        #>  Min.   : 1.00   Min.   :5.000   117    :  5   Min.   :  0.50   #>  1st Qu.: 9.00   1st Qu.:5.300   1028   :  4   1st Qu.: 11.32   #>  Median :18.00   Median :6.100   113    :  4   Median : 23.40   #>  Mean   :14.74   Mean   :6.084   112    :  3   Mean   : 45.60   #>  3rd Qu.:20.00   3rd Qu.:6.600   135    :  3   3rd Qu.: 47.55   #>  Max.   :23.00   Max.   :7.700   (Other):147   Max.   :370.00   #>                                  NA's   : 16                    #>      accel         #>  Min.   :0.00300   #>  1st Qu.:0.04425   #>  Median :0.11300   #>  Mean   :0.15422   #>  3rd Qu.:0.21925   #>  Max.   :0.81000   #>                    summary(attenu $ station, maxsum = 20) #-> summary.factor(...) #>     117    1028     113     112     135     475    1030    1083    1093    1095  #>       5       4       4       3       3       3       2       2       2       2  #>     111     116    1219    1299     130    1308    1377    1383 (Other)    NA's  #>       2       2       2       2       2       2       2       2     120      16   lst <- unclass(attenu$station) > 20 # logical with NAs ## summary.default() for logicals -- different from *.factor: summary(lst) #>    Mode   FALSE    TRUE    NA's  #> logical      28     138      16  summary(as.factor(lst)) #> FALSE  TRUE  NA's  #>    28   138    16"},{"path":"https://bavodc.github.io/actuaRE/reference/summary.hierCredibility.html","id":null,"dir":"Reference","previous_headings":"","what":"Object Summaries — summary.hierCredibility","title":"Object Summaries — summary.hierCredibility","text":"summary generic function used produce result summaries   results various model fitting functions.  function   invokes particular methods depend   class first argument.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/summary.hierCredibility.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Object Summaries — summary.hierCredibility","text":"","code":"# S3 method for hierCredibility summary(object, ...)"},{"path":"https://bavodc.github.io/actuaRE/reference/summary.hierCredibility.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Object Summaries — summary.hierCredibility","text":"object object summary desired. ... additional arguments affecting summary produced.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/summary.hierCredibility.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Object Summaries — summary.hierCredibility","text":"form value returned summary depends     class argument.  See documentation particular     methods details produced method. default method returns object class  c(\"summaryDefault\", \"table\") specialized  format print methods.   factor method returns integer vector. matrix data frame methods return matrix class  \"table\", obtained applying summary     column collating results.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/summary.hierCredibility.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Object Summaries — summary.hierCredibility","text":"factors, frequency first maxsum - 1     frequent levels shown, less frequent levels     summarized \"(Others)\" (resulting maxsum     frequencies). functions summary.lm summary.glm examples     particular methods summarize results produced     lm glm.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/summary.hierCredibility.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Object Summaries — summary.hierCredibility","text":"Chambers, J. M. Hastie, T. J. (1992)   Statistical Models S.   Wadsworth & Brooks/Cole.","code":""},{"path":[]},{"path":"https://bavodc.github.io/actuaRE/reference/summary.hierCredibility.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Object Summaries — summary.hierCredibility","text":"","code":"summary(attenu, digits = 4) #-> summary.data.frame(...), default precision #>      event            mag           station         dist        #>  Min.   : 1.00   Min.   :5.000   117    :  5   Min.   :  0.50   #>  1st Qu.: 9.00   1st Qu.:5.300   1028   :  4   1st Qu.: 11.32   #>  Median :18.00   Median :6.100   113    :  4   Median : 23.40   #>  Mean   :14.74   Mean   :6.084   112    :  3   Mean   : 45.60   #>  3rd Qu.:20.00   3rd Qu.:6.600   135    :  3   3rd Qu.: 47.55   #>  Max.   :23.00   Max.   :7.700   (Other):147   Max.   :370.00   #>                                  NA's   : 16                    #>      accel         #>  Min.   :0.00300   #>  1st Qu.:0.04425   #>  Median :0.11300   #>  Mean   :0.15422   #>  3rd Qu.:0.21925   #>  Max.   :0.81000   #>                    summary(attenu $ station, maxsum = 20) #-> summary.factor(...) #>     117    1028     113     112     135     475    1030    1083    1093    1095  #>       5       4       4       3       3       3       2       2       2       2  #>     111     116    1219    1299     130    1308    1377    1383 (Other)    NA's  #>       2       2       2       2       2       2       2       2     120      16   lst <- unclass(attenu$station) > 20 # logical with NAs ## summary.default() for logicals -- different from *.factor: summary(lst) #>    Mode   FALSE    TRUE    NA's  #> logical      28     138      16  summary(as.factor(lst)) #> FALSE  TRUE  NA's  #>    28   138    16"},{"path":"https://bavodc.github.io/actuaRE/reference/summary.hierCredTweedie.html","id":null,"dir":"Reference","previous_headings":"","what":"Object Summaries — summary.hierCredTweedie","title":"Object Summaries — summary.hierCredTweedie","text":"summary generic function used produce result summaries   results various model fitting functions.  function   invokes particular methods depend   class first argument.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/summary.hierCredTweedie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Object Summaries — summary.hierCredTweedie","text":"","code":"# S3 method for hierCredTweedie summary(object, ...)"},{"path":"https://bavodc.github.io/actuaRE/reference/summary.hierCredTweedie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Object Summaries — summary.hierCredTweedie","text":"object object summary desired. ... additional arguments affecting summary produced.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/summary.hierCredTweedie.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Object Summaries — summary.hierCredTweedie","text":"form value returned summary depends     class argument.  See documentation particular     methods details produced method. default method returns object class  c(\"summaryDefault\", \"table\") specialized  format print methods.   factor method returns integer vector. matrix data frame methods return matrix class  \"table\", obtained applying summary     column collating results.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/summary.hierCredTweedie.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Object Summaries — summary.hierCredTweedie","text":"factors, frequency first maxsum - 1     frequent levels shown, less frequent levels     summarized \"(Others)\" (resulting maxsum     frequencies). functions summary.lm summary.glm examples     particular methods summarize results produced     lm glm.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/summary.hierCredTweedie.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Object Summaries — summary.hierCredTweedie","text":"Chambers, J. M. Hastie, T. J. (1992)   Statistical Models S.   Wadsworth & Brooks/Cole.","code":""},{"path":[]},{"path":"https://bavodc.github.io/actuaRE/reference/summary.hierCredTweedie.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Object Summaries — summary.hierCredTweedie","text":"","code":"summary(attenu, digits = 4) #-> summary.data.frame(...), default precision #>      event            mag           station         dist        #>  Min.   : 1.00   Min.   :5.000   117    :  5   Min.   :  0.50   #>  1st Qu.: 9.00   1st Qu.:5.300   1028   :  4   1st Qu.: 11.32   #>  Median :18.00   Median :6.100   113    :  4   Median : 23.40   #>  Mean   :14.74   Mean   :6.084   112    :  3   Mean   : 45.60   #>  3rd Qu.:20.00   3rd Qu.:6.600   135    :  3   3rd Qu.: 47.55   #>  Max.   :23.00   Max.   :7.700   (Other):147   Max.   :370.00   #>                                  NA's   : 16                    #>      accel         #>  Min.   :0.00300   #>  1st Qu.:0.04425   #>  Median :0.11300   #>  Mean   :0.15422   #>  3rd Qu.:0.21925   #>  Max.   :0.81000   #>                    summary(attenu $ station, maxsum = 20) #-> summary.factor(...) #>     117    1028     113     112     135     475    1030    1083    1093    1095  #>       5       4       4       3       3       3       2       2       2       2  #>     111     116    1219    1299     130    1308    1377    1383 (Other)    NA's  #>       2       2       2       2       2       2       2       2     120      16   lst <- unclass(attenu$station) > 20 # logical with NAs ## summary.default() for logicals -- different from *.factor: summary(lst) #>    Mode   FALSE    TRUE    NA's  #> logical      28     138      16  summary(as.factor(lst)) #> FALSE  TRUE  NA's  #>    28   138    16"},{"path":"https://bavodc.github.io/actuaRE/reference/tweedieGLMM.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitting a Tweedie GLMM, using the initial estimates of hierCredTweedie — tweedieGLMM","title":"Fitting a Tweedie GLMM, using the initial estimates of hierCredTweedie — tweedieGLMM","text":"function first estimates random effects model using Ohlsson's GLMC algorithm (Ohlsson, 2008) uses estimates initial estimates fitting Tweedie GLMM.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/tweedieGLMM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitting a Tweedie GLMM, using the initial estimates of hierCredTweedie — tweedieGLMM","text":"","code":"tweedieGLMM(   formula,   data,   weights,   muHatGLM = FALSE,   epsilon = 1e-04,   maxiter = 500,   verbose = FALSE,   balanceProperty = TRUE )"},{"path":"https://bavodc.github.io/actuaRE/reference/tweedieGLMM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitting a Tweedie GLMM, using the initial estimates of hierCredTweedie — tweedieGLMM","text":"formula object type formula specifies model fitted. Syntax lmer glmer. example, Yijkt ~ x1 + x2 + (1 | Industry / Branch). data object coercible .data.table, containing variables model. weights variable name exposure weight. muHatGLM indicates estimate used algorithm intercept term. Default TRUE, used intercept estimated GLM. FALSE, estimate hierarchical credibility model used. epsilon positive convergence tolerance \\(\\epsilon\\); iterations converge \\(||\\theta[k] - \\theta[k - 1]||^2[[2]]/||\\theta[k - 1]||^2[[2]] < \\epsilon\\). , \\(\\theta[k]\\) parameter vector \\(k^{th}\\) iteration. maxiter maximum number iterations. verbose logical indicating output produced algorithm. balanceProperty logical indicating balance property satisfied.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/tweedieGLMM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitting a Tweedie GLMM, using the initial estimates of hierCredTweedie — tweedieGLMM","text":"object class cpglmm, containing model fit.","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/tweedieGLMM.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fitting a Tweedie GLMM, using the initial estimates of hierCredTweedie — tweedieGLMM","text":"Campo, B.D.C. Antonio, Katrien (2023). Insurance pricing hierarchically structured data illustration workers' compensation insurance portfolio. Scandinavian Actuarial Journal, doi: 10.1080/03461238.2022.2161413","code":""},{"path":[]},{"path":"https://bavodc.github.io/actuaRE/reference/tweedieGLMM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitting a Tweedie GLMM, using the initial estimates of hierCredTweedie — tweedieGLMM","text":"","code":"# \\donttest{ data(\"dataCar\") fitTweedieGLMM = tweedieGLMM(Y ~ area + gender + (1 | VehicleType / VehicleBody), dataCar,  weights = w, verbose = TRUE, epsilon = 1e-4) #>  #> Running algorithm. #> Iteration 2 : relative difference = 0.01198359  #> Time since last iteration =  0.76 minutes #> Iteration 4 : relative difference = 0.0004060773  #> Time since last iteration =  0.71 minutes #> Iteration 6 : relative difference = 0.000141105  #> Time since last iteration =  0.58 minutesnpt = 13 , n =  11  #> rhobeg =  0.02 , rhoend =  2e-07  #> start par. =  0.01884697 0.008884546 5.572251 0.04614902 0.07811754 -0.1745169 0.1308259 0.470929 0.1296667 5.166572 1.570256 fn =  116872.4  #>   4:     116873.84: 0.0200000 0.0200000  5.59225 0.0461490 0.0781175 -0.174517 0.130826 0.470929 0.129667  5.16657  1.57026 #>   8:     116873.95: 0.0200000 0.0200000  5.57225 0.0461490 0.0781175 -0.174517 0.150826 0.470929 0.129667  5.16657  1.57026 #>  12:     116926.78: 0.0200000 0.0200000  5.57225 0.0461490 0.0781175 -0.174517 0.130826 0.470929 0.129667  5.16657  1.59026 #> rho:   0.0020 eval:  14 fn:            116874. par:0.0200000 0.0200000  5.59225 0.0461490 0.0781175 -0.174517 0.130826 0.470929 0.129667  5.16657  1.57026  #>  16:     116874.86: 0.0228284 0.0199991  5.59225 0.0461481 0.0781166 -0.174518 0.130825 0.470928 0.129666  5.16657  1.57026 #>  20:     116871.47: 0.0124743 0.0186940  5.58996 0.0448295 0.0767979 -0.173634 0.129505 0.469609 0.128347  5.16527  1.57041 #>  24:     116871.75: 0.0103787 0.0181508  5.58717 0.0442890 0.0762573 -0.171601 0.128964 0.469067 0.127807  5.16678  1.56792 #>  28:     116870.89: 0.0109906 0.0155422  5.58740 0.0433413 0.0753093 -0.170769 0.128015 0.470323 0.126860  5.16654  1.57102 #>  32:     116870.65: 0.0115301 0.0138249  5.58896 0.0429046 0.0748722 -0.168981 0.127576 0.467960 0.128726  5.16541  1.57095 #>  36:     116870.37: 0.0117037 0.0119178  5.58849 0.0452069 0.0741214 -0.169431 0.126837 0.468219 0.127605  5.16805  1.56987 #>  40:     116869.87: 0.00893832 0.0100827  5.58968 0.0455837 0.0759963 -0.170412 0.125775 0.468798 0.128049  5.16811  1.57041 #> rho:  0.00020 eval:  41 fn:            116870. par:0.00893832 0.0100827  5.58968 0.0455837 0.0759963 -0.170412 0.125775 0.468798 0.128049  5.16811  1.57041  #>  44:     116869.84: 0.0108295 0.00728084  5.58712 0.0463768 0.0782218 -0.174372 0.126918 0.468728 0.127569  5.16682  1.56942 #>  48:     116869.68: 0.00861402 0.00887443  5.58972 0.0445633 0.0767621 -0.172610 0.126718 0.469403 0.127580  5.16577  1.57043 #>  52:     116869.62: 0.00889729 0.00817495  5.58966 0.0449332 0.0766395 -0.171871 0.127843 0.469353 0.127780  5.16611  1.57048 #>  56:     116869.59: 0.00914491 0.00770412  5.58864 0.0438353 0.0770372 -0.170727 0.129385 0.469482 0.128854  5.16611  1.57018 #>  60:     116869.60: 0.00933707 0.00780045  5.58905 0.0440232 0.0774136 -0.170444 0.128788 0.468679 0.128345  5.16595  1.57016 #>  64:     116869.55: 0.00888243 0.00632592  5.58893 0.0450432 0.0772165 -0.170511 0.128852 0.468979 0.128649  5.16554  1.57012 #>  68:     116869.53: 0.00850519 0.00661506  5.59003 0.0439861 0.0771209 -0.170440 0.128728 0.469507 0.128602  5.16564  1.57048 #>  72:     116869.53: 0.00856526 0.00669558  5.58981 0.0442831 0.0773209 -0.170361 0.128735 0.469552 0.128910  5.16549  1.57041 #> rho:  2.0e-05 eval:  72 fn:            116870. par:0.00852137 0.00666802  5.58983 0.0443153 0.0772837 -0.170471 0.128793 0.469470 0.128824  5.16556  1.57040  #>  76:     116869.53: 0.00862148 0.00650746  5.58990 0.0442612 0.0773302 -0.170474 0.128876 0.469397 0.128772  5.16584  1.57040 #>  80:     116869.52: 0.00860420 0.00656013  5.58984 0.0442756 0.0772434 -0.170475 0.128908 0.469490 0.128756  5.16577  1.57028 #>  84:     116869.52: 0.00848988 0.00635068  5.58994 0.0442538 0.0772345 -0.170412 0.128954 0.469468 0.128705  5.16574  1.57034 #>  88:     116869.52: 0.00842080 0.00652253  5.59026 0.0440785 0.0773993 -0.170525 0.129065 0.469552 0.128839  5.16573  1.57037 #>  92:     116869.52: 0.00841711 0.00642350  5.59042 0.0437655 0.0775772 -0.170640 0.128948 0.469679 0.128868  5.16575  1.57042 #>  96:     116869.52: 0.00847991 0.00652761  5.59056 0.0439042 0.0773774 -0.170612 0.128877 0.469599 0.128729  5.16593  1.57036 #> 100:     116869.52: 0.00851601 0.00655345  5.59052 0.0438967 0.0775026 -0.170521 0.128871 0.469578 0.128801  5.16583  1.57037 #> 104:     116869.52: 0.00850764 0.00651517  5.59052 0.0438992 0.0774643 -0.170513 0.128891 0.469616 0.128798  5.16579  1.57031 #> 108:     116869.52: 0.00850763 0.00648988  5.59057 0.0438981 0.0775165 -0.170527 0.128918 0.469619 0.128821  5.16581  1.57029 #> 112:     116869.52: 0.00851517 0.00642632  5.59069 0.0438215 0.0776171 -0.170584 0.129020 0.469667 0.128878  5.16585  1.57034 #> 116:     116869.52: 0.00839978 0.00644212  5.59083 0.0437144 0.0776796 -0.170493 0.128912 0.469629 0.128825  5.16588  1.57032 #> 120:     116869.51: 0.00851571 0.00643676  5.59082 0.0438191 0.0778866 -0.170571 0.129000 0.469525 0.128803  5.16595  1.57029 #> 124:     116869.51: 0.00848550 0.00639477  5.59096 0.0438952 0.0779450 -0.170567 0.129133 0.469277 0.128823  5.16604  1.57033 #> 128:     116869.51: 0.00851418 0.00641326  5.59118 0.0437638 0.0779270 -0.170636 0.129344 0.469286 0.128848  5.16611  1.57029 #> 132:     116869.51: 0.00851730 0.00644778  5.59122 0.0437674 0.0778539 -0.170634 0.129299 0.469288 0.128846  5.16613  1.57023 #> 136:     116869.51: 0.00849703 0.00647107  5.59122 0.0437907 0.0778771 -0.170653 0.129303 0.469294 0.128848  5.16613  1.57022 #> 140:     116869.51: 0.00848956 0.00648382  5.59128 0.0437828 0.0778893 -0.170678 0.129323 0.469288 0.128873  5.16616  1.57024 #> 144:     116869.51: 0.00847901 0.00650526  5.59148 0.0438356 0.0779763 -0.170741 0.129418 0.469102 0.128898  5.16628  1.57026 #> 148:     116869.51: 0.00849330 0.00652020  5.59184 0.0438474 0.0780650 -0.170857 0.129630 0.468928 0.128894  5.16644  1.57030 #> 152:     116869.51: 0.00849572 0.00648656  5.59183 0.0438555 0.0781459 -0.170895 0.129629 0.468959 0.128844  5.16647  1.57025 #> 156:     116869.50: 0.00850193 0.00646350  5.59184 0.0438603 0.0781803 -0.170877 0.129655 0.468932 0.128856  5.16644  1.57017 #> 160:     116869.50: 0.00849103 0.00646158  5.59185 0.0438687 0.0781831 -0.170875 0.129664 0.468934 0.128876  5.16643  1.57016 #> 164:     116869.50: 0.00852794 0.00643229  5.59185 0.0439104 0.0782256 -0.170819 0.129688 0.468842 0.128931  5.16648  1.57016 #> 168:     116869.50: 0.00840372 0.00651080  5.59206 0.0443871 0.0783770 -0.170608 0.129719 0.467967 0.128653  5.16651  1.57021 #> 172:     116869.50: 0.00842841 0.00652841  5.59215 0.0443947 0.0783466 -0.170667 0.129702 0.467947 0.128719  5.16647  1.57025 #> 176:     116869.50: 0.00848066 0.00645434  5.59219 0.0443660 0.0783902 -0.170675 0.129725 0.467996 0.128634  5.16650  1.57021 #> 180:     116869.50: 0.00853177 0.00645126  5.59222 0.0443794 0.0783947 -0.170668 0.129731 0.467967 0.128631  5.16650  1.57015 #> 184:     116869.50: 0.00855666 0.00643940  5.59229 0.0446276 0.0784738 -0.170643 0.129682 0.467469 0.128591  5.16661  1.57015 #> 188:     116869.50: 0.00853061 0.00648992  5.59236 0.0446267 0.0785646 -0.170589 0.129797 0.467385 0.128525  5.16660  1.57017 #> 192:     116869.50: 0.00847835 0.00655631  5.59246 0.0445505 0.0786701 -0.170493 0.129865 0.467390 0.128507  5.16652  1.57018 #> 196:     116869.50: 0.00848792 0.00655913  5.59249 0.0445986 0.0786641 -0.170481 0.129894 0.467406 0.128564  5.16653  1.57019 #> 200:     116869.50: 0.00854307 0.00650989  5.59256 0.0450465 0.0786368 -0.170490 0.129834 0.466792 0.128457  5.16670  1.57020 #> 204:     116869.50: 0.00865253 0.00648477  5.59254 0.0448768 0.0787339 -0.170481 0.129800 0.467009 0.128561  5.16658  1.57018 #> 208:     116869.50: 0.00853575 0.00643297  5.59257 0.0449613 0.0786036 -0.170488 0.129795 0.467012 0.128539  5.16652  1.57014 #> 212:     116869.50: 0.00845860 0.00647889  5.59271 0.0449712 0.0787097 -0.170438 0.129842 0.466984 0.128568  5.16650  1.57016 #> 216:     116869.49: 0.00843752 0.00636896  5.59277 0.0451415 0.0794278 -0.170495 0.129679 0.465515 0.128842  5.16710  1.57005 #> 220:     116869.50: 0.00839159 0.00646491  5.59284 0.0452368 0.0792513 -0.170373 0.129817 0.465729 0.128891  5.16689  1.57022 #> 224:     116869.49: 0.00849609 0.00642179  5.59291 0.0452033 0.0791878 -0.170517 0.129848 0.465708 0.128770  5.16696  1.57009 #> 228:     116869.49: 0.00849735 0.00645793  5.59301 0.0452392 0.0793190 -0.170455 0.129839 0.465692 0.128826  5.16689  1.57010 #> 232:     116869.49: 0.00846707 0.00650793  5.59313 0.0452851 0.0796511 -0.170329 0.129946 0.465210 0.128772  5.16691  1.57008 #> 236:     116869.49: 0.00852275 0.00645643  5.59318 0.0453312 0.0795917 -0.170293 0.129906 0.465243 0.128863  5.16696  1.57009 #> 240:     116869.49: 0.00850127 0.00644116  5.59320 0.0453639 0.0795853 -0.170263 0.129947 0.465234 0.128879  5.16692  1.57008 #> 244:     116869.49: 0.00847111 0.00649938  5.59327 0.0453779 0.0795398 -0.170269 0.130090 0.465411 0.128850  5.16683  1.57009 #> 248:     116869.49: 0.00848673 0.00653022  5.59345 0.0455042 0.0798117 -0.170240 0.130115 0.464881 0.128893  5.16694  1.57008 #> 252:     116869.49: 0.00851724 0.00645434  5.59350 0.0455321 0.0799191 -0.170259 0.130115 0.464778 0.128855  5.16707  1.57006 #> 256:     116869.49: 0.00850415 0.00648146  5.59346 0.0455298 0.0799727 -0.170278 0.130098 0.464809 0.128921  5.16706  1.57005 #> 260:     116869.49: 0.00852532 0.00643157  5.59351 0.0454961 0.0798646 -0.170346 0.130055 0.464853 0.128880  5.16703  1.57007 #> 264:     116869.49: 0.00848276 0.00650792  5.59369 0.0455602 0.0799667 -0.170275 0.130196 0.464828 0.128917  5.16694  1.57010 #> 268:     116869.49: 0.00847552 0.00655103  5.59387 0.0457420 0.0801497 -0.170202 0.130323 0.464369 0.128841  5.16701  1.57011 #> 272:     116869.49: 0.00848273 0.00656019  5.59383 0.0457332 0.0801276 -0.170217 0.130372 0.464347 0.128853  5.16697  1.57010 #> 276:     116869.49: 0.00852189 0.00642109  5.59386 0.0456477 0.0800991 -0.170168 0.130351 0.464347 0.128989  5.16707  1.57009 #> 280:     116869.49: 0.00853879 0.00643245  5.59386 0.0456522 0.0801177 -0.170124 0.130397 0.464378 0.128967  5.16706  1.57005 #> 284:     116869.49: 0.00854574 0.00644035  5.59383 0.0456380 0.0801155 -0.170125 0.130392 0.464370 0.128962  5.16708  1.57005 #> 288:     116869.48: 0.00847059 0.00650707  5.59415 0.0458537 0.0802090 -0.170047 0.130539 0.464261 0.128941  5.16691  1.57010 #> 292:     116869.48: 0.00845186 0.00647521  5.59432 0.0460120 0.0802895 -0.169968 0.130608 0.463882 0.128787  5.16694  1.57011 #> 296:     116869.48: 0.00846108 0.00646816  5.59433 0.0460625 0.0803629 -0.169974 0.130610 0.463813 0.128801  5.16695  1.57007 #> 300:     116869.48: 0.00845093 0.00647370  5.59432 0.0460629 0.0803601 -0.169980 0.130617 0.463808 0.128798  5.16694  1.57007 #> 304:     116869.48: 0.00851120 0.00644274  5.59438 0.0460777 0.0803634 -0.169968 0.130618 0.463828 0.128822  5.16694  1.57007 #> 308:     116869.48: 0.00853357 0.00646039  5.59471 0.0464510 0.0804851 -0.169774 0.130778 0.463371 0.128803  5.16696  1.57014 #> 312:     116869.48: 0.00853040 0.00647500  5.59474 0.0462754 0.0804882 -0.169837 0.130795 0.463605 0.128782  5.16680  1.57010 #> 316:     116869.48: 0.00851701 0.00645461  5.59495 0.0463460 0.0805473 -0.169707 0.131018 0.463485 0.128737  5.16686  1.57012 #> 320:     116869.48: 0.00850384 0.00643577  5.59499 0.0463712 0.0805578 -0.169694 0.130991 0.463427 0.128724  5.16687  1.57013 #> 324:     116869.48: 0.00852266 0.00643840  5.59500 0.0463875 0.0805514 -0.169681 0.130969 0.463438 0.128727  5.16688  1.57009 #> 328:     116869.48: 0.00852635 0.00642057  5.59501 0.0463957 0.0805276 -0.169688 0.130977 0.463436 0.128742  5.16686  1.57008 #> 332:     116869.48: 0.00848969 0.00643776  5.59531 0.0463718 0.0806615 -0.169586 0.131193 0.463410 0.128705  5.16672  1.57012 #> 336:     116869.48: 0.00850258 0.00653951  5.59565 0.0465817 0.0811843 -0.169441 0.131506 0.462831 0.128574  5.16669  1.57016 #> 340:     116869.48: 0.00849359 0.00641846  5.59569 0.0464970 0.0809446 -0.169477 0.131552 0.462805 0.128667  5.16674  1.57015 #> 344:     116869.48: 0.00853165 0.00643395  5.59570 0.0464874 0.0809434 -0.169438 0.131554 0.462849 0.128670  5.16678  1.57016 #> 348:     116869.48: 0.00853233 0.00643127  5.59573 0.0464866 0.0809582 -0.169431 0.131553 0.462850 0.128673  5.16674  1.57011 #> 352:     116869.47: 0.00848646 0.00640751  5.59640 0.0465040 0.0813827 -0.169192 0.132035 0.462354 0.128576  5.16664  1.57016 #> 356:     116869.48: 0.00859104 0.00631148  5.59697 0.0465654 0.0819811 -0.168959 0.132549 0.461579 0.128626  5.16668  1.57040 #> 360:     116869.47: 0.00849171 0.00644528  5.59700 0.0465540 0.0819631 -0.168980 0.132623 0.461593 0.128582  5.16677  1.57019 #> 364:     116869.47: 0.00853432 0.00641625  5.59705 0.0465600 0.0819322 -0.168967 0.132614 0.461596 0.128569  5.16672  1.57010 #> 368:     116869.47: 0.00852659 0.00640927  5.59704 0.0465585 0.0819114 -0.168973 0.132606 0.461587 0.128559  5.16673  1.57009 #> 372:     116869.47: 0.00858081 0.00636661  5.59719 0.0465799 0.0818582 -0.168878 0.132717 0.461725 0.128621  5.16672  1.57014 #> 376:     116869.47: 0.00849405 0.00653312  5.59771 0.0465920 0.0815624 -0.168618 0.133218 0.462591 0.128536  5.16645  1.57025 #> 380:     116869.47: 0.00850753 0.00642744  5.59782 0.0464020 0.0817053 -0.168689 0.133340 0.462398 0.128533  5.16653  1.57023 #> 384:     116869.47: 0.00850333 0.00641531  5.59782 0.0463535 0.0817166 -0.168666 0.133303 0.462444 0.128484  5.16650  1.57022 #> 388:     116869.47: 0.00856675 0.00638294  5.59783 0.0463674 0.0817043 -0.168628 0.133304 0.462451 0.128521  5.16650  1.57016 #> 392:     116869.47: 0.00858063 0.00636436  5.59794 0.0462370 0.0817868 -0.168578 0.133444 0.462541 0.128649  5.16649  1.57015 #> 396:     116869.46: 0.00848031 0.00642694  5.59850 0.0460739 0.0817299 -0.168468 0.133961 0.463160 0.128739  5.16628  1.57018 #> 400:     116869.46: 0.00848180 0.00635060  5.59887 0.0460725 0.0815258 -0.168598 0.134099 0.463207 0.128741  5.16642  1.57024 #> 404:     116869.46: 0.00845020 0.00643634  5.59966 0.0456623 0.0815134 -0.168466 0.134872 0.464026 0.128998  5.16624  1.57031 #> 408:     116869.46: 0.00852877 0.00658857  5.59948 0.0456343 0.0813860 -0.168523 0.134645 0.463713 0.128906  5.16624  1.57025 #> 412:     116869.46: 0.00852789 0.00639913  5.59940 0.0457004 0.0814218 -0.168546 0.134767 0.463733 0.128832  5.16620  1.57019 #> 416:     116869.46: 0.00857602 0.00637553  5.59939 0.0456642 0.0815066 -0.168599 0.134711 0.463750 0.128908  5.16620  1.57023 #> 420:     116869.46: 0.00861252 0.00631690  5.59967 0.0456849 0.0812923 -0.168745 0.134867 0.463847 0.128929  5.16640  1.57023 #> 424:     116869.46: 0.00861756 0.00623487  5.60004 0.0454092 0.0813671 -0.168785 0.135205 0.463947 0.129068  5.16652  1.57024 #> 428:     116869.46: 0.00860383 0.00627522  5.59986 0.0455623 0.0811572 -0.168682 0.135074 0.464129 0.129053  5.16645  1.57019 #> 432:     116869.46: 0.00860662 0.00633550  5.59994 0.0455738 0.0812068 -0.168721 0.135026 0.464134 0.129107  5.16640  1.57019 #> 436:     116869.46: 0.00861209 0.00630263  5.60015 0.0455471 0.0810657 -0.168802 0.135152 0.464296 0.129132  5.16644  1.57021 #> 440:     116869.46: 0.00858317 0.00640482  5.60025 0.0455714 0.0809688 -0.168725 0.135271 0.464517 0.129042  5.16630  1.57021 #> 444:     116869.46: 0.00863146 0.00633988  5.60033 0.0454505 0.0809603 -0.168769 0.135299 0.464391 0.129162  5.16646  1.57018 #> 448:     116869.46: 0.00862419 0.00632769  5.60036 0.0454758 0.0810108 -0.168790 0.135313 0.464431 0.129160  5.16645  1.57017 #> 452:     116869.46: 0.00861491 0.00633603  5.60079 0.0454134 0.0808730 -0.168819 0.135584 0.464780 0.129257  5.16641  1.57022 #> 456:     116869.45: 0.00858853 0.00636436  5.60105 0.0453120 0.0807198 -0.168998 0.135779 0.465079 0.129337  5.16647  1.57022 #> 460:     116869.45: 0.00862325 0.00641273  5.60115 0.0452213 0.0806832 -0.169022 0.135959 0.465206 0.129332  5.16646  1.57020 #> 464:     116869.45: 0.00864343 0.00628796  5.60120 0.0452169 0.0806883 -0.169073 0.135917 0.465192 0.129350  5.16640  1.57017 #> 468:     116869.45: 0.00865811 0.00631772  5.60139 0.0452638 0.0807755 -0.169065 0.135981 0.465115 0.129310  5.16647  1.57019 #> 472:     116869.45: 0.00864466 0.00631833  5.60181 0.0451739 0.0805426 -0.169226 0.136291 0.465485 0.129380  5.16652  1.57022 #> 476:     116869.45: 0.00867189 0.00636209  5.60183 0.0451121 0.0804838 -0.169224 0.136328 0.465596 0.129459  5.16652  1.57017 #> 480:     116869.45: 0.00867462 0.00632041  5.60179 0.0451393 0.0804868 -0.169215 0.136323 0.465630 0.129411  5.16654  1.57015 #> 484:     116869.45: 0.00864805 0.00631029  5.60177 0.0451404 0.0804940 -0.169231 0.136316 0.465624 0.129437  5.16655  1.57014 #> 488:     116869.45: 0.00864787 0.00633871  5.60177 0.0453361 0.0803761 -0.169235 0.136182 0.465593 0.129379  5.16652  1.57016 #> 492:     116869.45: 0.00865843 0.00632717  5.60210 0.0452448 0.0802092 -0.169417 0.136448 0.465837 0.129415  5.16662  1.57018 #> 496:     116869.45: 0.00868618 0.00628572  5.60220 0.0452011 0.0802930 -0.169474 0.136571 0.465763 0.129418  5.16662  1.57015 #> 500:     116869.45: 0.00864195 0.00625777  5.60218 0.0451926 0.0802695 -0.169473 0.136592 0.465749 0.129441  5.16664  1.57014 #> 504:     116869.45: 0.00865490 0.00631133  5.60227 0.0452068 0.0802953 -0.169466 0.136578 0.465849 0.129436  5.16662  1.57013 #> 508:     116869.45: 0.00867068 0.00631261  5.60231 0.0452432 0.0802293 -0.169510 0.136588 0.465932 0.129451  5.16666  1.57013 #> 512:     116869.45: 0.00867531 0.00632348  5.60279 0.0451507 0.0799185 -0.169843 0.136864 0.466437 0.129484  5.16679  1.57014 #> 516:     116869.45: 0.00870426 0.00628399  5.60283 0.0451373 0.0798922 -0.169806 0.136854 0.466431 0.129488  5.16672  1.57018 #> 520:     116869.45: 0.00865982 0.00626819  5.60281 0.0451285 0.0798764 -0.169864 0.136840 0.466400 0.129463  5.16674  1.57010 #> 524:     116869.45: 0.00866632 0.00629853  5.60285 0.0451707 0.0798997 -0.169829 0.136825 0.466413 0.129486  5.16672  1.57011 #> 528:     116869.45: 0.00868068 0.00629712  5.60297 0.0451873 0.0799588 -0.169855 0.136882 0.466362 0.129484  5.16674  1.57011 #> 532:     116869.45: 0.00867912 0.00630137  5.60303 0.0452424 0.0799463 -0.169875 0.136894 0.466307 0.129432  5.16676  1.57012 #> 536:     116869.45: 0.00865412 0.00631826  5.60319 0.0453445 0.0798457 -0.169957 0.136820 0.466319 0.129277  5.16672  1.57016 #> 540:     116869.45: 0.00867917 0.00625958  5.60324 0.0451988 0.0798720 -0.170069 0.136915 0.466465 0.129386  5.16676  1.57013 #> 544:     116869.45: 0.00864125 0.00630861  5.60336 0.0454690 0.0798123 -0.170075 0.136792 0.466460 0.129233  5.16660  1.57017 #> 548:     116869.45: 0.00863691 0.00632235  5.60340 0.0457481 0.0797478 -0.170224 0.136919 0.466586 0.129038  5.16680  1.57018 #> 552:     116869.45: 0.00866255 0.00630879  5.60350 0.0456528 0.0795889 -0.170115 0.136816 0.466599 0.129115  5.16665  1.57014 #> 556:     116869.45: 0.00866829 0.00629632  5.60349 0.0456508 0.0796117 -0.170109 0.136809 0.466558 0.129069  5.16668  1.57012 #> 560:     116869.45: 0.00867282 0.00628854  5.60352 0.0456739 0.0796429 -0.170136 0.136773 0.466554 0.129066  5.16667  1.57013 #> 564:     116869.45: 0.00864035 0.00633487  5.60381 0.0459508 0.0795108 -0.170244 0.136702 0.466543 0.128812  5.16659  1.57019 #> 568:     116869.45: 0.00865973 0.00634638  5.60398 0.0460445 0.0793827 -0.170246 0.136622 0.466494 0.128736  5.16646  1.57020 #> 572:     116869.45: 0.00866802 0.00634929  5.60407 0.0461364 0.0793318 -0.170327 0.136580 0.466600 0.128689  5.16644  1.57020 #> 576:     116869.44: 0.00858973 0.00633715  5.60428 0.0461573 0.0793026 -0.170352 0.136520 0.466611 0.128557  5.16636  1.57021 #> 580:     116869.44: 0.00865303 0.00629320  5.60430 0.0461453 0.0793673 -0.170365 0.136663 0.466585 0.128458  5.16642  1.57018 #> 584:     116869.44: 0.00868573 0.00630848  5.60444 0.0461060 0.0793050 -0.170436 0.136746 0.466780 0.128579  5.16649  1.57017 #> 588:     116869.44: 0.00867567 0.00631496  5.60442 0.0461230 0.0793802 -0.170377 0.136653 0.466669 0.128533  5.16649  1.57016 #> 592:     116869.44: 0.00867482 0.00633399  5.60499 0.0462191 0.0792536 -0.170466 0.136748 0.466855 0.128386  5.16638  1.57023 #> 596:     116869.44: 0.00865094 0.00626087  5.60498 0.0462291 0.0791847 -0.170465 0.136704 0.466860 0.128382  5.16637  1.57021 #> 600:     116869.44: 0.00866915 0.00626468  5.60499 0.0462481 0.0791934 -0.170498 0.136752 0.466878 0.128375  5.16638  1.57018 #> 604:     116869.44: 0.00869453 0.00627316  5.60505 0.0462107 0.0792056 -0.170503 0.136733 0.466913 0.128425  5.16645  1.57017 #> 608:     116869.44: 0.00871457 0.00629343  5.60560 0.0461676 0.0789272 -0.170799 0.137008 0.467467 0.128424  5.16650  1.57019 #> 612:     116869.44: 0.00868786 0.00632609  5.60543 0.0461662 0.0790712 -0.170730 0.136981 0.467242 0.128418  5.16651  1.57016 #> 616:     116869.44: 0.00868650 0.00628789  5.60546 0.0461221 0.0790573 -0.170705 0.136926 0.467243 0.128417  5.16650  1.57016 #> 620:     116869.44: 0.00868941 0.00627541  5.60547 0.0461194 0.0790685 -0.170719 0.136913 0.467242 0.128427  5.16651  1.57015 #> 624:     116869.44: 0.00865883 0.00627780  5.60575 0.0463292 0.0791395 -0.170833 0.136898 0.467023 0.128133  5.16644  1.57019 #> 628:     116869.44: 0.00867314 0.00632264  5.60590 0.0463924 0.0790169 -0.171028 0.136951 0.467151 0.128040  5.16655  1.57018 #> 632:     116869.44: 0.00871331 0.00630055  5.60589 0.0464335 0.0790952 -0.170926 0.136991 0.467121 0.128054  5.16656  1.57016 #> 636:     116869.44: 0.00867808 0.00628682  5.60599 0.0464089 0.0790701 -0.170927 0.136966 0.467191 0.128042  5.16656  1.57016 #> 640:     116869.44: 0.00867576 0.00630625  5.60642 0.0465532 0.0790525 -0.171116 0.137068 0.467227 0.127810  5.16657  1.57020 #> 644:     116869.44: 0.00869569 0.00628465  5.60620 0.0463860 0.0791403 -0.171007 0.136988 0.467148 0.127920  5.16660  1.57018 #> 648:     116869.44: 0.00869489 0.00628041  5.60620 0.0463905 0.0791865 -0.171003 0.136991 0.467164 0.127921  5.16655  1.57015 #> 652:     116869.44: 0.00867888 0.00627754  5.60623 0.0463927 0.0791953 -0.171006 0.136983 0.467163 0.127918  5.16656  1.57014 #> 656:     116869.44: 0.00868524 0.00627577  5.60631 0.0464094 0.0792229 -0.170999 0.137000 0.467147 0.127892  5.16655  1.57014 #> 660:     116869.44: 0.00869377 0.00632822  5.60651 0.0464695 0.0792890 -0.171008 0.137016 0.467139 0.127854  5.16649  1.57019 #> 664:     116869.44: 0.00868814 0.00632104  5.60662 0.0465005 0.0792763 -0.171035 0.137027 0.467123 0.127754  5.16654  1.57015 #> 668:     116869.44: 0.00869689 0.00630848  5.60662 0.0465038 0.0792781 -0.171038 0.137028 0.467148 0.127756  5.16657  1.57015 #> 672:     116869.44: 0.00870751 0.00627757  5.60664 0.0464843 0.0793187 -0.171045 0.137030 0.467157 0.127773  5.16657  1.57014 #> 676:     116869.44: 0.00868201 0.00626413  5.60723 0.0464797 0.0796337 -0.171105 0.137193 0.466924 0.127448  5.16644  1.57019 #> 680:     116869.44: 0.00868524 0.00626231  5.60734 0.0464318 0.0797683 -0.171126 0.137171 0.466854 0.127350  5.16634  1.57019 #> 684:     116869.44: 0.00872882 0.00630773  5.60771 0.0463030 0.0797930 -0.171179 0.137344 0.466969 0.127189  5.16636  1.57024 #> 688:     116869.44: 0.00869239 0.00628005  5.60830 0.0463116 0.0799188 -0.171301 0.137539 0.467156 0.127101  5.16628  1.57022 #> 692:     116869.44: 0.00869865 0.00630493  5.60831 0.0463129 0.0799088 -0.171303 0.137548 0.467142 0.127105  5.16629  1.57020 #> 696:     116869.44: 0.00873423 0.00626882  5.60832 0.0462932 0.0799123 -0.171281 0.137511 0.467146 0.127114  5.16632  1.57019 #> 700:     116869.44: 0.00872636 0.00623514  5.60834 0.0462633 0.0800085 -0.171289 0.137489 0.467163 0.127201  5.16633  1.57017 #> 704:     116869.44: 0.00873045 0.00623950  5.60835 0.0462897 0.0800115 -0.171305 0.137475 0.467144 0.127167  5.16636  1.57018 #> 708:     116869.44: 0.00871625 0.00624457  5.60853 0.0463188 0.0800540 -0.171367 0.137540 0.467193 0.127069  5.16636  1.57019 #> 712:     116869.44: 0.00871982 0.00628007  5.60860 0.0462937 0.0800571 -0.171380 0.137552 0.467219 0.127081  5.16633  1.57017 #> 716:     116869.44: 0.00873017 0.00626925  5.60862 0.0463008 0.0800515 -0.171351 0.137521 0.467223 0.127078  5.16637  1.57018 #> 720:     116869.44: 0.00874480 0.00624892  5.60867 0.0462779 0.0800189 -0.171262 0.137433 0.467251 0.127084  5.16636  1.57019 #> 724:     116869.44: 0.00872749 0.00623720  5.60868 0.0462706 0.0800283 -0.171250 0.137411 0.467269 0.127148  5.16638  1.57018 #> 728:     116869.44: 0.00872095 0.00626146  5.60865 0.0462595 0.0799928 -0.171234 0.137431 0.467297 0.127186  5.16643  1.57018 #> 732:     116869.44: 0.00873644 0.00626103  5.60867 0.0462501 0.0800030 -0.171244 0.137422 0.467305 0.127174  5.16642  1.57017 #> rho:  2.0e-06 eval: 733 fn:      116869. par:0.00873644 0.00626103  5.60867 0.0462501 0.0800030 -0.171244 0.137422 0.467305 0.127174  5.16642  1.57017  #> 736:     116869.44: 0.00873400 0.00625417  5.60870 0.0462317 0.0800259 -0.171230 0.137378 0.467286 0.127191  5.16645  1.57017 #> 740:     116869.44: 0.00873337 0.00619144  5.60867 0.0460613 0.0799567 -0.170793 0.136996 0.467336 0.127421  5.16632  1.57019 #> 744:     116869.44: 0.00873088 0.00621910  5.60875 0.0461148 0.0800077 -0.170998 0.137095 0.467307 0.127248  5.16638  1.57018 #> 748:     116869.44: 0.00873202 0.00624425  5.60874 0.0461356 0.0799937 -0.171006 0.137088 0.467312 0.127270  5.16637  1.57018 #> 752:     116869.44: 0.00873432 0.00626386  5.60878 0.0461426 0.0800294 -0.170970 0.137014 0.467281 0.127288  5.16640  1.57018 #> 756:     116869.44: 0.00873844 0.00626045  5.60886 0.0460861 0.0800688 -0.170811 0.136809 0.467296 0.127334  5.16633  1.57019 #> 760:     116869.43: 0.00873606 0.00625111  5.60883 0.0460989 0.0800477 -0.170753 0.136682 0.467267 0.127329  5.16627  1.57020 #> 764:     116869.44: 0.00871011 0.00620063  5.60899 0.0460310 0.0799937 -0.170705 0.136653 0.467366 0.127405  5.16627  1.57015 #> 768:     116869.43: 0.00873740 0.00620442  5.60904 0.0459824 0.0799544 -0.170695 0.136677 0.467405 0.127404  5.16629  1.57020 #> 772:     116869.43: 0.00873362 0.00621885  5.60906 0.0459957 0.0799627 -0.170684 0.136677 0.467410 0.127420  5.16629  1.57020 #> 776:     116869.43: 0.00876174 0.00628362  5.60919 0.0460427 0.0800054 -0.170715 0.136689 0.467429 0.127418  5.16635  1.57020 #> 780:     116869.43: 0.00874178 0.00625642  5.60926 0.0460311 0.0799747 -0.170741 0.136708 0.467451 0.127433  5.16636  1.57018 #> 784:     116869.43: 0.00875364 0.00626221  5.60928 0.0460331 0.0800105 -0.170770 0.136706 0.467420 0.127441  5.16637  1.57017 #> 788:     116869.43: 0.00876058 0.00628403  5.60934 0.0460600 0.0800462 -0.170848 0.136778 0.467424 0.127422  5.16642  1.57017 #> 792:     116869.43: 0.00875508 0.00628647  5.60936 0.0460737 0.0800592 -0.170802 0.136720 0.467427 0.127422  5.16643  1.57017 #> 796:     116869.43: 0.00876150 0.00626585  5.60935 0.0460427 0.0800528 -0.170722 0.136640 0.467349 0.127448  5.16650  1.57017 #> 800:     116869.43: 0.00876587 0.00627547  5.60936 0.0460428 0.0800574 -0.170721 0.136643 0.467353 0.127445  5.16649  1.57016 #> 804:     116869.43: 0.00875640 0.00626962  5.60936 0.0460424 0.0800567 -0.170721 0.136638 0.467354 0.127443  5.16649  1.57015 #> 808:     116869.43: 0.00872832 0.00625384  5.60947 0.0460258 0.0801935 -0.170717 0.136562 0.467269 0.127405  5.16650  1.57015 #> 812:     116869.43: 0.00874901 0.00620311  5.60965 0.0460297 0.0803616 -0.170725 0.136534 0.467090 0.127312  5.16657  1.57015 #> 816:     116869.43: 0.00875050 0.00625086  5.60963 0.0460885 0.0804076 -0.170830 0.136509 0.467045 0.127283  5.16664  1.57015 #> 820:     116869.43: 0.00874715 0.00626841  5.60971 0.0460578 0.0804372 -0.170735 0.136403 0.467009 0.127279  5.16659  1.57016 #> 824:     116869.43: 0.00875967 0.00621364  5.61053 0.0460476 0.0810617 -0.170634 0.136088 0.466690 0.127186  5.16678  1.57013 #> 828:     116869.43: 0.00872485 0.00620664  5.61051 0.0460575 0.0810874 -0.170582 0.136070 0.466749 0.127151  5.16683  1.57007 #> 832:     116869.43: 0.00877898 0.00620812  5.61052 0.0460768 0.0810475 -0.170641 0.136123 0.466687 0.127134  5.16679  1.57009 #> 836:     116869.43: 0.00875810 0.00625605  5.61054 0.0461029 0.0810870 -0.170627 0.136098 0.466713 0.127152  5.16675  1.57010 #> 840:     116869.43: 0.00875780 0.00626263  5.61057 0.0461211 0.0810932 -0.170618 0.136045 0.466719 0.127159  5.16675  1.57010 #> 844:     116869.43: 0.00875898 0.00625838  5.61076 0.0461435 0.0812212 -0.170448 0.135764 0.466640 0.127114  5.16665  1.57013 #> 848:     116869.43: 0.00876610 0.00624798  5.61076 0.0461526 0.0812042 -0.170439 0.135766 0.466629 0.127098  5.16665  1.57013 #> 852:     116869.43: 0.00876816 0.00628706  5.61095 0.0462273 0.0812638 -0.170369 0.135593 0.466614 0.127110  5.16658  1.57014 #> 856:     116869.43: 0.00875474 0.00628758  5.61133 0.0462036 0.0814126 -0.170034 0.135173 0.466540 0.127081  5.16638  1.57018 #> 860:     116869.43: 0.00876043 0.00627717  5.61136 0.0462251 0.0814238 -0.170075 0.135189 0.466520 0.127073  5.16643  1.57018 #> 864:     116869.43: 0.00877430 0.00626805  5.61143 0.0462190 0.0815053 -0.170095 0.135144 0.466499 0.127083  5.16649  1.57017 #> 868:     116869.43: 0.00878897 0.00623669  5.61141 0.0462163 0.0814756 -0.170113 0.135119 0.466513 0.127104  5.16648  1.57015 #> 872:     116869.43: 0.00876904 0.00624422  5.61141 0.0461948 0.0814664 -0.170056 0.135056 0.466501 0.127108  5.16647  1.57015 #> 876:     116869.43: 0.00876716 0.00623650  5.61155 0.0462111 0.0814863 -0.170025 0.135023 0.466489 0.127148  5.16653  1.57015 #> 880:     116869.43: 0.00876309 0.00620396  5.61185 0.0462356 0.0815827 -0.169875 0.134860 0.466443 0.127110  5.16647  1.57018 #> 884:     116869.43: 0.00875539 0.00626302  5.61183 0.0462607 0.0816259 -0.169958 0.134813 0.466407 0.127105  5.16653  1.57016 #> 888:     116869.43: 0.00878635 0.00625447  5.61191 0.0462599 0.0816236 -0.169987 0.134807 0.466427 0.127105  5.16654  1.57015 #> 892:     116869.43: 0.00880796 0.00628524  5.61191 0.0463588 0.0816291 -0.169959 0.134761 0.466448 0.127094  5.16649  1.57016 #> 896:     116869.43: 0.00881266 0.00624071  5.61199 0.0462871 0.0816418 -0.169932 0.134698 0.466436 0.127135  5.16657  1.57015 #> 900:     116869.43: 0.00879985 0.00624013  5.61200 0.0462919 0.0816182 -0.169922 0.134693 0.466388 0.127144  5.16655  1.57015 #> 904:     116869.43: 0.00878242 0.00627052  5.61200 0.0463009 0.0816429 -0.169930 0.134672 0.466384 0.127145  5.16658  1.57014 #> 908:     116869.43: 0.00877937 0.00628301  5.61230 0.0463323 0.0816042 -0.169890 0.134571 0.466478 0.127191  5.16655  1.57014 #> 912:     116869.43: 0.00869583 0.00621802  5.61282 0.0464100 0.0816335 -0.169791 0.134310 0.466558 0.127238  5.16649  1.57015 #> 916:     116869.43: 0.00878364 0.00627793  5.61284 0.0463482 0.0816140 -0.169803 0.134323 0.466537 0.127275  5.16651  1.57012 #> 920:     116869.43: 0.00878392 0.00626702  5.61284 0.0463319 0.0816058 -0.169814 0.134307 0.466545 0.127268  5.16652  1.57015 #> 924:     116869.43: 0.00877475 0.00626666  5.61285 0.0463380 0.0815824 -0.169829 0.134225 0.466529 0.127284  5.16659  1.57014 #> 928:     116869.43: 0.00879040 0.00626305  5.61285 0.0463617 0.0814870 -0.169815 0.134190 0.466582 0.127301  5.16659  1.57014 #> 932:     116869.43: 0.00877172 0.00627400  5.61299 0.0463887 0.0813106 -0.169746 0.134047 0.466736 0.127362  5.16653  1.57019 #> 936:     116869.43: 0.00879112 0.00631884  5.61287 0.0464254 0.0810081 -0.169771 0.134039 0.466974 0.127460  5.16654  1.57013 #> 940:     116869.43: 0.00880134 0.00628093  5.61290 0.0464035 0.0811520 -0.169720 0.133948 0.466866 0.127394  5.16654  1.57014 #> 944:     116869.43: 0.00880849 0.00626481  5.61292 0.0463860 0.0811339 -0.169734 0.133925 0.466872 0.127406  5.16656  1.57014 #> 948:     116869.43: 0.00880122 0.00624092  5.61337 0.0463808 0.0808164 -0.169531 0.133490 0.467151 0.127551  5.16651  1.57016 #> 952:     116869.43: 0.00880967 0.00626115  5.61340 0.0464014 0.0808584 -0.169517 0.133545 0.467163 0.127554  5.16653  1.57013 #> 956:     116869.43: 0.00877510 0.00630577  5.61331 0.0463768 0.0807108 -0.169536 0.133393 0.467178 0.127558  5.16652  1.57012 #> 960:     116869.43: 0.00880410 0.00625789  5.61337 0.0464492 0.0805613 -0.169479 0.133281 0.467272 0.127535  5.16647  1.57015 #> 964:     116869.43: 0.00880428 0.00625805  5.61337 0.0464488 0.0805614 -0.169481 0.133281 0.467273 0.127535  5.16647  1.57015 #> 968:     116869.43: 0.00880455 0.00625810  5.61337 0.0464500 0.0805594 -0.169483 0.133280 0.467271 0.127537  5.16648  1.57015 #> 972:     116869.43: 0.00881822 0.00624786  5.61342 0.0464655 0.0805755 -0.169525 0.133279 0.467240 0.127532  5.16655  1.57015 #> 976:     116869.43: 0.00882248 0.00624352  5.61339 0.0464553 0.0805716 -0.169559 0.133274 0.467241 0.127521  5.16657  1.57014 #> 980:     116869.43: 0.00882162 0.00623625  5.61329 0.0464303 0.0805681 -0.169583 0.133319 0.467227 0.127496  5.16660  1.57014 #> 984:     116869.43: 0.00879695 0.00627190  5.61329 0.0464562 0.0804679 -0.169600 0.133268 0.467274 0.127524  5.16660  1.57014 #> 988:     116869.43: 0.00880104 0.00626706  5.61330 0.0464837 0.0804127 -0.169589 0.133240 0.467299 0.127517  5.16658  1.57013 #> 992:     116869.43: 0.00879911 0.00626018  5.61336 0.0464760 0.0803688 -0.169554 0.133182 0.467339 0.127544  5.16657  1.57014 #> 996:     116869.43: 0.00880149 0.00625036  5.61334 0.0464858 0.0803604 -0.169546 0.133178 0.467347 0.127549  5.16658  1.57014 #> 1000:     116869.43: 0.00879796 0.00623814  5.61333 0.0464608 0.0803784 -0.169536 0.133160 0.467335 0.127547  5.16656  1.57014 #> 1004:     116869.43: 0.00880888 0.00622316  5.61342 0.0464869 0.0801480 -0.169512 0.132925 0.467430 0.127557  5.16660  1.57014 #> 1008:     116869.43: 0.00879722 0.00624160  5.61350 0.0465171 0.0801173 -0.169455 0.132815 0.467466 0.127573  5.16657  1.57014 #> 1012:     116869.43: 0.00878490 0.00622913  5.61349 0.0465129 0.0801233 -0.169466 0.132809 0.467469 0.127583  5.16656  1.57014 #> 1016:     116869.43: 0.00880753 0.00627339  5.61351 0.0465350 0.0801875 -0.169494 0.132855 0.467447 0.127562  5.16658  1.57013 #> 1020:     116869.43: 0.00882456 0.00623584  5.61349 0.0465113 0.0801474 -0.169492 0.132791 0.467408 0.127554  5.16663  1.57013 #> 1024:     116869.43: 0.00881456 0.00623390  5.61354 0.0465251 0.0801675 -0.169481 0.132755 0.467413 0.127542  5.16664  1.57014 #> 1028:     116869.43: 0.00881556 0.00624524  5.61354 0.0465390 0.0801904 -0.169468 0.132734 0.467397 0.127530  5.16662  1.57013 #> 1032:     116869.43: 0.00881121 0.00625697  5.61354 0.0465368 0.0801835 -0.169467 0.132726 0.467417 0.127536  5.16661  1.57013 #> 1036:     116869.43: 0.00880738 0.00625530  5.61353 0.0465577 0.0801940 -0.169491 0.132706 0.467394 0.127514  5.16664  1.57012 #> 1040:     116869.43: 0.00881821 0.00624509  5.61349 0.0466376 0.0802717 -0.169453 0.132436 0.467230 0.127418  5.16666  1.57012 #> 1044:     116869.43: 0.00880846 0.00623451  5.61349 0.0466427 0.0802841 -0.169453 0.132434 0.467239 0.127420  5.16667  1.57014 #> 1048:     116869.43: 0.00880887 0.00624851  5.61349 0.0466367 0.0802733 -0.169460 0.132432 0.467217 0.127424  5.16667  1.57012 #> 1052:     116869.43: 0.00879976 0.00627118  5.61348 0.0466474 0.0803241 -0.169497 0.132374 0.467188 0.127409  5.16666  1.57011 #> 1056:     116869.43: 0.00881129 0.00626018  5.61349 0.0467003 0.0803367 -0.169473 0.132226 0.467108 0.127338  5.16667  1.57012 #> 1060:     116869.43: 0.00880565 0.00625652  5.61348 0.0466726 0.0803156 -0.169488 0.132265 0.467133 0.127336  5.16670  1.57011 #> 1064:     116869.43: 0.00880580 0.00625568  5.61349 0.0466846 0.0803208 -0.169505 0.132269 0.467131 0.127334  5.16669  1.57011 #> 1068:     116869.43: 0.00880343 0.00626936  5.61351 0.0467032 0.0803391 -0.169519 0.132271 0.467131 0.127335  5.16669  1.57011 #> 1072:     116869.43: 0.00880245 0.00626452  5.61352 0.0467016 0.0803216 -0.169529 0.132256 0.467128 0.127335  5.16671  1.57011 #> 1076:     116869.43: 0.00880588 0.00627230  5.61353 0.0468004 0.0802342 -0.169517 0.132072 0.467105 0.127273  5.16667  1.57012 #> 1080:     116869.43: 0.00881041 0.00625979  5.61350 0.0467489 0.0802845 -0.169539 0.132084 0.467106 0.127295  5.16675  1.57010 #> 1084:     116869.43: 0.00880941 0.00625261  5.61349 0.0467551 0.0802591 -0.169529 0.132087 0.467110 0.127292  5.16674  1.57010 #> 1088:     116869.43: 0.00879913 0.00626298  5.61351 0.0467672 0.0802458 -0.169573 0.132092 0.467119 0.127284  5.16674  1.57010 #> 1092:     116869.43: 0.00880260 0.00626606  5.61353 0.0467969 0.0801980 -0.169600 0.132077 0.467145 0.127292  5.16675  1.57010 #> 1096:     116869.43: 0.00878476 0.00624960  5.61343 0.0468342 0.0800795 -0.169637 0.132045 0.467163 0.127279  5.16678  1.57011 #> 1100:     116869.43: 0.00880558 0.00625561  5.61344 0.0468277 0.0800739 -0.169636 0.132047 0.467159 0.127281  5.16677  1.57009 #> 1104:     116869.43: 0.00879540 0.00625934  5.61343 0.0468213 0.0800688 -0.169653 0.132040 0.467160 0.127271  5.16676  1.57010 #> 1108:     116869.43: 0.00879424 0.00625389  5.61343 0.0468200 0.0800509 -0.169691 0.132054 0.467170 0.127264  5.16677  1.57010 #> 1112:     116869.43: 0.00879663 0.00625154  5.61339 0.0468154 0.0800094 -0.169715 0.132060 0.467198 0.127273  5.16679  1.57009 #> 1116:     116869.43: 0.00879862 0.00625391  5.61341 0.0468175 0.0800120 -0.169715 0.132042 0.467194 0.127271  5.16679  1.57009 #> 1120:     116869.43: 0.00880048 0.00625013  5.61345 0.0468289 0.0800185 -0.169701 0.131989 0.467178 0.127268  5.16677  1.57010 #> 1124:     116869.43: 0.00879991 0.00626365  5.61343 0.0468413 0.0800393 -0.169699 0.131977 0.467173 0.127259  5.16675  1.57010 #> 1128:     116869.43: 0.00879855 0.00626123  5.61345 0.0468389 0.0800457 -0.169701 0.131987 0.467174 0.127264  5.16676  1.57010 #> 1132:     116869.43: 0.00880176 0.00626207  5.61344 0.0468616 0.0800147 -0.169718 0.131959 0.467172 0.127256  5.16677  1.57010 #> 1136:     116869.43: 0.00880969 0.00626260  5.61342 0.0468945 0.0800053 -0.169756 0.131903 0.467134 0.127228  5.16681  1.57009 #> 1140:     116869.43: 0.00879923 0.00625375  5.61356 0.0468893 0.0800308 -0.169724 0.131812 0.467143 0.127217  5.16676  1.57010 #> 1144:     116869.43: 0.00879637 0.00624729  5.61355 0.0468799 0.0800138 -0.169729 0.131811 0.467148 0.127230  5.16677  1.57010 #> 1148:     116869.43: 0.00880203 0.00625591  5.61356 0.0468938 0.0800141 -0.169759 0.131819 0.467130 0.127217  5.16678  1.57010 #> 1152:     116869.43: 0.00880027 0.00625726  5.61348 0.0469009 0.0800000 -0.169806 0.131791 0.467107 0.127186  5.16679  1.57009 #> 1156:     116869.43: 0.00880410 0.00625469  5.61348 0.0469082 0.0799974 -0.169800 0.131790 0.467106 0.127194  5.16679  1.57010 #> 1160:     116869.43: 0.00879648 0.00625974  5.61355 0.0468894 0.0800290 -0.169808 0.131774 0.467112 0.127175  5.16678  1.57010 #> 1164:     116869.43: 0.00880185 0.00626039  5.61362 0.0469245 0.0800126 -0.169817 0.131703 0.467108 0.127171  5.16679  1.57010 #> 1168:     116869.43: 0.00880532 0.00626390  5.61359 0.0469326 0.0799977 -0.169819 0.131719 0.467122 0.127174  5.16678  1.57011 #> 1172:     116869.43: 0.00879667 0.00625760  5.61360 0.0469182 0.0799890 -0.169820 0.131720 0.467104 0.127174  5.16677  1.57010 #> 1176:     116869.43: 0.00880776 0.00625178  5.61359 0.0469604 0.0799558 -0.169880 0.131573 0.467048 0.127133  5.16683  1.57009 #> 1180:     116869.43: 0.00880508 0.00625945  5.61357 0.0469516 0.0799979 -0.169886 0.131641 0.467049 0.127136  5.16682  1.57009 #> 1184:     116869.43: 0.00880134 0.00627017  5.61355 0.0469501 0.0800127 -0.169889 0.131638 0.467043 0.127131  5.16682  1.57009 #> 1188:     116869.43: 0.00880115 0.00626959  5.61358 0.0469558 0.0800256 -0.169885 0.131630 0.467049 0.127131  5.16682  1.57009 #> 1192:     116869.43: 0.00879372 0.00625744  5.61357 0.0469417 0.0800172 -0.169911 0.131601 0.467017 0.127117  5.16682  1.57009 #> 1196:     116869.43: 0.00879056 0.00626643  5.61358 0.0469715 0.0800089 -0.169936 0.131575 0.467017 0.127104  5.16679  1.57009 #> 1200:     116869.43: 0.00879535 0.00626759  5.61360 0.0470046 0.0799740 -0.169991 0.131549 0.467020 0.127091  5.16683  1.57009 #> 1204:     116869.43: 0.00879842 0.00627184  5.61358 0.0469696 0.0799855 -0.169969 0.131604 0.467040 0.127122  5.16681  1.57009 #> 1208:     116869.43: 0.00879689 0.00626473  5.61358 0.0469700 0.0799888 -0.169969 0.131604 0.467047 0.127116  5.16681  1.57009 #> 1212:     116869.43: 0.00878990 0.00625274  5.61357 0.0469306 0.0800002 -0.169962 0.131585 0.467025 0.127109  5.16679  1.57009 #> 1216:     116869.43: 0.00879212 0.00625614  5.61358 0.0469244 0.0800161 -0.169970 0.131600 0.467022 0.127107  5.16680  1.57009 #> 1220:     116869.43: 0.00879033 0.00625771  5.61357 0.0469301 0.0800103 -0.169970 0.131596 0.467024 0.127108  5.16678  1.57010 #> 1224:     116869.43: 0.00879130 0.00626491  5.61363 0.0469737 0.0799702 -0.170028 0.131550 0.467029 0.127087  5.16680  1.57010 #> 1228:     116869.43: 0.00879425 0.00627202  5.61358 0.0469789 0.0800011 -0.170043 0.131500 0.466990 0.127063  5.16682  1.57009 #> 1232:     116869.43: 0.00879374 0.00626720  5.61360 0.0469812 0.0799989 -0.170039 0.131525 0.466989 0.127070  5.16680  1.57009 #> 1236:     116869.43: 0.00879906 0.00626378  5.61359 0.0469807 0.0799996 -0.170046 0.131508 0.466977 0.127068  5.16681  1.57009 #> 1240:     116869.43: 0.00879109 0.00626726  5.61359 0.0469802 0.0799929 -0.170088 0.131493 0.466967 0.127044  5.16680  1.57009 #> 1244:     116869.43: 0.00879757 0.00627022  5.61361 0.0469964 0.0799931 -0.170115 0.131458 0.466963 0.127041  5.16681  1.57009 #> 1248:     116869.43: 0.00880329 0.00626909  5.61360 0.0469888 0.0799864 -0.170112 0.131452 0.466956 0.127041  5.16682  1.57009 #> 1252:     116869.43: 0.00879258 0.00626230  5.61360 0.0469899 0.0799922 -0.170108 0.131443 0.466958 0.127038  5.16681  1.57009 #> 1256:     116869.43: 0.00879049 0.00626615  5.61359 0.0470143 0.0799841 -0.170126 0.131389 0.466925 0.127010  5.16681  1.57009 #> 1260:     116869.43: 0.00879379 0.00626054  5.61359 0.0469999 0.0800175 -0.170154 0.131411 0.466897 0.127007  5.16680  1.57009 #> 1264:     116869.43: 0.00879308 0.00625572  5.61353 0.0469816 0.0800306 -0.170173 0.131412 0.466866 0.126999  5.16683  1.57009 #> 1268:     116869.43: 0.00879223 0.00626316  5.61355 0.0470007 0.0800396 -0.170183 0.131417 0.466867 0.126990  5.16682  1.57009 #> 1272:     116869.43: 0.00879055 0.00626271  5.61355 0.0469970 0.0800326 -0.170193 0.131415 0.466873 0.126992  5.16681  1.57009 #> 1276:     116869.43: 0.00878335 0.00626438  5.61353 0.0469928 0.0800077 -0.170196 0.131427 0.466890 0.126982  5.16678  1.57010 #> 1280:     116869.43: 0.00878703 0.00626212  5.61353 0.0470005 0.0800154 -0.170196 0.131398 0.466863 0.126984  5.16676  1.57010 #> 1284:     116869.43: 0.00879167 0.00625729  5.61356 0.0469893 0.0799978 -0.170217 0.131405 0.466877 0.126995  5.16679  1.57009 #> 1288:     116869.43: 0.00879265 0.00626212  5.61355 0.0469945 0.0799825 -0.170228 0.131384 0.466870 0.126991  5.16679  1.57009 #> 1292:     116869.43: 0.00879314 0.00626595  5.61352 0.0469921 0.0799973 -0.170258 0.131372 0.466842 0.126983  5.16681  1.57009 #> 1296:     116869.43: 0.00879430 0.00626312  5.61350 0.0470084 0.0800002 -0.170309 0.131298 0.466800 0.126945  5.16683  1.57009 #> 1300:     116869.43: 0.00879011 0.00626417  5.61352 0.0470024 0.0800033 -0.170283 0.131344 0.466839 0.126964  5.16681  1.57009 #> 1304:     116869.43: 0.00878997 0.00626705  5.61352 0.0469893 0.0800157 -0.170295 0.131357 0.466829 0.126971  5.16682  1.57009 #> 1308:     116869.43: 0.00878757 0.00626461  5.61355 0.0469691 0.0800230 -0.170268 0.131399 0.466857 0.126993  5.16681  1.57009 #> 1312:     116869.43: 0.00879228 0.00625800  5.61353 0.0469825 0.0799901 -0.170289 0.131391 0.466853 0.126978  5.16681  1.57009 #> 1316:     116869.43: 0.00879182 0.00625304  5.61355 0.0469729 0.0799703 -0.170328 0.131337 0.466847 0.126972  5.16681  1.57009 #> 1320:     116869.43: 0.00879386 0.00626070  5.61351 0.0469837 0.0799634 -0.170373 0.131321 0.466817 0.126946  5.16682  1.57009 #> 1324:     116869.43: 0.00878061 0.00626418  5.61351 0.0469908 0.0799626 -0.170372 0.131322 0.466803 0.126951  5.16680  1.57009 #> 1328:     116869.43: 0.00878862 0.00625703  5.61351 0.0469799 0.0799680 -0.170373 0.131320 0.466810 0.126954  5.16680  1.57009 #> 1332:     116869.43: 0.00878693 0.00626082  5.61351 0.0469750 0.0799638 -0.170382 0.131320 0.466813 0.126956  5.16680  1.57009 #> 1336:     116869.43: 0.00879098 0.00626547  5.61353 0.0469766 0.0799403 -0.170420 0.131307 0.466823 0.126945  5.16679  1.57009 #> 1340:     116869.43: 0.00878296 0.00625915  5.61353 0.0469774 0.0799347 -0.170430 0.131296 0.466818 0.126943  5.16680  1.57010 #> 1344:     116869.43: 0.00878660 0.00625792  5.61352 0.0469771 0.0799339 -0.170436 0.131303 0.466813 0.126943  5.16679  1.57009 #> 1348:     116869.43: 0.00878778 0.00625787  5.61349 0.0469790 0.0799346 -0.170447 0.131305 0.466811 0.126933  5.16679  1.57009 #> 1352:     116869.43: 0.00878243 0.00626855  5.61349 0.0469779 0.0799146 -0.170460 0.131306 0.466816 0.126946  5.16677  1.57010 #> 1356:     116869.43: 0.00877833 0.00626866  5.61349 0.0469752 0.0799237 -0.170464 0.131315 0.466826 0.126951  5.16675  1.57010 #> 1360:     116869.43: 0.00878835 0.00626412  5.61350 0.0469787 0.0799164 -0.170476 0.131316 0.466825 0.126948  5.16674  1.57010 #> 1364:     116869.43: 0.00878712 0.00626575  5.61350 0.0469692 0.0799062 -0.170498 0.131318 0.466824 0.126948  5.16674  1.57010 #> 1368:     116869.43: 0.00878339 0.00626968  5.61342 0.0469469 0.0799336 -0.170603 0.131355 0.466761 0.126926  5.16673  1.57010 #> 1372:     116869.43: 0.00878625 0.00625682  5.61347 0.0469346 0.0799226 -0.170604 0.131342 0.466794 0.126940  5.16677  1.57010 #> 1376:     116869.43: 0.00878841 0.00625822  5.61348 0.0469307 0.0799305 -0.170610 0.131341 0.466783 0.126943  5.16676  1.57010 #> 1380:     116869.43: 0.00877634 0.00627938  5.61352 0.0469040 0.0798571 -0.170905 0.131480 0.466852 0.126963  5.16668  1.57011 #> 1384:     116869.43: 0.00875809 0.00630724  5.61353 0.0469229 0.0798437 -0.170905 0.131477 0.466840 0.126971  5.16668  1.57011 #> 1388:     116869.43: 0.00877821 0.00626008  5.61346 0.0468449 0.0798764 -0.170904 0.131512 0.466845 0.126957  5.16670  1.57010 #> 1392:     116869.43: 0.00879099 0.00625439  5.61348 0.0468414 0.0798540 -0.170919 0.131485 0.466858 0.126973  5.16674  1.57011 #> 1396:     116869.43: 0.00878924 0.00625618  5.61349 0.0468307 0.0798664 -0.170918 0.131488 0.466860 0.126981  5.16673  1.57011 #> 1400:     116869.43: 0.00878232 0.00626185  5.61350 0.0468125 0.0798272 -0.171010 0.131530 0.466895 0.126993  5.16669  1.57011 #> 1404:     116869.43: 0.00878068 0.00625695  5.61324 0.0467578 0.0798352 -0.171161 0.131491 0.466755 0.126959  5.16676  1.57009 #> 1408:     116869.43: 0.00877605 0.00625907  5.61333 0.0467625 0.0798279 -0.171188 0.131524 0.466777 0.126945  5.16674  1.57010 #> 1412:     116869.43: 0.00877953 0.00625925  5.61333 0.0467581 0.0798288 -0.171200 0.131523 0.466768 0.126954  5.16671  1.57011 #> 1416:     116869.43: 0.00878603 0.00626143  5.61322 0.0467152 0.0798381 -0.171376 0.131493 0.466698 0.126924  5.16674  1.57010 #> 1420:     116869.43: 0.00877685 0.00625312  5.61324 0.0467050 0.0797710 -0.171369 0.131521 0.466785 0.126969  5.16670  1.57011 #> 1424:     116869.43: 0.00877787 0.00625633  5.61326 0.0467000 0.0797752 -0.171380 0.131514 0.466781 0.126967  5.16671  1.57011 #> 1428:     116869.43: 0.00877147 0.00625931  5.61331 0.0466965 0.0797996 -0.171341 0.131516 0.466796 0.126973  5.16670  1.57011 #> 1432:     116869.43: 0.00878011 0.00625529  5.61332 0.0466919 0.0797866 -0.171348 0.131526 0.466788 0.126981  5.16670  1.57011 #> 1436:     116869.43: 0.00877818 0.00625900  5.61332 0.0466605 0.0797596 -0.171513 0.131570 0.466796 0.126990  5.16670  1.57011 #> 1440:     116869.43: 0.00877516 0.00625287  5.61325 0.0465956 0.0797405 -0.171669 0.131602 0.466777 0.126982  5.16671  1.57011 #> 1444:     116869.43: 0.00878151 0.00625179  5.61327 0.0465972 0.0797226 -0.171689 0.131597 0.466775 0.126990  5.16672  1.57011 #> 1448:     116869.43: 0.00878104 0.00625273  5.61329 0.0465884 0.0797314 -0.171710 0.131600 0.466773 0.126991  5.16671  1.57011 #> 1452:     116869.43: 0.00877651 0.00626621  5.61332 0.0465422 0.0796969 -0.171859 0.131652 0.466809 0.127025  5.16670  1.57011 #> 1456:     116869.43: 0.00877985 0.00625694  5.61327 0.0465239 0.0796988 -0.171877 0.131627 0.466784 0.127026  5.16673  1.57010 #> 1460:     116869.43: 0.00878165 0.00625811  5.61330 0.0465366 0.0796733 -0.171861 0.131622 0.466798 0.127035  5.16670  1.57011 #> 1464:     116869.43: 0.00877896 0.00625726  5.61331 0.0465383 0.0796996 -0.171838 0.131609 0.466785 0.127026  5.16670  1.57011 #> 1468:     116869.43: 0.00878010 0.00625798  5.61331 0.0465278 0.0796922 -0.171859 0.131612 0.466789 0.127031  5.16670  1.57011 #> 1472:     116869.43: 0.00878268 0.00625184  5.61335 0.0464859 0.0796805 -0.171940 0.131622 0.466808 0.127061  5.16672  1.57011 #> 1476:     116869.43: 0.00878382 0.00625882  5.61337 0.0464668 0.0796794 -0.171977 0.131636 0.466804 0.127070  5.16674  1.57010 #> 1480:     116869.43: 0.00878133 0.00625569  5.61337 0.0464718 0.0796723 -0.171969 0.131635 0.466801 0.127067  5.16674  1.57010 #> 1484:     116869.43: 0.00878212 0.00625877  5.61337 0.0464743 0.0796820 -0.171977 0.131636 0.466799 0.127059  5.16674  1.57010 #> 1488:     116869.43: 0.00878299 0.00624338  5.61343 0.0464195 0.0796800 -0.171984 0.131616 0.466801 0.127083  5.16674  1.57010 #> 1492:     116869.43: 0.00878106 0.00624524  5.61351 0.0464238 0.0796659 -0.172002 0.131624 0.466850 0.127108  5.16674  1.57010 #> 1496:     116869.43: 0.00878189 0.00624625  5.61352 0.0464227 0.0796732 -0.172004 0.131623 0.466854 0.127094  5.16674  1.57010 #> 1500:     116869.43: 0.00879215 0.00625743  5.61352 0.0464283 0.0796727 -0.172006 0.131609 0.466853 0.127104  5.16674  1.57010 #> 1504:     116869.43: 0.00878895 0.00623826  5.61353 0.0463915 0.0796769 -0.171989 0.131571 0.466818 0.127102  5.16677  1.57010 #> 1508:     116869.43: 0.00878302 0.00624962  5.61353 0.0464157 0.0796640 -0.172004 0.131576 0.466831 0.127098  5.16673  1.57010 #> 1512:     116869.43: 0.00878690 0.00625079  5.61361 0.0464543 0.0796855 -0.171903 0.131532 0.466854 0.127098  5.16672  1.57011 #> 1516:     116869.43: 0.00878535 0.00625372  5.61363 0.0464410 0.0796774 -0.171931 0.131547 0.466857 0.127096  5.16673  1.57011 #> 1520:     116869.43: 0.00878157 0.00625492  5.61363 0.0464412 0.0796764 -0.171931 0.131545 0.466857 0.127098  5.16673  1.57011 #> 1524:     116869.43: 0.00878488 0.00625437  5.61363 0.0464358 0.0796742 -0.171930 0.131537 0.466854 0.127102  5.16672  1.57011 #> 1528:     116869.43: 0.00878689 0.00623991  5.61370 0.0464140 0.0796761 -0.171866 0.131483 0.466867 0.127119  5.16672  1.57011 #> 1532:     116869.43: 0.00878397 0.00624218  5.61367 0.0464048 0.0796732 -0.171866 0.131470 0.466881 0.127115  5.16672  1.57010 #> 1536:     116869.43: 0.00878978 0.00625288  5.61367 0.0464091 0.0796738 -0.171867 0.131464 0.466875 0.127120  5.16671  1.57011 #> 1540:     116869.43: 0.00878611 0.00625716  5.61368 0.0464062 0.0796774 -0.171856 0.131460 0.466870 0.127122  5.16671  1.57011 #> 1544:     116869.43: 0.00878495 0.00625671  5.61370 0.0463989 0.0796777 -0.171846 0.131447 0.466874 0.127126  5.16671  1.57011 #> 1548:     116869.43: 0.00878259 0.00624599  5.61374 0.0463923 0.0796741 -0.171825 0.131422 0.466896 0.127145  5.16671  1.57011 #> 1552:     116869.43: 0.00878855 0.00625064  5.61374 0.0463880 0.0796765 -0.171825 0.131425 0.466896 0.127142  5.16671  1.57011 #> 1556:     116869.43: 0.00878997 0.00625191  5.61375 0.0463777 0.0796710 -0.171831 0.131420 0.466891 0.127148  5.16672  1.57011 #> 1560:     116869.43: 0.00879076 0.00624861  5.61375 0.0463604 0.0796711 -0.171829 0.131400 0.466894 0.127157  5.16673  1.57011 #> 1564:     116869.43: 0.00879734 0.00624182  5.61376 0.0463512 0.0796662 -0.171772 0.131349 0.466918 0.127169  5.16674  1.57010 #> 1568:     116869.43: 0.00879109 0.00623775  5.61375 0.0463355 0.0796743 -0.171796 0.131349 0.466874 0.127154  5.16672  1.57010 #> 1572:     116869.43: 0.00878726 0.00625199  5.61374 0.0463491 0.0796424 -0.171789 0.131332 0.466878 0.127152  5.16671  1.57011 #> 1576:     116869.43: 0.00878842 0.00625171  5.61374 0.0463340 0.0796523 -0.171803 0.131342 0.466882 0.127155  5.16671  1.57011 #> 1580:     116869.43: 0.00879272 0.00624762  5.61377 0.0463188 0.0796590 -0.171766 0.131264 0.466867 0.127168  5.16674  1.57011 #> 1584:     116869.43: 0.00879081 0.00624784  5.61378 0.0463254 0.0796609 -0.171739 0.131242 0.466872 0.127167  5.16674  1.57011 #> 1588:     116869.43: 0.00878979 0.00624913  5.61376 0.0463168 0.0796601 -0.171739 0.131241 0.466868 0.127167  5.16673  1.57010 #> 1592:     116869.43: 0.00878849 0.00624879  5.61376 0.0463139 0.0796605 -0.171740 0.131240 0.466866 0.127166  5.16673  1.57011 #> 1596:     116869.43: 0.00878322 0.00624381  5.61374 0.0463073 0.0796562 -0.171747 0.131231 0.466840 0.127158  5.16671  1.57011 #> 1600:     116869.43: 0.00878792 0.00625882  5.61376 0.0463224 0.0796552 -0.171761 0.131233 0.466853 0.127148  5.16670  1.57011 #> 1604:     116869.43: 0.00878846 0.00624898  5.61377 0.0462954 0.0796583 -0.171763 0.131190 0.466845 0.127161  5.16672  1.57011 #> 1608:     116869.43: 0.00878643 0.00624664  5.61375 0.0462838 0.0796702 -0.171728 0.131144 0.466827 0.127158  5.16672  1.57011 #> 1612:     116869.43: 0.00878906 0.00625137  5.61375 0.0462700 0.0796619 -0.171727 0.131147 0.466831 0.127163  5.16672  1.57011 #> 1616:     116869.43: 0.00878425 0.00625283  5.61375 0.0462709 0.0796558 -0.171726 0.131146 0.466827 0.127163  5.16671  1.57011 #> 1620:     116869.43: 0.00878357 0.00625514  5.61375 0.0462721 0.0796537 -0.171745 0.131142 0.466821 0.127156  5.16671  1.57011 #> 1624:     116869.43: 0.00878236 0.00625329  5.61373 0.0462592 0.0796542 -0.171739 0.131108 0.466804 0.127149  5.16671  1.57011 #> 1628:     116869.43: 0.00878321 0.00624361  5.61372 0.0462208 0.0796528 -0.171706 0.131024 0.466792 0.127168  5.16671  1.57011 #> 1632:     116869.43: 0.00878120 0.00624165  5.61373 0.0462143 0.0796524 -0.171701 0.131014 0.466793 0.127162  5.16671  1.57011 #> 1636:     116869.43: 0.00878646 0.00626125  5.61374 0.0462244 0.0796699 -0.171705 0.131010 0.466792 0.127161  5.16670  1.57011 #> 1640:     116869.43: 0.00878620 0.00625884  5.61374 0.0462248 0.0796628 -0.171727 0.131002 0.466776 0.127157  5.16670  1.57011 #> 1644:     116869.43: 0.00878388 0.00624936  5.61368 0.0461759 0.0796597 -0.171669 0.130855 0.466718 0.127147  5.16670  1.57011 #> 1648:     116869.43: 0.00878231 0.00624780  5.61371 0.0461819 0.0796661 -0.171695 0.130899 0.466726 0.127159  5.16671  1.57011 #> 1652:     116869.43: 0.00878252 0.00624923  5.61371 0.0461708 0.0796608 -0.171695 0.130897 0.466733 0.127161  5.16671  1.57011 #> 1656:     116869.43: 0.00878305 0.00624373  5.61371 0.0461539 0.0796442 -0.171696 0.130882 0.466723 0.127162  5.16671  1.57011 #> 1660:     116869.43: 0.00878685 0.00625553  5.61371 0.0461578 0.0796452 -0.171705 0.130879 0.466718 0.127165  5.16671  1.57011 #> 1664:     116869.43: 0.00878902 0.00626124  5.61371 0.0461686 0.0796466 -0.171713 0.130880 0.466709 0.127161  5.16671  1.57011 #> 1668:     116869.43: 0.00878686 0.00626039  5.61371 0.0461666 0.0796477 -0.171717 0.130878 0.466709 0.127161  5.16671  1.57011 #> 1672:     116869.42: 0.00878343 0.00625715  5.61374 0.0461398 0.0796256 -0.171748 0.130862 0.466710 0.127168  5.16671  1.57011 #> 1676:     116869.43: 0.00880418 0.00624521  5.61396 0.0460550 0.0795543 -0.171877 0.130863 0.466779 0.127251  5.16667  1.57010 #> 1680:     116869.42: 0.00878518 0.00625013  5.61398 0.0460640 0.0795116 -0.171857 0.130826 0.466811 0.127246  5.16664  1.57011 #> 1684:     116869.42: 0.00878965 0.00625685  5.61398 0.0460548 0.0795237 -0.171889 0.130843 0.466802 0.127249  5.16667  1.57012 #> 1688:     116869.42: 0.00879307 0.00625419  5.61395 0.0460442 0.0795278 -0.171893 0.130825 0.466777 0.127245  5.16669  1.57011 #> 1692:     116869.42: 0.00880226 0.00622174  5.61383 0.0458834 0.0795845 -0.172023 0.130436 0.466500 0.127148  5.16674  1.57011 #> 1696:     116869.42: 0.00879213 0.00624309  5.61390 0.0459247 0.0795442 -0.171963 0.130598 0.466644 0.127203  5.16668  1.57011 #> 1700:     116869.42: 0.00878843 0.00625181  5.61394 0.0459083 0.0795269 -0.172013 0.130598 0.466658 0.127224  5.16668  1.57011 #> 1704:     116869.42: 0.00878345 0.00625660  5.61408 0.0458367 0.0794282 -0.172119 0.130618 0.466692 0.127276  5.16664  1.57015 #> 1708:     116869.42: 0.00878634 0.00623653  5.61405 0.0457905 0.0794329 -0.172171 0.130552 0.466653 0.127262  5.16666  1.57012 #> 1712:     116869.42: 0.00878959 0.00622548  5.61407 0.0457072 0.0794456 -0.172204 0.130343 0.466518 0.127221  5.16669  1.57011 #> 1716:     116869.42: 0.00879094 0.00624418  5.61407 0.0457130 0.0794556 -0.172226 0.130349 0.466528 0.127189  5.16667  1.57011 #> 1720:     116869.42: 0.00878079 0.00625629  5.61406 0.0457213 0.0794621 -0.172232 0.130364 0.466507 0.127197  5.16667  1.57011 #> 1724:     116869.42: 0.00878868 0.00625839  5.61407 0.0457294 0.0794527 -0.172236 0.130358 0.466515 0.127200  5.16667  1.57012 #> 1728:     116869.42: 0.00878844 0.00625740  5.61407 0.0457273 0.0794490 -0.172239 0.130355 0.466513 0.127197  5.16667  1.57012 #> 1732:     116869.42: 0.00878718 0.00625520  5.61411 0.0457073 0.0794340 -0.172271 0.130368 0.466510 0.127203  5.16668  1.57011 #> 1736:     116869.42: 0.00877714 0.00623968  5.61421 0.0456467 0.0793779 -0.172466 0.130529 0.466560 0.127258  5.16670  1.57012 #> 1740:     116869.42: 0.00878418 0.00625653  5.61424 0.0456391 0.0793910 -0.172436 0.130395 0.466524 0.127207  5.16663  1.57012 #> 1744:     116869.42: 0.00878234 0.00625559  5.61424 0.0456404 0.0793953 -0.172450 0.130401 0.466500 0.127196  5.16666  1.57013 #> 1748:     116869.42: 0.00878947 0.00625298  5.61423 0.0456440 0.0793859 -0.172447 0.130394 0.466502 0.127195  5.16666  1.57012 #> 1752:     116869.42: 0.00879022 0.00625092  5.61427 0.0456241 0.0793736 -0.172472 0.130362 0.466495 0.127191  5.16666  1.57012 #> 1756:     116869.42: 0.00878902 0.00623864  5.61433 0.0455934 0.0793442 -0.172564 0.130351 0.466480 0.127196  5.16664  1.57013 #> 1760:     116869.42: 0.00879012 0.00625942  5.61434 0.0456036 0.0793396 -0.172560 0.130337 0.466474 0.127173  5.16664  1.57012 #> 1764:     116869.42: 0.00879416 0.00626668  5.61435 0.0456092 0.0793461 -0.172600 0.130270 0.466381 0.127110  5.16661  1.57013 #> 1768:     116869.42: 0.00879766 0.00626265  5.61438 0.0455917 0.0793498 -0.172600 0.130263 0.466409 0.127152  5.16665  1.57012 #> 1772:     116869.42: 0.00878669 0.00625987  5.61437 0.0455904 0.0793471 -0.172605 0.130261 0.466411 0.127141  5.16664  1.57012 #> 1776:     116869.42: 0.00878971 0.00625464  5.61437 0.0455787 0.0793290 -0.172604 0.130275 0.466418 0.127154  5.16666  1.57012 #> 1780:     116869.42: 0.00878950 0.00625422  5.61439 0.0455829 0.0793294 -0.172608 0.130282 0.466416 0.127155  5.16667  1.57012 #> 1784:     116869.42: 0.00879098 0.00625691  5.61457 0.0455514 0.0792525 -0.172803 0.130171 0.466290 0.127131  5.16666  1.57013 #> 1788:     116869.42: 0.00880301 0.00623826  5.61457 0.0455564 0.0792501 -0.172807 0.130168 0.466300 0.127120  5.16666  1.57011 #> 1792:     116869.42: 0.00878623 0.00625948  5.61458 0.0455513 0.0792525 -0.172796 0.130177 0.466288 0.127125  5.16665  1.57012 #> 1796:     116869.42: 0.00878881 0.00625486  5.61458 0.0455535 0.0792517 -0.172798 0.130179 0.466280 0.127129  5.16666  1.57012 #> 1800:     116869.42: 0.00878996 0.00625466  5.61458 0.0455485 0.0792478 -0.172797 0.130175 0.466279 0.127130  5.16666  1.57012 #> 1804:     116869.42: 0.00878942 0.00624970  5.61459 0.0455258 0.0792324 -0.172804 0.130171 0.466285 0.127140  5.16667  1.57012 #> 1808:     116869.42: 0.00879391 0.00624972  5.61463 0.0455418 0.0792270 -0.172802 0.130145 0.466274 0.127132  5.16670  1.57012 #> 1812:     116869.42: 0.00879427 0.00625221  5.61466 0.0455564 0.0792211 -0.172802 0.130127 0.466271 0.127129  5.16670  1.57012 #> 1816:     116869.42: 0.00879298 0.00625026  5.61468 0.0455592 0.0792040 -0.172869 0.130117 0.466234 0.127103  5.16668  1.57013 #> 1820:     116869.42: 0.00878396 0.00626296  5.61468 0.0455582 0.0792055 -0.172873 0.130113 0.466243 0.127100  5.16669  1.57012 #> 1824:     116869.42: 0.00878759 0.00625977  5.61468 0.0455628 0.0792022 -0.172883 0.130116 0.466241 0.127111  5.16668  1.57011 #> 1828:     116869.42: 0.00879072 0.00626052  5.61468 0.0455554 0.0791991 -0.172879 0.130115 0.466238 0.127109  5.16669  1.57011 #> 1832:     116869.42: 0.00879205 0.00626023  5.61468 0.0455514 0.0792075 -0.172842 0.130074 0.466219 0.127089  5.16669  1.57011 #> 1836:     116869.42: 0.00879134 0.00626093  5.61468 0.0455529 0.0792060 -0.172850 0.130075 0.466213 0.127087  5.16669  1.57011 #> 1840:     116869.42: 0.00879095 0.00625963  5.61468 0.0455516 0.0792049 -0.172843 0.130076 0.466216 0.127088  5.16669  1.57011 #> 1844:     116869.42: 0.00879139 0.00625336  5.61470 0.0455404 0.0791852 -0.172813 0.130042 0.466209 0.127075  5.16670  1.57011 #> 1848:     116869.42: 0.00879230 0.00625788  5.61472 0.0455536 0.0791843 -0.172791 0.130020 0.466201 0.127061  5.16670  1.57011 #> 1852:     116869.42: 0.00878520 0.00625757  5.61472 0.0455594 0.0791864 -0.172791 0.130022 0.466186 0.127046  5.16671  1.57011 #> 1856:     116869.42: 0.00878789 0.00626147  5.61472 0.0455566 0.0791755 -0.172787 0.130016 0.466194 0.127049  5.16670  1.57011 #> 1860:     116869.42: 0.00878929 0.00625920  5.61472 0.0455546 0.0791723 -0.172786 0.130014 0.466193 0.127049  5.16670  1.57011 #> 1864:     116869.42: 0.00879095 0.00625433  5.61473 0.0455351 0.0791618 -0.172733 0.129968 0.466180 0.127037  5.16671  1.57011 #> 1868:     116869.42: 0.00879141 0.00625589  5.61476 0.0455441 0.0791592 -0.172721 0.129964 0.466185 0.127046  5.16672  1.57011 #> 1872:     116869.42: 0.00878789 0.00625854  5.61474 0.0455372 0.0791647 -0.172740 0.129966 0.466176 0.127042  5.16672  1.57011 #> 1876:     116869.42: 0.00878837 0.00625865  5.61474 0.0455328 0.0791550 -0.172737 0.129968 0.466178 0.127040  5.16671  1.57011 #> 1880:     116869.42: 0.00878960 0.00625370  5.61478 0.0455019 0.0791146 -0.172713 0.129888 0.466155 0.127019  5.16671  1.57011 #> 1884:     116869.42: 0.00878881 0.00625878  5.61479 0.0455048 0.0791094 -0.172672 0.129825 0.466117 0.126985  5.16670  1.57011 #> 1888:     116869.42: 0.00878460 0.00626265  5.61479 0.0455060 0.0791076 -0.172679 0.129830 0.466109 0.126978  5.16671  1.57011 #> 1892:     116869.42: 0.00878972 0.00625661  5.61480 0.0454931 0.0790956 -0.172668 0.129826 0.466115 0.126984  5.16671  1.57011 #> 1896:     116869.42: 0.00879165 0.00625304  5.61483 0.0454600 0.0790477 -0.172623 0.129676 0.466028 0.126906  5.16671  1.57011 #> 1900:     116869.42: 0.00878085 0.00624599  5.61476 0.0454509 0.0790630 -0.172700 0.129796 0.466094 0.126996  5.16669  1.57010 #> 1904:     116869.42: 0.00878863 0.00625784  5.61478 0.0454543 0.0790644 -0.172697 0.129795 0.466091 0.126998  5.16669  1.57012 #> 1908:     116869.42: 0.00878841 0.00625912  5.61478 0.0454487 0.0790731 -0.172694 0.129793 0.466092 0.126998  5.16669  1.57012 #> 1912:     116869.42: 0.00879294 0.00625899  5.61479 0.0454465 0.0790633 -0.172694 0.129795 0.466091 0.127004  5.16670  1.57011 #> 1916:     116869.42: 0.00879282 0.00625659  5.61479 0.0454373 0.0790559 -0.172690 0.129786 0.466088 0.127004  5.16670  1.57011 #> 1920:     116869.42: 0.00878771 0.00624755  5.61480 0.0453897 0.0790272 -0.172702 0.129761 0.466085 0.127022  5.16670  1.57010 #> 1924:     116869.42: 0.00879197 0.00624774  5.61481 0.0453724 0.0790178 -0.172721 0.129753 0.466063 0.127019  5.16670  1.57011 #> 1928:     116869.42: 0.00878762 0.00626135  5.61479 0.0453655 0.0790067 -0.172739 0.129747 0.466057 0.127023  5.16669  1.57011 #> 1932:     116869.42: 0.00878940 0.00625789  5.61479 0.0453674 0.0790034 -0.172739 0.129751 0.466058 0.127027  5.16670  1.57011 #> 1936:     116869.42: 0.00878928 0.00625772  5.61479 0.0453607 0.0790016 -0.172741 0.129758 0.466056 0.127035  5.16669  1.57011 #> 1940:     116869.42: 0.00878077 0.00625024  5.61481 0.0453243 0.0789788 -0.172762 0.129745 0.466060 0.127058  5.16669  1.57011 #> 1944:     116869.42: 0.00880441 0.00624360  5.61484 0.0452753 0.0789376 -0.172775 0.129714 0.466051 0.127082  5.16668  1.57011 #> 1948:     116869.42: 0.00879057 0.00624369  5.61485 0.0452941 0.0789409 -0.172765 0.129722 0.466054 0.127059  5.16668  1.57012 #> 1952:     116869.42: 0.00878853 0.00625655  5.61483 0.0452895 0.0789255 -0.172808 0.129724 0.466016 0.127055  5.16668  1.57012 #> 1956:     116869.42: 0.00877592 0.00624361  5.61490 0.0452407 0.0788710 -0.172849 0.129679 0.466002 0.127093  5.16666  1.57011 #> 1960:     116869.42: 0.00879073 0.00625569  5.61489 0.0452531 0.0789044 -0.172843 0.129706 0.466004 0.127077  5.16668  1.57012 #> 1964:     116869.42: 0.00878935 0.00625132  5.61490 0.0452490 0.0788960 -0.172827 0.129697 0.466003 0.127075  5.16668  1.57012 #> 1968:     116869.42: 0.00879088 0.00626157  5.61490 0.0452446 0.0788880 -0.172852 0.129691 0.465981 0.127071  5.16669  1.57011 #> 1972:     116869.42: 0.00879043 0.00625627  5.61498 0.0451916 0.0788366 -0.172886 0.129654 0.465967 0.127097  5.16667  1.57012 #> 1976:     116869.42: 0.00878797 0.00625816  5.61498 0.0451886 0.0788369 -0.172879 0.129654 0.465967 0.127097  5.16667  1.57011 #> 1980:     116869.42: 0.00878929 0.00625565  5.61498 0.0451923 0.0788366 -0.172886 0.129654 0.465967 0.127097  5.16667  1.57012 #> 1984:     116869.42: 0.00879321 0.00626021  5.61498 0.0451890 0.0788323 -0.172894 0.129648 0.465955 0.127097  5.16668  1.57012 #> 1988:     116869.42: 0.00879237 0.00625521  5.61503 0.0451346 0.0787829 -0.172946 0.129608 0.465923 0.127113  5.16668  1.57012 #> 1992:     116869.42: 0.00879141 0.00625698  5.61504 0.0451245 0.0787800 -0.172938 0.129599 0.465930 0.127113  5.16668  1.57012 #> 1996:     116869.42: 0.00879173 0.00625627  5.61504 0.0451253 0.0787799 -0.172938 0.129602 0.465921 0.127113  5.16668  1.57012 #> 2000:     116869.42: 0.00879290 0.00625952  5.61504 0.0451318 0.0787758 -0.172939 0.129599 0.465917 0.127109  5.16668  1.57012 #> 2004:     116869.42: 0.00879304 0.00625929  5.61505 0.0451351 0.0787737 -0.172937 0.129595 0.465914 0.127104  5.16668  1.57012 #> 2008:     116869.42: 0.00879537 0.00625303  5.61506 0.0451287 0.0787659 -0.172928 0.129585 0.465907 0.127098  5.16668  1.57011 #> 2012:     116869.42: 0.00879133 0.00625490  5.61506 0.0451311 0.0787678 -0.172933 0.129577 0.465901 0.127096  5.16669  1.57011 #> 2016:     116869.42: 0.00879396 0.00625741  5.61506 0.0451305 0.0787670 -0.172932 0.129578 0.465899 0.127099  5.16668  1.57011 #> 2020:     116869.42: 0.00879370 0.00625843  5.61507 0.0451453 0.0787677 -0.172925 0.129572 0.465891 0.127091  5.16669  1.57011 #> 2024:     116869.42: 0.00879350 0.00624981  5.61509 0.0451327 0.0787449 -0.172938 0.129552 0.465872 0.127096  5.16668  1.57012 #> 2028:     116869.42: 0.00879395 0.00626287  5.61513 0.0451303 0.0787267 -0.172950 0.129542 0.465861 0.127086  5.16668  1.57013 #> 2032:     116869.42: 0.00878938 0.00625609  5.61513 0.0451265 0.0787262 -0.172948 0.129543 0.465862 0.127081  5.16667  1.57012 #> 2036:     116869.42: 0.00879247 0.00625384  5.61515 0.0451162 0.0787214 -0.172956 0.129533 0.465855 0.127088  5.16668  1.57012 #> 2040:     116869.42: 0.00879267 0.00625792  5.61513 0.0451235 0.0787352 -0.172959 0.129535 0.465836 0.127078  5.16668  1.57012 #> 2044:     116869.42: 0.00879223 0.00626068  5.61513 0.0451268 0.0787302 -0.172964 0.129522 0.465822 0.127062  5.16668  1.57012 #> 2048:     116869.42: 0.00879459 0.00625858  5.61522 0.0450988 0.0786811 -0.173000 0.129451 0.465763 0.127044  5.16667  1.57012 #> 2052:     116869.42: 0.00879247 0.00625829  5.61523 0.0450992 0.0786786 -0.173001 0.129454 0.465764 0.127041  5.16667  1.57012 #> 2056:     116869.42: 0.00879343 0.00625863  5.61523 0.0450951 0.0786726 -0.172999 0.129454 0.465766 0.127045  5.16667  1.57012 #> 2060:     116869.42: 0.00879384 0.00625556  5.61523 0.0450865 0.0786704 -0.173001 0.129443 0.465758 0.127037  5.16667  1.57012 #> 2064:     116869.42: 0.00879277 0.00626165  5.61521 0.0451037 0.0786867 -0.172990 0.129453 0.465753 0.127031  5.16668  1.57011 #> 2068:     116869.42: 0.00879284 0.00625876  5.61523 0.0450959 0.0786786 -0.172997 0.129445 0.465744 0.127032  5.16668  1.57011 #> 2072:     116869.42: 0.00879249 0.00626377  5.61522 0.0450906 0.0786797 -0.173017 0.129437 0.465734 0.127025  5.16668  1.57011 #> 2076:     116869.42: 0.00879373 0.00626185  5.61523 0.0450841 0.0786640 -0.173025 0.129426 0.465716 0.127024  5.16668  1.57011 #> 2080:     116869.42: 0.00879332 0.00626373  5.61524 0.0450857 0.0786618 -0.173028 0.129430 0.465718 0.127026  5.16668  1.57011 #> 2084:     116869.42: 0.00879228 0.00626188  5.61524 0.0450841 0.0786617 -0.173029 0.129430 0.465719 0.127027  5.16668  1.57012 #> 2088:     116869.42: 0.00879438 0.00626090  5.61524 0.0450670 0.0786535 -0.173041 0.129425 0.465706 0.127028  5.16669  1.57011 #> 2092:     116869.42: 0.00880153 0.00626084  5.61527 0.0450304 0.0786302 -0.173075 0.129391 0.465665 0.127024  5.16668  1.57012 #> 2096:     116869.42: 0.00879063 0.00625653  5.61526 0.0450125 0.0786163 -0.173118 0.129372 0.465624 0.127015  5.16669  1.57011 #> 2100:     116869.42: 0.00879029 0.00625673  5.61527 0.0449853 0.0785900 -0.173165 0.129329 0.465565 0.126998  5.16669  1.57011 #> 2104:     116869.42: 0.00879051 0.00626227  5.61528 0.0449834 0.0785886 -0.173170 0.129338 0.465561 0.127003  5.16669  1.57011 #> 2108:     116869.42: 0.00879013 0.00626187  5.61528 0.0449851 0.0785890 -0.173171 0.129337 0.465560 0.127003  5.16669  1.57011 #> 2112:     116869.42: 0.00879063 0.00626051  5.61528 0.0449810 0.0785889 -0.173172 0.129340 0.465556 0.127003  5.16669  1.57011 #> 2116:     116869.42: 0.00879150 0.00625903  5.61528 0.0449557 0.0785722 -0.173208 0.129323 0.465522 0.127000  5.16670  1.57011 #> 2120:     116869.42: 0.00879116 0.00626073  5.61527 0.0449642 0.0785795 -0.173193 0.129339 0.465536 0.127005  5.16670  1.57011 #> 2124:     116869.42: 0.00879194 0.00626075  5.61527 0.0449641 0.0785791 -0.173193 0.129340 0.465536 0.127005  5.16670  1.57011 #> 2128:     116869.42: 0.00879305 0.00626433  5.61527 0.0449631 0.0785803 -0.173192 0.129341 0.465535 0.127010  5.16670  1.57011 #> 2132:     116869.42: 0.00878993 0.00626158  5.61527 0.0449672 0.0785765 -0.173186 0.129342 0.465541 0.127009  5.16669  1.57011 #> 2136:     116869.42: 0.00879013 0.00625926  5.61530 0.0449536 0.0785647 -0.173193 0.129336 0.465527 0.127014  5.16670  1.57011 #> 2140:     116869.42: 0.00878673 0.00625971  5.61529 0.0449545 0.0785692 -0.173192 0.129350 0.465538 0.127024  5.16669  1.57011 #> 2144:     116869.42: 0.00879155 0.00625954  5.61529 0.0449559 0.0785662 -0.173188 0.129350 0.465537 0.127026  5.16669  1.57011 #> 2148:     116869.42: 0.00879093 0.00625983  5.61529 0.0449507 0.0785700 -0.173185 0.129356 0.465534 0.127030  5.16670  1.57011 #> 2152:     116869.42: 0.00879044 0.00625999  5.61528 0.0449509 0.0785706 -0.173177 0.129365 0.465543 0.127035  5.16670  1.57011 #> 2156:     116869.42: 0.00879021 0.00625732  5.61529 0.0449502 0.0785731 -0.173176 0.129364 0.465542 0.127033  5.16670  1.57011 #> 2160:     116869.42: 0.00879152 0.00626107  5.61529 0.0449528 0.0785703 -0.173176 0.129364 0.465542 0.127033  5.16670  1.57011 #> 2164:     116869.42: 0.00879060 0.00626066  5.61530 0.0449545 0.0785652 -0.173174 0.129376 0.465547 0.127045  5.16669  1.57011 #> 2168:     116869.42: 0.00879081 0.00626110  5.61531 0.0449478 0.0785602 -0.173189 0.129361 0.465528 0.127034  5.16669  1.57011 #> 2172:     116869.42: 0.00879147 0.00626083  5.61531 0.0449499 0.0785628 -0.173181 0.129371 0.465534 0.127041  5.16669  1.57011 #> 2176:     116869.42: 0.00879351 0.00626188  5.61531 0.0449485 0.0785586 -0.173172 0.129365 0.465531 0.127040  5.16670  1.57011 #> 2180:     116869.42: 0.00879091 0.00626201  5.61531 0.0449528 0.0785583 -0.173174 0.129372 0.465531 0.127039  5.16670  1.57011 #> 2184:     116869.42: 0.00879178 0.00625940  5.61535 0.0449299 0.0785319 -0.173209 0.129346 0.465496 0.127038  5.16669  1.57011 #> 2188:     116869.42: 0.00879314 0.00626232  5.61533 0.0449469 0.0785443 -0.173198 0.129354 0.465508 0.127038  5.16669  1.57011 #> 2192:     116869.42: 0.00879150 0.00626165  5.61534 0.0449376 0.0785431 -0.173197 0.129362 0.465510 0.127044  5.16669  1.57011 #> 2196:     116869.42: 0.00879120 0.00626174  5.61534 0.0449364 0.0785430 -0.173201 0.129364 0.465508 0.127045  5.16669  1.57011 #> 2200:     116869.42: 0.00879106 0.00626150  5.61535 0.0449335 0.0785370 -0.173198 0.129361 0.465504 0.127047  5.16669  1.57011 #> 2204:     116869.42: 0.00879067 0.00626107  5.61535 0.0449352 0.0785309 -0.173198 0.129357 0.465496 0.127048  5.16669  1.57011 #> 2208:     116869.42: 0.00879256 0.00626132  5.61535 0.0449356 0.0785322 -0.173197 0.129358 0.465497 0.127044  5.16669  1.57011 #> 2212:     116869.42: 0.00879146 0.00626221  5.61535 0.0449337 0.0785299 -0.173198 0.129361 0.465495 0.127046  5.16669  1.57011 #> 2216:     116869.42: 0.00879091 0.00626167  5.61535 0.0449281 0.0785293 -0.173198 0.129363 0.465495 0.127049  5.16669  1.57011 #> rho:  2.0e-07 eval: 2218 fn:      116869. par:0.00879091 0.00626167  5.61535 0.0449281 0.0785293 -0.173198 0.129363 0.465495 0.127049  5.16669  1.57011  #> 2220:     116869.42: 0.00879063 0.00626190  5.61535 0.0449280 0.0785294 -0.173198 0.129363 0.465495 0.127048  5.16669  1.57011 #> 2224:     116869.42: 0.00879156 0.00626068  5.61535 0.0449282 0.0785284 -0.173197 0.129363 0.465494 0.127049  5.16669  1.57011 #> 2228:     116869.42: 0.00879254 0.00626133  5.61535 0.0449303 0.0785286 -0.173196 0.129364 0.465485 0.127042  5.16670  1.57011 #> 2232:     116869.42: 0.00879244 0.00626116  5.61535 0.0449306 0.0785273 -0.173199 0.129363 0.465483 0.127039  5.16670  1.57011 #> 2236:     116869.42: 0.00879254 0.00626024  5.61535 0.0449301 0.0785293 -0.173196 0.129364 0.465484 0.127041  5.16670  1.57011 #> 2240:     116869.42: 0.00879166 0.00626079  5.61535 0.0449344 0.0785309 -0.173193 0.129366 0.465482 0.127040  5.16670  1.57011 #> 2244:     116869.42: 0.00879311 0.00626329  5.61535 0.0449462 0.0785368 -0.173177 0.129374 0.465484 0.127038  5.16670  1.57011 #> 2248:     116869.42: 0.00879215 0.00626161  5.61535 0.0449562 0.0785340 -0.173179 0.129368 0.465472 0.127025  5.16671  1.57011 #> 2252:     116869.42: 0.00879442 0.00625788  5.61534 0.0449579 0.0785362 -0.173177 0.129374 0.465474 0.127026  5.16671  1.57011 #> 2256:     116869.42: 0.00879129 0.00626077  5.61534 0.0449572 0.0785348 -0.173176 0.129374 0.465471 0.127029  5.16671  1.57011 #> 2260:     116869.42: 0.00879165 0.00626088  5.61534 0.0449530 0.0785285 -0.173178 0.129370 0.465465 0.127030  5.16670  1.57011 #> 2264:     116869.42: 0.00879134 0.00626283  5.61534 0.0449580 0.0785303 -0.173177 0.129372 0.465463 0.127028  5.16670  1.57011 #> 2268:     116869.42: 0.00879134 0.00626017  5.61535 0.0449574 0.0785293 -0.173174 0.129376 0.465459 0.127028  5.16671  1.57011 #> 2272:     116869.42: 0.00879269 0.00625920  5.61536 0.0449620 0.0785328 -0.173164 0.129375 0.465451 0.127029  5.16671  1.57011 #> 2276:     116869.42: 0.00879290 0.00626163  5.61535 0.0449611 0.0785343 -0.173163 0.129375 0.465451 0.127027  5.16672  1.57011 #> 2280:     116869.42: 0.00879208 0.00626165  5.61535 0.0449626 0.0785337 -0.173163 0.129376 0.465454 0.127024  5.16671  1.57011 #> 2284:     116869.42: 0.00879285 0.00626292  5.61536 0.0449637 0.0785353 -0.173154 0.129386 0.465457 0.127037  5.16670  1.57011 #> 2288:     116869.42: 0.00879066 0.00626219  5.61535 0.0449642 0.0785352 -0.173158 0.129391 0.465450 0.127033  5.16671  1.57011 #> 2292:     116869.42: 0.00879240 0.00626182  5.61536 0.0449944 0.0785437 -0.173127 0.129407 0.465440 0.127023  5.16672  1.57011 #> 2296:     116869.42: 0.00879214 0.00626528  5.61536 0.0449933 0.0785444 -0.173126 0.129406 0.465439 0.127024  5.16672  1.57011 #> 2300:     116869.42: 0.00879155 0.00626243  5.61536 0.0449948 0.0785428 -0.173128 0.129408 0.465440 0.127023  5.16672  1.57011 #> 2304:     116869.42: 0.00879161 0.00626111  5.61537 0.0449880 0.0785382 -0.173125 0.129404 0.465435 0.127024  5.16671  1.57011 #> 2308:     116869.42: 0.00879150 0.00626160  5.61537 0.0449889 0.0785389 -0.173126 0.129405 0.465435 0.127023  5.16671  1.57011 #> 2312:     116869.42: 0.00879167 0.00626121  5.61537 0.0449899 0.0785423 -0.173123 0.129413 0.465433 0.127027  5.16672  1.57011 #> 2316:     116869.42: 0.00879217 0.00626369  5.61538 0.0449978 0.0785458 -0.173105 0.129423 0.465429 0.127029  5.16672  1.57011 #> 2320:     116869.42: 0.00879134 0.00626096  5.61538 0.0449999 0.0785462 -0.173105 0.129427 0.465435 0.127032  5.16672  1.57011 #> 2324:     116869.42: 0.00879065 0.00626184  5.61538 0.0449989 0.0785442 -0.173101 0.129429 0.465434 0.127032  5.16671  1.57011 #> 2328:     116869.42: 0.00879265 0.00626176  5.61538 0.0449986 0.0785387 -0.173106 0.129425 0.465431 0.127032  5.16671  1.57011 #> 2332:     116869.42: 0.00879202 0.00626079  5.61538 0.0449963 0.0785432 -0.173105 0.129436 0.465426 0.127037  5.16671  1.57011 #> 2336:     116869.42: 0.00879197 0.00626120  5.61538 0.0449958 0.0785435 -0.173105 0.129438 0.465424 0.127038  5.16671  1.57011 #> 2340:     116869.42: 0.00879055 0.00626238  5.61539 0.0449961 0.0785502 -0.173093 0.129472 0.465401 0.127054  5.16672  1.57011 #> 2344:     116869.42: 0.00879345 0.00626372  5.61539 0.0449933 0.0785511 -0.173090 0.129470 0.465398 0.127054  5.16672  1.57011 #> 2348:     116869.42: 0.00879366 0.00626340  5.61540 0.0449969 0.0785451 -0.173097 0.129473 0.465400 0.127057  5.16672  1.57011 #> 2352:     116869.42: 0.00879267 0.00626239  5.61539 0.0449938 0.0785489 -0.173095 0.129473 0.465400 0.127055  5.16672  1.57011 #> 2356:     116869.42: 0.00879137 0.00626346  5.61538 0.0449893 0.0785531 -0.173106 0.129502 0.465369 0.127061  5.16672  1.57011 #> 2360:     116869.42: 0.00879608 0.00626560  5.61538 0.0450002 0.0785647 -0.173098 0.129518 0.465361 0.127065  5.16673  1.57011 #> 2364:     116869.42: 0.00879298 0.00626133  5.61539 0.0450028 0.0785618 -0.173099 0.129518 0.465360 0.127067  5.16672  1.57011 #> 2368:     116869.42: 0.00879140 0.00626243  5.61538 0.0449982 0.0785625 -0.173100 0.129516 0.465363 0.127068  5.16671  1.57011 #> 2372:     116869.42: 0.00879212 0.00626363  5.61538 0.0449968 0.0785608 -0.173107 0.129518 0.465355 0.127067  5.16671  1.57011 #> 2376:     116869.42: 0.00879227 0.00626247  5.61539 0.0450008 0.0785665 -0.173094 0.129537 0.465349 0.127075  5.16672  1.57011 #> 2380:     116869.42: 0.00879182 0.00626431  5.61538 0.0449989 0.0785658 -0.173120 0.129534 0.465329 0.127068  5.16672  1.57011 #> 2384:     116869.42: 0.00879015 0.00626439  5.61538 0.0449988 0.0785665 -0.173121 0.129535 0.465330 0.127068  5.16672  1.57011 #> 2388:     116869.42: 0.00879156 0.00626214  5.61537 0.0449879 0.0785622 -0.173118 0.129531 0.465317 0.127067  5.16672  1.57011 #> 2392:     116869.42: 0.00879115 0.00626189  5.61539 0.0449868 0.0785670 -0.173128 0.129550 0.465285 0.127073  5.16672  1.57011 #> 2396:     116869.42: 0.00878990 0.00626220  5.61539 0.0449849 0.0785698 -0.173125 0.129549 0.465284 0.127070  5.16672  1.57011 #> 2400:     116869.42: 0.00879138 0.00626116  5.61539 0.0449858 0.0785665 -0.173127 0.129550 0.465285 0.127073  5.16672  1.57011 #> 2404:     116869.42: 0.00879229 0.00626120  5.61539 0.0449867 0.0785659 -0.173125 0.129551 0.465284 0.127072  5.16672  1.57011 #> 2408:     116869.42: 0.00879135 0.00626145  5.61539 0.0449830 0.0785669 -0.173137 0.129561 0.465251 0.127069  5.16672  1.57011 #> 2412:     116869.42: 0.00879236 0.00626244  5.61538 0.0449794 0.0785621 -0.173137 0.129549 0.465268 0.127064  5.16672  1.57011 #> 2416:     116869.42: 0.00879232 0.00626176  5.61537 0.0449803 0.0785630 -0.173134 0.129550 0.465268 0.127065  5.16672  1.57011 #> 2420:     116869.42: 0.00879234 0.00626129  5.61537 0.0449821 0.0785610 -0.173133 0.129551 0.465267 0.127063  5.16672  1.57011 #> 2424:     116869.42: 0.00879095 0.00626224  5.61536 0.0449785 0.0785526 -0.173151 0.129542 0.465228 0.127039  5.16671  1.57011 #> 2428:     116869.42: 0.00879315 0.00626243  5.61536 0.0449746 0.0785464 -0.173167 0.129537 0.465218 0.127037  5.16671  1.57011 #> 2432:     116869.42: 0.00879234 0.00626249  5.61535 0.0449743 0.0785459 -0.173164 0.129537 0.465217 0.127035  5.16671  1.57011 #> 2436:     116869.42: 0.00879125 0.00626163  5.61535 0.0449740 0.0785449 -0.173163 0.129539 0.465215 0.127034  5.16671  1.57011 #> 2440:     116869.42: 0.00878990 0.00626112  5.61535 0.0449762 0.0785499 -0.173165 0.129556 0.465184 0.127034  5.16671  1.57011 #> 2444:     116869.42: 0.00878970 0.00626303  5.61535 0.0449718 0.0785499 -0.173163 0.129576 0.465164 0.127041  5.16671  1.57011 #> 2448:     116869.42: 0.00879023 0.00626650  5.61535 0.0449868 0.0785511 -0.173158 0.129588 0.465165 0.127045  5.16671  1.57011 #> 2452:     116869.42: 0.00878980 0.00626248  5.61535 0.0449833 0.0785544 -0.173155 0.129588 0.465166 0.127043  5.16671  1.57011 #> 2456:     116869.42: 0.00879100 0.00626233  5.61535 0.0449778 0.0785509 -0.173156 0.129586 0.465166 0.127045  5.16671  1.57011 #> 2460:     116869.42: 0.00879060 0.00626241  5.61535 0.0449757 0.0785519 -0.173158 0.129594 0.465152 0.127047  5.16671  1.57011 #> 2464:     116869.42: 0.00879140 0.00626069  5.61535 0.0449767 0.0785501 -0.173154 0.129592 0.465159 0.127049  5.16671  1.57011 #> 2468:     116869.42: 0.00879123 0.00626228  5.61535 0.0449779 0.0785477 -0.173156 0.129588 0.465156 0.127046  5.16671  1.57011 #> 2472:     116869.42: 0.00879124 0.00626232  5.61535 0.0449767 0.0785484 -0.173155 0.129589 0.465157 0.127046  5.16671  1.57011 #> 2476:     116869.42: 0.00879109 0.00626239  5.61535 0.0449760 0.0785475 -0.173155 0.129590 0.465157 0.127046  5.16671  1.57011 #> 2480:     116869.42: 0.00879004 0.00626197  5.61535 0.0449761 0.0785491 -0.173146 0.129603 0.465147 0.127049  5.16671  1.57011 #> 2484:     116869.42: 0.00879057 0.00626182  5.61535 0.0449756 0.0785471 -0.173151 0.129597 0.465147 0.127047  5.16671  1.57011 #> 2488:     116869.42: 0.00879024 0.00626151  5.61535 0.0449742 0.0785476 -0.173150 0.129597 0.465146 0.127046  5.16671  1.57011 #> 2492:     116869.42: 0.00879141 0.00626199  5.61535 0.0449739 0.0785465 -0.173149 0.129597 0.465146 0.127046  5.16671  1.57011 #> 2496:     116869.42: 0.00879053 0.00626173  5.61535 0.0449691 0.0785431 -0.173144 0.129604 0.465128 0.127045  5.16671  1.57011 #> 2500:     116869.42: 0.00879004 0.00626132  5.61535 0.0449679 0.0785427 -0.173140 0.129611 0.465113 0.127046  5.16671  1.57011 #> 2504:     116869.42: 0.00879143 0.00626142  5.61535 0.0449685 0.0785427 -0.173140 0.129612 0.465112 0.127046  5.16671  1.57011 #> 2508:     116869.42: 0.00879136 0.00626129  5.61535 0.0449680 0.0785429 -0.173139 0.129611 0.465112 0.127046  5.16671  1.57011 #> 2512:     116869.42: 0.00879141 0.00626189  5.61535 0.0449675 0.0785405 -0.173139 0.129611 0.465112 0.127045  5.16671  1.57011 #> 2516:     116869.42: 0.00879132 0.00626158  5.61534 0.0449641 0.0785351 -0.173138 0.129605 0.465110 0.127040  5.16671  1.57011 #> 2520:     116869.42: 0.00879128 0.00626162  5.61534 0.0449649 0.0785339 -0.173135 0.129604 0.465107 0.127038  5.16671  1.57011 #> 2524:     116869.42: 0.00879060 0.00626119  5.61534 0.0449598 0.0785298 -0.173132 0.129606 0.465091 0.127035  5.16670  1.57011 #> 2528:     116869.42: 0.00879073 0.00625992  5.61534 0.0449628 0.0785290 -0.173131 0.129606 0.465085 0.127033  5.16670  1.57011 #> 2532:     116869.42: 0.00879069 0.00626125  5.61534 0.0449593 0.0785275 -0.173127 0.129608 0.465086 0.127036  5.16670  1.57011 #> 2536:     116869.42: 0.00879102 0.00626176  5.61534 0.0449595 0.0785271 -0.173127 0.129608 0.465087 0.127038  5.16670  1.57011 #> 2540:     116869.42: 0.00879112 0.00626204  5.61534 0.0449608 0.0785259 -0.173127 0.129606 0.465088 0.127036  5.16670  1.57011 #> 2544:     116869.42: 0.00879113 0.00626229  5.61534 0.0449605 0.0785260 -0.173127 0.129607 0.465088 0.127036  5.16670  1.57011 #> 2548:     116869.42: 0.00879102 0.00626232  5.61534 0.0449606 0.0785262 -0.173127 0.129607 0.465088 0.127036  5.16670  1.57011 #> 2552:     116869.42: 0.00879083 0.00626215  5.61534 0.0449603 0.0785255 -0.173127 0.129607 0.465088 0.127036  5.16670  1.57011 #> 2556:     116869.42: 0.00879087 0.00626173  5.61534 0.0449592 0.0785248 -0.173127 0.129607 0.465087 0.127037  5.16670  1.57011 #> 2560:     116869.42: 0.00879077 0.00626178  5.61534 0.0449587 0.0785225 -0.173126 0.129607 0.465087 0.127038  5.16671  1.57011 #> 2564:     116869.42: 0.00879056 0.00626158  5.61534 0.0449567 0.0785207 -0.173125 0.129609 0.465086 0.127039  5.16671  1.57011 #> 2568:     116869.42: 0.00879068 0.00626127  5.61534 0.0449552 0.0785190 -0.173125 0.129609 0.465084 0.127040  5.16671  1.57011 #> 2572:     116869.42: 0.00879086 0.00626156  5.61534 0.0449552 0.0785193 -0.173126 0.129609 0.465084 0.127040  5.16671  1.57011 #> 2576:     116869.42: 0.00879095 0.00626188  5.61534 0.0449555 0.0785191 -0.173125 0.129609 0.465084 0.127041  5.16671  1.57011 #> 2580:     116869.42: 0.00879066 0.00626210  5.61534 0.0449542 0.0785181 -0.173125 0.129610 0.465084 0.127042  5.16671  1.57011 #> 2584:     116869.42: 0.00879050 0.00626172  5.61534 0.0449524 0.0785160 -0.173124 0.129610 0.465082 0.127042  5.16671  1.57011 #> 2588:     116869.42: 0.00879047 0.00626137  5.61534 0.0449513 0.0785152 -0.173124 0.129611 0.465081 0.127043  5.16671  1.57011 #> 2592:     116869.42: 0.00879052 0.00626152  5.61534 0.0449515 0.0785153 -0.173124 0.129611 0.465081 0.127043  5.16671  1.57011 #> 2596:     116869.42: 0.00879070 0.00626172  5.61534 0.0449516 0.0785153 -0.173124 0.129612 0.465082 0.127043  5.16671  1.57011 #> 2600:     116869.42: 0.00879096 0.00626199  5.61534 0.0449513 0.0785142 -0.173123 0.129611 0.465081 0.127043  5.16671  1.57011 #> 2604:     116869.42: 0.00879091 0.00626156  5.61535 0.0449504 0.0785123 -0.173123 0.129611 0.465080 0.127044  5.16671  1.57011 #> 2608:     116869.42: 0.00879120 0.00626202  5.61535 0.0449505 0.0785117 -0.173123 0.129611 0.465079 0.127044  5.16671  1.57011 #> 2612:     116869.42: 0.00879119 0.00626199  5.61535 0.0449505 0.0785120 -0.173123 0.129611 0.465079 0.127043  5.16671  1.57011 #> 2616:     116869.42: 0.00879121 0.00626199  5.61535 0.0449503 0.0785114 -0.173123 0.129611 0.465079 0.127044  5.16671  1.57011 #> At return #> eval: 2616 fn:      116869.42 par: 0.00879119 0.00626196  5.61535 0.0449504 0.0785115 -0.173123 0.129611 0.465079 0.127044  5.16671  1.57011 # }"},{"path":"https://bavodc.github.io/actuaRE/reference/weights-actuaRE.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the model weights — weights-actuaRE","title":"Extract the model weights — weights-actuaRE","text":"weights generic function extracts fitting weights objects returned modeling functions. Methods can make use napredict methods compensate omission missing values. default methods .","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/weights-actuaRE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the model weights — weights-actuaRE","text":"","code":"# S3 method for cpglm weights(object, type = c(\"prior\", \"working\"), ...)  # S3 method for speedglm weights(object, type = c(\"prior\", \"working\"), ...)  # S3 method for hierCredGLM weights(object, type = c(\"prior\", \"working\"), ...)  # S3 method for hierCredTweedie weights(object, type = c(\"prior\", \"working\"), ...)"},{"path":"https://bavodc.github.io/actuaRE/reference/weights-actuaRE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the model weights — weights-actuaRE","text":"object object extraction model weights meaningful. Can either cpglm, speedglm, hierCredibility, hierCredGLM hierCredTweedie type indicates prior working weights need extracted. ... ignored","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/weights-actuaRE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the model weights — weights-actuaRE","text":"Weights extracted object object: default method looks component \"weights\" NULL calls napredict .","code":""},{"path":[]},{"path":"https://bavodc.github.io/actuaRE/reference/weights.cpglm.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract model weights — weights.cpglm","title":"Extract model weights — weights.cpglm","text":"weights generic function extracts fitting weights objects returned modeling functions. Methods can make use napredict methods compensate omission missing values. default methods .","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/weights.cpglm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract model weights — weights.cpglm","text":"","code":"# S3 method for cpglm weights(object, type = c(\"prior\", \"working\"), ...)  # S3 method for speedglm weights(object, type = c(\"prior\", \"working\"), ...)  # S3 method for hierCredGLM weights(object, type = c(\"prior\", \"working\"), ...)  # S3 method for hierCredTweedie weights(object, type = c(\"prior\", \"working\"), ...)"},{"path":"https://bavodc.github.io/actuaRE/reference/weights.cpglm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract model weights — weights.cpglm","text":"object object extraction model weights meaningful. type indicates prior working weights need extracted. ... ignored","code":""},{"path":"https://bavodc.github.io/actuaRE/reference/weights.cpglm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract model weights — weights.cpglm","text":"Weights extracted object object: default method looks component \"weights\" NULL calls napredict .","code":""}]
